{
  "version": 3,
  "sources": [
    "../../delegator_contract/contract.py",
    "../../helpers/common.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0RQ;;AAA0B;AAA1B;AACA;;AAA2B;AAA3B;AAG+C;;AAAT;AAC9B;AAFR;AAAA;AAKA;;AAAuB;AAAvB;AACA;;AAA+B;AAA/B;AAE+C;;AAAT;AAC9B;;AAFR;AAAA;AAMA;AAAmB;;AAAnB;AACA;;AAAuB;;AAAvB;AAEA;;AAAmB;AAAnB;AACA;AAAiB;AAAjB;AACA;;AAAmB;AAAnB;AAEA;;AAAyB;AAAzB;AACyC;;AAAT;AAAhC;;AAAA;;AAAA;AACA;;AAAA;;AAAA;AACwD;;AAAT;AAA/C;;AAAA;AAAA;AAEA;AAAa;;AAAb;AAEA;;AAAA;AAAA;AAEA;;AAAsB;AAAtB;AACA;;AAAyB;AAAzB;AAEA;;AAAwB;AAAxB;AAEA;;AAA8B;AAA9B;AAvNR;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAm/BK;;AAAA;AAAA;AAAA;;AAAA;AAn/BL;;;AAAA;AAAA;;;AAAA;AAm/BK;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AA5DA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAv7BL;;;AAu7BK;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAtCA;;AAAA;AAAA;AAAA;;AAAA;AAj5BL;;;AAi5BK;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAtCA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAtJA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AA3CA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAtEA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAxDA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AA7DA;;AAAA;AAAA;AAAA;;AAAA;AA/eL;;;AA+eK;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AA9CA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AA7CA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AA1CA;;AAAA;AAAA;AAAA;;AAAA;AA1WL;;;AA0WK;;;AAAA;;AA1CA;;AAAA;AAAA;AAAA;;AAAA;AAhUL;;AAAA;AAAA;AAgUK;;;AAAA;;AAhEA;;AAAA;AAAA;AAAA;;AAAA;AAhQL;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAgQK;;;AAAA;;AAvCA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAzNL;;;AAAA;;;AAAA;;;AAAA;AAyNK;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAL;;;AA4BQ;;AAAA;;AAAA;AACA;;AAA2B;;AAA3B;AAEA;AAAA;;AAAA;AACA;;AAAA;;AAAA;AAGA;AAAa;;;AAAb;AAEmB;;AAAZ;AAAP;AAER;;;AA2Be;;AAAc;;AAAd;AAAP;AACO;AAAA;AAAA;AAAA;AAAc;;;AAAd;AAAP;AAEA;;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;;AAAA;;AAAA;AAEA;;AAAmB;;AAAnB;AACiB;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAjB;AAAA;AAAA;AACwB;AAAA;;AAAA;AAAA;AAAxB;;AAAA;AAAA;AAIc;AAAA;AAAA;AAAA;AAAA;;;AAAA;AACA;AAAA;AAAA;AAAA;AACE;AAAA;;AAAA;AAAA;AC+SC;AAAb;AAA0C;AAA3C;ADlTH;;AAAA;AAAA;AAOc;AAAA;AAAA;AAAA;AAAA;;;AAAA;AACA;AAAA;AAAA;AAAA;AACE;AAAA;;AAAA;AAAA;ACySC;AAAb;AAA0C;AAA3C;AD5SH;;AAAA;AAAA;AAMG;;AAAA;;;AAAA;AAAyC;AAAzC;AAAA;AAAX;;;AAEY;AACe;;AAAA;AACI;;AACF;;;;;;;AAHjB;;;AAAA;;;AAAA;AAOJ;AAAa;;;AAAb;AAEA;AAER;;;AAce;;AAAc;;AAAd;AAAP;AACO;AAAA;AAAA;AAAA;AAAc;;;AAAd;AAAP;AAGW;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAuD;AAAA;;AAAA;AAAA;AAAvD;AACG;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAA+D;AAAA;;AAAA;AAAA;AAA/D;AACC;AACZ;;AAAA;;AAAA;AAAA;;AAAY;AAAZ;AAAX;;;AACmB;;AAAA;;AAAgB;;AAAhB;AAAP;AAE8B;AAAA;AAAA;AAAA;AAAA;;;AAAvB;AAAA;AAAA;AAAP;AACO;;AAAA;;AAAA;AAAP;AAUG;;;;AAAA;AAAP;AAGA;AAAa;;AAAb;AAEA;AAdK;;AAAY;AAAZ;AAAb;AACmB;;AAAA;;AAAsB;;AAAtB;AAAP;AAE4B;AAAA;AAAA;AAAA;AAAA;;;AAArB;;AAAA;;AAAA;AAAA;AAAP;AACO;;AAAA;;AAAA;AAAP;;;;AAYZ;;;AAce;;AAAc;;AAAd;AAAP;AACO;AAAA;AAAA;AAAA;AAAc;;AAAd;AAAP;AAEsB;AAAA;AAAA;AAAA;AAAf;;AAAA;AAAP;AAGO;;AACH;AAAA;;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAFA;AADG;AAAP;AAQuE;AAAA;;AAAA;AAAA;AAAzC;;AAA9B;AAEA;AAGA;;AAAyB;;AAAzB;AAEA;;AAAsB;AAAtB;AAGA;AAAa;;AAAb;AAEA;AAER;;;AAee;;AAAc;;AAAd;AAAP;AACO;AAAA;AAAA;AAAA;AAAc;;AAAd;AAAP;AAGO;;AACH;AAAA;;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAFA;AADG;AAAP;AAOkB;AAAA;AAAA;AAAA;AAAA;;;AAAA;AACL;AAAA;;AAAA;AAAA;AAAuB;AAAA;;AAAA;AAAA;AAAvB;AACb;;;AAMA;AAAa;;;AAAb;AAGA;;AAAmB;;AAAnB;AAI6B;AAAA;AAAA;AAAA;AAFQ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAC9B;AAAP;AAKR;;;AAee;;AAAc;;AAAd;AAAP;AACO;AAAA;AAAA;AAAA;AAAc;;AAAd;AAAP;AAGO;;AACH;AAAA;;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AADA;AADG;AAAP;AAMkB;AAAA;AAAA;AAAA;AAAA;;;AAAA;AACP;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAuD;AAAA;;AAAA;AAAA;AAAvD;AACG;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAA+D;AAAA;;AAAA;AAAA;AAA/D;AACD;AACb;;;AAMA;AAAa;;AAAb;AAGA;;AAAmB;;AAAnB;AAI6B;AAAA;AAAA;AAAA;AAFQ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAC9B;AAAP;AAKR;;;AAyBe;;AAAc;;AAAd;AAAP;AACO;AAAA;AAAA;AAAA;AAAc;;AAAd;AAAP;AAG+B;;AAAA;;;AAAxB;AAAA;;AAAA;AAAA;AAAA;AAAP;AAC2B;;AAAA;;;AAApB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAP;AACyB;;AAAA;;;AAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAP;AAGyB;;AAAA;;;AAAA;AAAzB;;AAAA;AAAA;AACgB;;AAAA;;;AAAhB;;AAAA;AAAA;AACe;;AAAA;;;AAAf;;AAAA;AAAA;AACuB;;AAAA;;;AAAvB;;AAAA;AAAA;AAGO;;AACH;AAAA;;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AADA;AADG;AAAP;AAOI;AAAA;AAAA;AAAA;AAAA;;;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAFoB;;;AAMxB;AAAa;;AAAb;AAK6B;AAAA;AAAA;AAAA;AAFtB;AAD8B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAC9B;AAAP;AAMR;;;AAqBe;;AAAc;;AAAd;AAAP;AACO;AAAA;AAAA;AAAA;AAAc;;AAAd;AAAP;AAEO;AAAA;AAAA;AAAA;AAAiB;;AAAjB;AAAP;AAEO;AAAA;;AAAA;AAAA;AAAyB;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAzB;AAAoF;;AAApF;AAAP;AAGW;;;;AAAA;AAAJ;AAAP;AAGA;AAAA;;AAAA;AAAA;AAAuB;AAAvB;AAAA;;AAAA;AAAA;AACA;;AAAyB;;AAAzB;AAGwB;;;AAEH;AACgB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACX;AAAA;;AAAA;AAAA;AAAA;;;AAAvB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAX;;;AAEY;AAAa;;;AAAb;AAEA;;AAAmB;;AAAnB;AAEqB;AAArB;;AACqC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAArC;;AAGqB;;AAAA;AAAA;;AAAA;AAEI;AAAA;AAAA;AAAA;AAHtB;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAP;;AAAA;AAOR;;;;;;;AAgBe;;AAAc;;AAAd;AAAP;AACO;AAAA;AAAA;AAAA;AAAc;;AAAd;AAAA;;;AAAmC;AAAA;AAAA;AAAA;AAAc;;AAAd;AAAnC;;;AAA2E;AAAA;AAAA;AAAA;AAAc;;AAAd;AAA3E;;;;AAAP;AAEO;AAAA;AAAA;AAAA;AAAA;;;AAAoD;AAApD;AAAA;AAAP;AAEY;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAZ;;AACoB;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAApB;;AACY;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAZ;;AACoB;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAApB;;AAEc;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAd;AAAA;;AACgB;;AAAb;AAAA;;AAAA;AAAX;;;AAGe;AAAA;AAAA;AAAA;AAAc;;AAAd;AAAf;;;AACuC;AAAA;;AAAA;AAAA;AAAvB;;AAAW;AACuB;AAAA;;AAAA;AAAA;AAAlC;;AAAc;AACR;AACe;;AAAd;;AAAA;;AAAA;AAAA;AAAP;AA0BR;AAAa;;;AAAb;AAEA;;AAAmB;;AAAnB;AAI6B;AAAA;AAAA;AAAA;AAFQ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAC9B;AAAP;;AAAA;AA9BS;AAAA;AAAA;AAAA;AAAc;;AAAd;AAAjB;;;AAC2B;AAAA;;AAAA;AAAA;AACG;AAAA;;AAAA;AAAA;AACR;AACe;;AAAd;;AAAA;;AAAA;AAAA;AAAP;;;;AACC;AAAA;AAAA;AAAA;AAAc;;AAAd;AAAjB;;;AACmB;;AAAe;AAAA;AAAA;AAAA;AAAf;AAAnB;;;AAC4B;;AAOI;AAAA;;AAAA;AAAA;AC5DP;;AAAA;AAAA;AAAb;;AAAA;AAA0C;AAA3C;ADiEqB;AAAA;;AAAA;AAAA;ACjEP;;AAAA;AAAA;AAAb;;AAAA;AAA0C;AAA3C;ADmEW;AACe;;AAAd;;AAAA;;AAAA;AAAA;AAAP;;;;AAbY;AAAA;AAAA;AAAA;;;;;;;;AA0B5B;;;AAmBe;;AAAc;;AAAd;AAAP;AACO;AAAA;AAAA;AAAA;AAAc;;AAAd;AAAP;AAEO;AAAA;AAAA;AAAA;AAAiB;;AAAjB;AAAP;AAGuE;AAAA;;AAAA;AAAA;AAAzC;;AAA9B;AAEO;AAAP;AAGwB;;;AAExB;AAAa;;;AAAb;AAEA;;AAAmB;;AAAnB;AAK6B;AAAA;AAAA;AAAA;AAFtB;AAD8B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAC9B;AAAP;AAMR;;;AAiBe;;AAAc;;AAAd;AAAP;AACO;AAAA;AAAA;AAAA;AAAc;;AAAd;AAAP;AAEO;AAAA;;AAAA;AAAA;AAAwB;;AAAxB;AAAP;AAEG;;AAAe;AAAA;AAAA;AAAA;AAAf;AAAX;;;AAC6B;AAAA;AAAA;AAAA;AAKjB;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAEA;AAAA;;AAAA;AAAA;AC1Ja;;AAAA;AAAA;AAAb;AAA0C;AAA3C;AD6JC;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAEA;AAAA;;AAAA;AAAA;AC/Ja;;AAAA;AAAA;AAAb;AAA0C;AAA3C;ADiKqB;;;AAKxB;;AAAA;;AAAA;AAEA;AAnBqB;;;;;AAqB7B;;;AAyBsB;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAd;AACsB;AAAA;;AAAA;AAAA;AAAA;;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAEZ;AAAA;AAAA;AAAA;AAAA;;;AAAV;AAKe;AAAA;AAAA;AAAA;AAAA;;;AAAA;ACvJnB;;AAAM;AAC8B;;;;AAAxB;AACZ;;AAAA;;AAAY;AAGH;AACI;AAAA;AACA;;AAAA;AAHN;;AAAA;AAAA;AAAA;AAAA;ADuJX;;;AACiC;;AAAd;;AAAA;AAAA;;AAAA;;AAAA;AAAqD;;AAAA;;AAAA;AAArD;AAAP;AAGwB;;AAAb;;AAAA;;AAAA;AAAJ;AAAP;AAIG;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAf;;;AACoC;;AAAA;;AAAA;AAAb;;AAAA;;AAAA;AAAJ;;;AACC;AAEmB;;AAAA;;AAAA;AACF;;AAAA;;;AAAA;;;;;;;;;AAHjB;;;AAAA;;;AAAA;AAOL;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAf;;;AACoC;;AAAA;;AAAA;AAAb;;AAAA;;AAAA;AAAJ;;;AACC;AAEmB;;AAAA;;AAAA;AACF;;AAAA;;;AAAA;;;;;;;;;AAHjB;;;AAAA;;;AAAA;AAOL;;AAAW;;AAAX;AAAf;;;AAEmB;;AAAA;;AAAA;;AAAA;;AAAnB;;;AAC2B;;AAAA;;AAAA;;AAAA;AAAJ;;;AACC;;;;;;;;;;;;;AAAA;;;AAAA;;;AAAA;AAkChB;;AAAA;;AAAA;AA3BQ;;AAAA;;AAAA;AACA;;AAAA;;AAAA;AADA;AAEC;;AAAA;;AAAA;AAFD;AADJ;AAQA;AACa;;AAAA;;AAAA;AACF;;AAAA;AAAA;;AAAA;;;AAAA;;;;;AAFX;;;AAAA;;;AAAA;AAMA;AACa;;AAAA;;AAAA;AACF;AAAA;;;AAAA;;;;;AAFX;;;AAAA;;;AAAA;AAMG;;AAAW;;AAAX;AAAf;;;AAEmB;;AAAA;AAAuB;;AAAvB;AAAnB;;;AACoB;;;;;;;;;AAAA;;;AAAA;;;AAAA;;;;AAOpB;;;AAmBe;;AAAc;;AAAd;AAAP;AACO;AAAA;AAAA;AAAA;AAAc;;AAAd;AAAP;AAEO;AAAA;AAAA;AAAA;AAAkB;;AAAlB;AAAP;AAGwB;;;AAExB;AAAa;;;AAAb;AAEA;;AAAmB;;AAAnB;AAK6B;AAAA;AAAA;AAAA;AAFtB;AAD8B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAC9B;AAAP;AAMR;;;AAsBe;;AAAc;;AAAd;AAAP;AACO;AAAA;AAAA;AAAA;AAAc;;AAAd;AAAP;AAEsB;AAAA;AAAA;AAAA;AAAf;;AAAA;AAAP;AAEO;AAAA;AAAA;AAAA;AAAiB;;AAAjB;AAAP;AAGwB;;;AAExB;AAAa;;;AAAb;AAEA;;AAAmB;;AAAnB;AAEA;AAER;;;AAwBe;;AAAc;;AAAd;AAAP;AACQ;AAAA;AAAA;AAAA;AAAa;;AAAb;AAAyC;;AAAzC;AAAR;AAEsB;AAAA;AAAA;AAAA;AAAf;;AAAA;AAAP;AAEW;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAX;AACR;;;AACkB;;AAAA;;AAAA;AAA6C;;AAAA;;AAAA;AAA7C;AAAN;AAEA;AACa;AAAA;AAAA;AAAA;;;;;AADb;;;AAAA;;;AAAA;AAgBJ;AACa;AAAA;AAAA;AAAA;AAEU;AAAA;AAAA;AAAA;;;AADZ;;;;;AAFX;;;AAAA;;;AAAA;AAOsB;AACT;;AAAA;AAFN;AAAP;AAAA;AAhBwB;;AAAd;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAEN;AAEmB;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;;;;;;;;;AAJnB;;;AAAA;;;AAAA;;;;AAmBZ;;;AA0Be;;AAAc;;AAAd;AAAP;AACO;AAAA;AAAA;AAAA;AAAc;;AAAd;AAAP;AAEO;;AAAA;;AAAA;AAAgC;AAAA;AAAA;AAAA;AAAhC;AAAP;AACO;AAAA;AAAA;AAAA;AAAiB;;AAAjB;AAAP;AAEO;;AAAgB;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAhB;AAAP;AACA;;AAA8B;;AAA9B;AAI6B;AAAA;AAAA;AAAA;AAFQ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAC9B;AAAP;AAQR;;;;;;;;;AAgBmB;AAAA;;AAAA;AAAA;AAAA;;AAAA;AACgC;AAAA;;AAAA;AAAA;AAAA;;;AAAZ;AAAA;AAAA;AAAjB;;;;;;AAGA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AACH;AAAP;;AAAO;;AAAO;;AAAP;AAAnB;;;AACuB;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;;AAAA;AAAX;AAAA;;;;;;AACZ;;;AAEmB;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAnB;;;AAC4C;AAAA;;AAAA;AAAA;AAAd;;AAAA;;AAAA;AAAA;;AAAA;AAGA;;AAAA;;;AAA4B;;AAAA;;;AAAA;AAAX;;AAAA;AAAjB;;;;;;;;;;;;;;AARX;;AAAA;AAAA;AAAA;;;;;;;;;;;AAOW;AAAV;;;;;AAGL;;AAAA;AAAA;;AAAA;AAAP;;AAAA;;;;;;;AAER;;;AAkBA;;AAAA;;;AACe;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAf;;;AACwC;AAAA;AAAA;AAAA;AAAjB;;AAAA;;AAAA;AAAJ;;;AACmC;AAAA;AAAA;AAAA;AAAlB;;AAAA;;AAAA;AACb;;AAAA;AAAvB;;;AACwB;AAEmB;AAAA;AAAA;AAAA;;;;;;;;;;;AAFnB;;;AAAA;;;AAAA;AAYhB;AANkB;AAAA;AAAA;AAAA;AAAX;AAAgC;;AAAhC;AAAf;;;AACgB;AACa;AAAA;AAAA;AAAA;;;;;;;AADb;;;AAAA;;;AAAA;AAKR",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "smart_contracts.delegator_contract.contract.DelegatorContract.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 4 1000"
    },
    "8": {
      "op": "bytecblock \"G\" \"state\" \"del_manager\" \"round_end\" 0x151f7c75 \"round_start\" 0x05 \"del_beneficiary\" \"round_ended\" \"round_claim_last\" \"fee_operational\" \"fee_operational_partner\" \"B\" \"cnt_breach_del\" 0x03 0x04 \"round_breach_last\" \"noticeboard_app_id\" \"validator_ad_app_id\" 0x00 \"round_expiry_soon_last\" 0x10 \"vote_key_dilution\" \"sel_key\" \"vote_key\" \"state_proof_key\" \"tc_sha256\""
    },
    "310": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "312": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "315": {
      "op": "bytec 17 // \"noticeboard_app_id\""
    },
    "317": {
      "op": "intc_0 // 0"
    },
    "318": {
      "op": "app_global_put"
    },
    "319": {
      "op": "bytec 18 // \"validator_ad_app_id\""
    },
    "321": {
      "op": "intc_0 // 0"
    },
    "322": {
      "op": "app_global_put"
    },
    "323": {
      "op": "pushint 96 // 96"
    },
    "325": {
      "op": "bzero"
    },
    "326": {
      "op": "bytec_0 // \"G\""
    },
    "327": {
      "op": "swap"
    },
    "328": {
      "op": "app_global_put"
    },
    "329": {
      "op": "bytec 10 // \"fee_operational\""
    },
    "331": {
      "op": "intc_0 // 0"
    },
    "332": {
      "op": "app_global_put"
    },
    "333": {
      "op": "bytec 11 // \"fee_operational_partner\""
    },
    "335": {
      "op": "intc_0 // 0"
    },
    "336": {
      "op": "app_global_put"
    },
    "337": {
      "op": "pushint 56 // 56"
    },
    "339": {
      "op": "bzero"
    },
    "340": {
      "op": "bytec 12 // \"B\""
    },
    "342": {
      "op": "swap"
    },
    "343": {
      "op": "app_global_put"
    },
    "344": {
      "op": "bytec_2 // \"del_manager\""
    },
    "345": {
      "op": "global ZeroAddress"
    },
    "347": {
      "op": "app_global_put"
    },
    "348": {
      "op": "bytec 7 // \"del_beneficiary\""
    },
    "350": {
      "op": "global ZeroAddress"
    },
    "352": {
      "op": "app_global_put"
    },
    "353": {
      "op": "bytec 5 // \"round_start\""
    },
    "355": {
      "op": "intc_0 // 0"
    },
    "356": {
      "op": "app_global_put"
    },
    "357": {
      "op": "bytec_3 // \"round_end\""
    },
    "358": {
      "op": "intc_0 // 0"
    },
    "359": {
      "op": "app_global_put"
    },
    "360": {
      "op": "bytec 8 // \"round_ended\""
    },
    "362": {
      "op": "intc_0 // 0"
    },
    "363": {
      "op": "app_global_put"
    },
    "364": {
      "op": "bytec 22 // \"vote_key_dilution\""
    },
    "366": {
      "op": "intc_0 // 0"
    },
    "367": {
      "op": "app_global_put"
    },
    "368": {
      "op": "pushint 32 // 32"
    },
    "370": {
      "op": "bzero"
    },
    "371": {
      "op": "bytec 23 // \"sel_key\""
    },
    "373": {
      "op": "dig 1"
    },
    "375": {
      "op": "app_global_put"
    },
    "376": {
      "op": "bytec 24 // \"vote_key\""
    },
    "378": {
      "op": "dig 1"
    },
    "380": {
      "op": "app_global_put"
    },
    "381": {
      "op": "pushint 64 // 64"
    },
    "383": {
      "op": "bzero"
    },
    "384": {
      "op": "bytec 25 // \"state_proof_key\""
    },
    "386": {
      "op": "swap"
    },
    "387": {
      "op": "app_global_put"
    },
    "388": {
      "op": "bytec_1 // \"state\""
    },
    "389": {
      "op": "bytec 19 // 0x00"
    },
    "391": {
      "op": "app_global_put"
    },
    "392": {
      "op": "bytec 26 // \"tc_sha256\""
    },
    "394": {
      "op": "swap"
    },
    "395": {
      "op": "app_global_put"
    },
    "396": {
      "op": "bytec 13 // \"cnt_breach_del\""
    },
    "398": {
      "op": "intc_0 // 0"
    },
    "399": {
      "op": "app_global_put"
    },
    "400": {
      "op": "bytec 16 // \"round_breach_last\""
    },
    "402": {
      "op": "intc_0 // 0"
    },
    "403": {
      "op": "app_global_put"
    },
    "404": {
      "op": "bytec 9 // \"round_claim_last\""
    },
    "406": {
      "op": "intc_0 // 0"
    },
    "407": {
      "op": "app_global_put"
    },
    "408": {
      "op": "bytec 20 // \"round_expiry_soon_last\""
    },
    "410": {
      "op": "intc_0 // 0"
    },
    "411": {
      "op": "app_global_put"
    },
    "412": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "414": {
      "op": "bz main_after_if_else@20",
      "stack_out": []
    },
    "417": {
      "op": "pushbytess 0xd1beccce 0x7d3db474 0xb47ef9eb 0xcaeb1a7b 0x261bd199 0xfe811ae7 0x1f3399a8 0xc1773ee0 0x9516245e 0x9044e21f 0x26f59a46 0xb88322bb 0xf53b95cd 0xf2e67934 0xeafa1e15 // method \"contract_create(address,address,uint64)uint64\", method \"contract_setup(byte[32],(uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64),(uint64,uint64,uint64,(uint64,uint64)[2]),uint64)void\", method \"contract_pay(txn)void\", method \"keys_confirm(address)void\", method \"keys_not_confirmed()(address,byte[100])\", method \"keys_not_submitted()(address,byte[100])\", method \"keys_submit((uint64,uint64,uint64,byte[32],byte[32],byte[64],address))((uint64,uint64,uint64),address,byte[100])\", method \"breach_limits()(bool,(uint64,uint64,uint64),address,byte[100])\", method \"breach_pay()(address,byte[100])\", method \"breach_suspended()((uint64,uint64,uint64),address,byte[100])\", method \"contract_claim()(uint64,uint64,uint64)\", method \"contract_expired()((uint64,uint64,uint64),address,byte[100])\", method \"contract_withdraw(address)(uint64,uint64,uint64)\", method \"contract_delete(address)(uint64,uint64)\", method \"contract_report_expiry_soon(uint64,uint64)(address,byte[100])\""
    },
    "494": {
      "op": "txna ApplicationArgs 0"
    },
    "497": {
      "op": "match main_contract_create_route@5 main_contract_setup_route@6 main_contract_pay_route@7 main_keys_confirm_route@8 main_keys_not_confirmed_route@9 main_keys_not_submitted_route@10 main_keys_submit_route@11 main_breach_limits_route@12 main_breach_pay_route@13 main_breach_suspended_route@14 main_contract_claim_route@15 main_contract_expired_route@16 main_contract_withdraw_route@17 main_contract_delete_route@18 main_contract_report_expiry_soon_route@19"
    },
    "529": {
      "block": "main_after_if_else@20",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "530": {
      "op": "return"
    },
    "531": {
      "block": "main_contract_report_expiry_soon_route@19",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%95#0"
      ],
      "stack_out": [
        "tmp%95#0"
      ]
    },
    "533": {
      "op": "!",
      "defined_out": [
        "tmp%96#0"
      ],
      "stack_out": [
        "tmp%96#0"
      ]
    },
    "534": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "535": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%97#0"
      ],
      "stack_out": [
        "tmp%97#0"
      ]
    },
    "537": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "538": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%99#0"
      ],
      "stack_out": [
        "tmp%99#0"
      ]
    },
    "541": {
      "op": "btoi",
      "defined_out": [
        "tmp%100#0"
      ],
      "stack_out": [
        "tmp%100#0"
      ]
    },
    "542": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%100#0",
        "tmp%101#0"
      ],
      "stack_out": [
        "tmp%100#0",
        "tmp%101#0"
      ]
    },
    "545": {
      "op": "btoi",
      "defined_out": [
        "tmp%100#0",
        "tmp%102#0"
      ],
      "stack_out": [
        "tmp%100#0",
        "tmp%102#0"
      ]
    },
    "546": {
      "callsub": "smart_contracts.delegator_contract.contract.DelegatorContract.contract_report_expiry_soon",
      "op": "callsub contract_report_expiry_soon",
      "defined_out": [
        "tmp%103#0"
      ],
      "stack_out": [
        "tmp%103#0"
      ]
    },
    "549": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%103#0"
      ],
      "stack_out": [
        "tmp%103#0",
        "0x151f7c75"
      ]
    },
    "551": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%103#0"
      ]
    },
    "552": {
      "op": "concat",
      "defined_out": [
        "tmp%104#0"
      ],
      "stack_out": [
        "tmp%104#0"
      ]
    },
    "553": {
      "op": "log",
      "stack_out": []
    },
    "554": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "555": {
      "op": "return"
    },
    "556": {
      "block": "main_contract_delete_route@18",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%88#0"
      ],
      "stack_out": [
        "tmp%88#0"
      ]
    },
    "558": {
      "op": "pushint 5 // DeleteApplication",
      "defined_out": [
        "DeleteApplication",
        "tmp%88#0"
      ],
      "stack_out": [
        "tmp%88#0",
        "DeleteApplication"
      ]
    },
    "560": {
      "op": "==",
      "defined_out": [
        "tmp%89#0"
      ],
      "stack_out": [
        "tmp%89#0"
      ]
    },
    "561": {
      "error": "OnCompletion is not DeleteApplication",
      "op": "assert // OnCompletion is not DeleteApplication",
      "stack_out": []
    },
    "562": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%90#0"
      ],
      "stack_out": [
        "tmp%90#0"
      ]
    },
    "564": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "565": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%92#0"
      ],
      "stack_out": [
        "tmp%92#0"
      ]
    },
    "568": {
      "callsub": "smart_contracts.delegator_contract.contract.DelegatorContract.contract_delete",
      "op": "callsub contract_delete",
      "defined_out": [
        "tmp%93#0"
      ],
      "stack_out": [
        "tmp%93#0"
      ]
    },
    "571": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%93#0"
      ],
      "stack_out": [
        "tmp%93#0",
        "0x151f7c75"
      ]
    },
    "573": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%93#0"
      ]
    },
    "574": {
      "op": "concat",
      "defined_out": [
        "tmp%94#0"
      ],
      "stack_out": [
        "tmp%94#0"
      ]
    },
    "575": {
      "op": "log",
      "stack_out": []
    },
    "576": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "577": {
      "op": "return"
    },
    "578": {
      "block": "main_contract_withdraw_route@17",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%81#0"
      ],
      "stack_out": [
        "tmp%81#0"
      ]
    },
    "580": {
      "op": "!",
      "defined_out": [
        "tmp%82#0"
      ],
      "stack_out": [
        "tmp%82#0"
      ]
    },
    "581": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "582": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%83#0"
      ],
      "stack_out": [
        "tmp%83#0"
      ]
    },
    "584": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "585": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%85#0"
      ],
      "stack_out": [
        "tmp%85#0"
      ]
    },
    "588": {
      "callsub": "smart_contracts.delegator_contract.contract.DelegatorContract.contract_withdraw",
      "op": "callsub contract_withdraw",
      "defined_out": [
        "tmp%86#0"
      ],
      "stack_out": [
        "tmp%86#0"
      ]
    },
    "591": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%86#0"
      ],
      "stack_out": [
        "tmp%86#0",
        "0x151f7c75"
      ]
    },
    "593": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%86#0"
      ]
    },
    "594": {
      "op": "concat",
      "defined_out": [
        "tmp%87#0"
      ],
      "stack_out": [
        "tmp%87#0"
      ]
    },
    "595": {
      "op": "log",
      "stack_out": []
    },
    "596": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "597": {
      "op": "return"
    },
    "598": {
      "block": "main_contract_expired_route@16",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%75#0"
      ]
    },
    "600": {
      "op": "!",
      "defined_out": [
        "tmp%76#0"
      ],
      "stack_out": [
        "tmp%76#0"
      ]
    },
    "601": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "602": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%77#0"
      ],
      "stack_out": [
        "tmp%77#0"
      ]
    },
    "604": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "605": {
      "callsub": "smart_contracts.delegator_contract.contract.DelegatorContract.contract_expired",
      "op": "callsub contract_expired",
      "defined_out": [
        "tmp%79#0"
      ],
      "stack_out": [
        "tmp%79#0"
      ]
    },
    "608": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%79#0"
      ],
      "stack_out": [
        "tmp%79#0",
        "0x151f7c75"
      ]
    },
    "610": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%79#0"
      ]
    },
    "611": {
      "op": "concat",
      "defined_out": [
        "tmp%80#0"
      ],
      "stack_out": [
        "tmp%80#0"
      ]
    },
    "612": {
      "op": "log",
      "stack_out": []
    },
    "613": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "614": {
      "op": "return"
    },
    "615": {
      "block": "main_contract_claim_route@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%69#0"
      ]
    },
    "617": {
      "op": "!",
      "defined_out": [
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%70#0"
      ]
    },
    "618": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "619": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%71#0"
      ],
      "stack_out": [
        "tmp%71#0"
      ]
    },
    "621": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "622": {
      "callsub": "smart_contracts.delegator_contract.contract.DelegatorContract.contract_claim",
      "op": "callsub contract_claim",
      "defined_out": [
        "tmp%73#0"
      ],
      "stack_out": [
        "tmp%73#0"
      ]
    },
    "625": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%73#0"
      ],
      "stack_out": [
        "tmp%73#0",
        "0x151f7c75"
      ]
    },
    "627": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%73#0"
      ]
    },
    "628": {
      "op": "concat",
      "defined_out": [
        "tmp%74#0"
      ],
      "stack_out": [
        "tmp%74#0"
      ]
    },
    "629": {
      "op": "log",
      "stack_out": []
    },
    "630": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "631": {
      "op": "return"
    },
    "632": {
      "block": "main_breach_suspended_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%63#0"
      ]
    },
    "634": {
      "op": "!",
      "defined_out": [
        "tmp%64#0"
      ],
      "stack_out": [
        "tmp%64#0"
      ]
    },
    "635": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "636": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%65#0"
      ],
      "stack_out": [
        "tmp%65#0"
      ]
    },
    "638": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "639": {
      "callsub": "smart_contracts.delegator_contract.contract.DelegatorContract.breach_suspended",
      "op": "callsub breach_suspended",
      "defined_out": [
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%67#0"
      ]
    },
    "642": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%67#0",
        "0x151f7c75"
      ]
    },
    "644": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%67#0"
      ]
    },
    "645": {
      "op": "concat",
      "defined_out": [
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%68#0"
      ]
    },
    "646": {
      "op": "log",
      "stack_out": []
    },
    "647": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "648": {
      "op": "return"
    },
    "649": {
      "block": "main_breach_pay_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0"
      ]
    },
    "651": {
      "op": "!",
      "defined_out": [
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0"
      ]
    },
    "652": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "653": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%59#0"
      ]
    },
    "655": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "656": {
      "callsub": "smart_contracts.delegator_contract.contract.DelegatorContract.breach_pay",
      "op": "callsub breach_pay",
      "defined_out": [
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0"
      ]
    },
    "659": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0",
        "0x151f7c75"
      ]
    },
    "661": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%61#0"
      ]
    },
    "662": {
      "op": "concat",
      "defined_out": [
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0"
      ]
    },
    "663": {
      "op": "log",
      "stack_out": []
    },
    "664": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "665": {
      "op": "return"
    },
    "666": {
      "block": "main_breach_limits_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "668": {
      "op": "!",
      "defined_out": [
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0"
      ]
    },
    "669": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "670": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0"
      ]
    },
    "672": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "673": {
      "callsub": "smart_contracts.delegator_contract.contract.DelegatorContract.breach_limits",
      "op": "callsub breach_limits",
      "defined_out": [
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0"
      ]
    },
    "676": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0",
        "0x151f7c75"
      ]
    },
    "678": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%55#0"
      ]
    },
    "679": {
      "op": "concat",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0"
      ]
    },
    "680": {
      "op": "log",
      "stack_out": []
    },
    "681": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "682": {
      "op": "return"
    },
    "683": {
      "block": "main_keys_submit_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "685": {
      "op": "!",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "686": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "687": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "689": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "690": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "693": {
      "callsub": "smart_contracts.delegator_contract.contract.DelegatorContract.keys_submit",
      "op": "callsub keys_submit",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "696": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0",
        "0x151f7c75"
      ]
    },
    "698": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%49#0"
      ]
    },
    "699": {
      "op": "concat",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "700": {
      "op": "log",
      "stack_out": []
    },
    "701": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "702": {
      "op": "return"
    },
    "703": {
      "block": "main_keys_not_submitted_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "705": {
      "op": "!",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "706": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "707": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "709": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "710": {
      "callsub": "smart_contracts.delegator_contract.contract.DelegatorContract.keys_not_submitted",
      "op": "callsub keys_not_submitted",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "713": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0",
        "0x151f7c75"
      ]
    },
    "715": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%42#0"
      ]
    },
    "716": {
      "op": "concat",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "717": {
      "op": "log",
      "stack_out": []
    },
    "718": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "719": {
      "op": "return"
    },
    "720": {
      "block": "main_keys_not_confirmed_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "722": {
      "op": "!",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "723": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "724": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "726": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "727": {
      "callsub": "smart_contracts.delegator_contract.contract.DelegatorContract.keys_not_confirmed",
      "op": "callsub keys_not_confirmed",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "730": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0",
        "0x151f7c75"
      ]
    },
    "732": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%36#0"
      ]
    },
    "733": {
      "op": "concat",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "734": {
      "op": "log",
      "stack_out": []
    },
    "735": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "736": {
      "op": "return"
    },
    "737": {
      "block": "main_keys_confirm_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "739": {
      "op": "!",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "740": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "741": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "743": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "744": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "747": {
      "callsub": "smart_contracts.delegator_contract.contract.DelegatorContract.keys_confirm",
      "op": "callsub keys_confirm",
      "stack_out": []
    },
    "750": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "751": {
      "op": "return"
    },
    "752": {
      "block": "main_contract_pay_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "754": {
      "op": "!",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "755": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "756": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "758": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "759": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "761": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "1"
      ]
    },
    "762": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "763": {
      "callsub": "smart_contracts.delegator_contract.contract.DelegatorContract.contract_pay",
      "op": "callsub contract_pay",
      "stack_out": []
    },
    "766": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "767": {
      "op": "return"
    },
    "768": {
      "block": "main_contract_setup_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "770": {
      "op": "!",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "771": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "772": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "774": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "775": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "778": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%17#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%18#0"
      ]
    },
    "781": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0"
      ]
    },
    "784": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0"
      ]
    },
    "787": {
      "op": "btoi",
      "defined_out": [
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%21#0"
      ]
    },
    "788": {
      "callsub": "smart_contracts.delegator_contract.contract.DelegatorContract.contract_setup",
      "op": "callsub contract_setup",
      "stack_out": []
    },
    "791": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "792": {
      "op": "return"
    },
    "793": {
      "block": "main_contract_create_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "795": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "796": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "797": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "799": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "800": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "801": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "804": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "807": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "810": {
      "op": "btoi",
      "defined_out": [
        "tmp%10#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "811": {
      "callsub": "smart_contracts.delegator_contract.contract.DelegatorContract.contract_create",
      "op": "callsub contract_create",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "814": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "0x151f7c75"
      ]
    },
    "816": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%11#0"
      ]
    },
    "817": {
      "op": "concat",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "818": {
      "op": "log",
      "stack_out": []
    },
    "819": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "820": {
      "op": "return"
    },
    "821": {
      "subroutine": "smart_contracts.delegator_contract.contract.DelegatorContract.contract_create",
      "params": {
        "del_manager#0": "bytes",
        "del_beneficiary#0": "bytes",
        "noticeboard_app_id#0": "uint64"
      },
      "block": "contract_create",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "824": {
      "op": "bytec 17 // \"noticeboard_app_id\"",
      "defined_out": [
        "\"noticeboard_app_id\""
      ],
      "stack_out": [
        "\"noticeboard_app_id\""
      ]
    },
    "826": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"noticeboard_app_id\"",
        "noticeboard_app_id#0 (copy)"
      ],
      "stack_out": [
        "\"noticeboard_app_id\"",
        "noticeboard_app_id#0 (copy)"
      ]
    },
    "828": {
      "op": "app_global_put",
      "stack_out": []
    },
    "829": {
      "op": "bytec 18 // \"validator_ad_app_id\""
    },
    "831": {
      "op": "global CallerApplicationID",
      "defined_out": [
        "\"validator_ad_app_id\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "\"validator_ad_app_id\"",
        "new_state_value%0#0"
      ]
    },
    "833": {
      "op": "app_global_put",
      "stack_out": []
    },
    "834": {
      "op": "bytec_2 // \"del_manager\"",
      "defined_out": [
        "\"del_manager\""
      ],
      "stack_out": [
        "\"del_manager\""
      ]
    },
    "835": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"del_manager\"",
        "del_manager#0 (copy)"
      ],
      "stack_out": [
        "\"del_manager\"",
        "del_manager#0 (copy)"
      ]
    },
    "837": {
      "op": "app_global_put",
      "stack_out": []
    },
    "838": {
      "op": "bytec 7 // \"del_beneficiary\"",
      "defined_out": [
        "\"del_beneficiary\""
      ],
      "stack_out": [
        "\"del_beneficiary\""
      ]
    },
    "840": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"del_beneficiary\"",
        "del_beneficiary#0 (copy)"
      ],
      "stack_out": [
        "\"del_beneficiary\"",
        "del_beneficiary#0 (copy)"
      ]
    },
    "842": {
      "op": "app_global_put",
      "stack_out": []
    },
    "843": {
      "op": "bytec_1 // \"state\"",
      "defined_out": [
        "\"state\""
      ],
      "stack_out": [
        "\"state\""
      ]
    },
    "844": {
      "op": "pushbytes 0x01",
      "defined_out": [
        "\"state\"",
        "0x01"
      ],
      "stack_out": [
        "\"state\"",
        "0x01"
      ]
    },
    "847": {
      "op": "app_global_put",
      "stack_out": []
    },
    "848": {
      "op": "global CurrentApplicationID",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "850": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "851": {
      "retsub": true,
      "op": "retsub"
    },
    "852": {
      "subroutine": "smart_contracts.delegator_contract.contract.DelegatorContract.contract_setup",
      "params": {
        "tc_sha256#0": "bytes",
        "delegation_terms_general#0": "bytes",
        "delegation_terms_balance#0": "bytes",
        "rounds_duration#0": "uint64"
      },
      "block": "contract_setup",
      "stack_in": [],
      "op": "proto 4 0"
    },
    "855": {
      "op": "txn Sender"
    },
    "857": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "859": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "860": {
      "error": "Can only be called by smart contract creator.",
      "op": "assert // Can only be called by smart contract creator.",
      "stack_out": []
    },
    "861": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "862": {
      "op": "bytec_1 // \"state\"",
      "defined_out": [
        "\"state\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"state\""
      ]
    },
    "863": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "864": {
      "error": "check self.state exists",
      "op": "assert // check self.state exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "865": {
      "op": "pushbytes 0x01",
      "defined_out": [
        "0x01",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0x01"
      ]
    },
    "868": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "869": {
      "error": "Cannot be called from other state than CREATED.",
      "op": "assert // Cannot be called from other state than CREATED.",
      "stack_out": []
    },
    "870": {
      "op": "bytec 26 // \"tc_sha256\"",
      "defined_out": [
        "\"tc_sha256\""
      ],
      "stack_out": [
        "\"tc_sha256\""
      ]
    },
    "872": {
      "op": "frame_dig -4",
      "defined_out": [
        "\"tc_sha256\"",
        "tc_sha256#0 (copy)"
      ],
      "stack_out": [
        "\"tc_sha256\"",
        "tc_sha256#0 (copy)"
      ]
    },
    "874": {
      "op": "app_global_put",
      "stack_out": []
    },
    "875": {
      "op": "bytec_0 // \"G\"",
      "defined_out": [
        "\"G\""
      ],
      "stack_out": [
        "\"G\""
      ]
    },
    "876": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"G\"",
        "delegation_terms_general#0 (copy)"
      ],
      "stack_out": [
        "\"G\"",
        "delegation_terms_general#0 (copy)"
      ]
    },
    "878": {
      "op": "app_global_put",
      "stack_out": []
    },
    "879": {
      "op": "bytec 12 // \"B\"",
      "defined_out": [
        "\"B\""
      ],
      "stack_out": [
        "\"B\""
      ]
    },
    "881": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"B\"",
        "delegation_terms_balance#0 (copy)"
      ],
      "stack_out": [
        "\"B\"",
        "delegation_terms_balance#0 (copy)"
      ]
    },
    "883": {
      "op": "app_global_put",
      "stack_out": []
    },
    "884": {
      "op": "bytec 5 // \"round_start\""
    },
    "886": {
      "op": "global Round",
      "defined_out": [
        "\"round_start\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "\"round_start\"",
        "new_state_value%0#0"
      ]
    },
    "888": {
      "op": "app_global_put",
      "stack_out": []
    },
    "889": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "890": {
      "op": "bytec 5 // \"round_start\"",
      "stack_out": [
        "0",
        "\"round_start\""
      ]
    },
    "892": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "893": {
      "error": "check self.round_start exists",
      "op": "assert // check self.round_start exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "894": {
      "op": "frame_dig -1",
      "defined_out": [
        "maybe_value%1#0",
        "rounds_duration#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "rounds_duration#0 (copy)"
      ]
    },
    "896": {
      "op": "+",
      "defined_out": [
        "new_state_value%1#0"
      ],
      "stack_out": [
        "new_state_value%1#0"
      ]
    },
    "897": {
      "op": "bytec_3 // \"round_end\"",
      "defined_out": [
        "\"round_end\"",
        "new_state_value%1#0"
      ],
      "stack_out": [
        "new_state_value%1#0",
        "\"round_end\""
      ]
    },
    "898": {
      "op": "swap",
      "stack_out": [
        "\"round_end\"",
        "new_state_value%1#0"
      ]
    },
    "899": {
      "op": "app_global_put",
      "stack_out": []
    },
    "900": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "901": {
      "op": "bytec 5 // \"round_start\"",
      "stack_out": [
        "0",
        "\"round_start\""
      ]
    },
    "903": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "904": {
      "error": "check self.round_start exists",
      "op": "assert // check self.round_start exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "905": {
      "op": "bytec 9 // \"round_claim_last\"",
      "defined_out": [
        "\"round_claim_last\"",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "\"round_claim_last\""
      ]
    },
    "907": {
      "op": "swap",
      "stack_out": [
        "\"round_claim_last\"",
        "maybe_value%2#0"
      ]
    },
    "908": {
      "op": "app_global_put",
      "stack_out": []
    },
    "909": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "910": {
      "op": "bytec_0 // \"G\"",
      "stack_out": [
        "0",
        "\"G\""
      ]
    },
    "911": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "912": {
      "error": "check self.delegation_terms_general exists",
      "op": "assert // check self.delegation_terms_general exists",
      "stack_out": [
        "maybe_value%3#0"
      ]
    },
    "913": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "916": {
      "op": "btoi",
      "defined_out": [
        "fee_round#0"
      ],
      "stack_out": [
        "fee_round#0"
      ]
    },
    "917": {
      "op": "intc_0 // 0",
      "stack_out": [
        "fee_round#0",
        "0"
      ]
    },
    "918": {
      "op": "bytec_3 // \"round_end\"",
      "stack_out": [
        "fee_round#0",
        "0",
        "\"round_end\""
      ]
    },
    "919": {
      "op": "app_global_get_ex",
      "defined_out": [
        "fee_round#0",
        "maybe_exists%4#0",
        "round_end#0"
      ],
      "stack_out": [
        "fee_round#0",
        "round_end#0",
        "maybe_exists%4#0"
      ]
    },
    "920": {
      "error": "check self.round_end exists",
      "op": "assert // check self.round_end exists",
      "stack_out": [
        "fee_round#0",
        "round_end#0"
      ]
    },
    "921": {
      "op": "intc_0 // 0",
      "stack_out": [
        "fee_round#0",
        "round_end#0",
        "0"
      ]
    },
    "922": {
      "op": "bytec 5 // \"round_start\"",
      "stack_out": [
        "fee_round#0",
        "round_end#0",
        "0",
        "\"round_start\""
      ]
    },
    "924": {
      "op": "app_global_get_ex",
      "defined_out": [
        "fee_round#0",
        "maybe_exists%5#0",
        "round_end#0",
        "round_start#0"
      ],
      "stack_out": [
        "fee_round#0",
        "round_end#0",
        "round_start#0",
        "maybe_exists%5#0"
      ]
    },
    "925": {
      "error": "check self.round_start exists",
      "op": "assert // check self.round_start exists",
      "stack_out": [
        "fee_round#0",
        "round_end#0",
        "round_start#0"
      ]
    },
    "926": {
      "op": "-",
      "defined_out": [
        "fee_round#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "fee_round#0",
        "tmp%0#1"
      ]
    },
    "927": {
      "op": "*",
      "defined_out": [
        "tmp%1#1"
      ],
      "stack_out": [
        "tmp%1#1"
      ]
    },
    "928": {
      "op": "intc_3 // 1000",
      "defined_out": [
        "1000",
        "tmp%1#1"
      ],
      "stack_out": [
        "tmp%1#1",
        "1000"
      ]
    },
    "929": {
      "op": "/",
      "defined_out": [
        "tmp%2#1"
      ],
      "stack_out": [
        "tmp%2#1"
      ]
    },
    "930": {
      "op": "bytec 10 // \"fee_operational\"",
      "defined_out": [
        "\"fee_operational\"",
        "tmp%2#1"
      ],
      "stack_out": [
        "tmp%2#1",
        "\"fee_operational\""
      ]
    },
    "932": {
      "op": "swap",
      "stack_out": [
        "\"fee_operational\"",
        "tmp%2#1"
      ]
    },
    "933": {
      "op": "app_global_put",
      "stack_out": []
    },
    "934": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "935": {
      "op": "bytec_0 // \"G\"",
      "stack_out": [
        "0",
        "\"G\""
      ]
    },
    "936": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%6#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "937": {
      "error": "check self.delegation_terms_general exists",
      "op": "assert // check self.delegation_terms_general exists",
      "stack_out": [
        "maybe_value%6#0"
      ]
    },
    "938": {
      "error": "Index access is out of bounds",
      "op": "extract 64 8 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "941": {
      "op": "btoi",
      "stack_out": [
        "fee_round#0"
      ]
    },
    "942": {
      "op": "intc_0 // 0",
      "stack_out": [
        "fee_round#0",
        "0"
      ]
    },
    "943": {
      "op": "bytec_3 // \"round_end\"",
      "stack_out": [
        "fee_round#0",
        "0",
        "\"round_end\""
      ]
    },
    "944": {
      "op": "app_global_get_ex",
      "defined_out": [
        "fee_round#0",
        "maybe_exists%7#0",
        "round_end#0"
      ],
      "stack_out": [
        "fee_round#0",
        "round_end#0",
        "maybe_exists%7#0"
      ]
    },
    "945": {
      "error": "check self.round_end exists",
      "op": "assert // check self.round_end exists",
      "stack_out": [
        "fee_round#0",
        "round_end#0"
      ]
    },
    "946": {
      "op": "intc_0 // 0",
      "stack_out": [
        "fee_round#0",
        "round_end#0",
        "0"
      ]
    },
    "947": {
      "op": "bytec 5 // \"round_start\"",
      "stack_out": [
        "fee_round#0",
        "round_end#0",
        "0",
        "\"round_start\""
      ]
    },
    "949": {
      "op": "app_global_get_ex",
      "defined_out": [
        "fee_round#0",
        "maybe_exists%8#0",
        "round_end#0",
        "round_start#0"
      ],
      "stack_out": [
        "fee_round#0",
        "round_end#0",
        "round_start#0",
        "maybe_exists%8#0"
      ]
    },
    "950": {
      "error": "check self.round_start exists",
      "op": "assert // check self.round_start exists",
      "stack_out": [
        "fee_round#0",
        "round_end#0",
        "round_start#0"
      ]
    },
    "951": {
      "op": "-",
      "stack_out": [
        "fee_round#0",
        "tmp%0#1"
      ]
    },
    "952": {
      "op": "*",
      "stack_out": [
        "tmp%1#1"
      ]
    },
    "953": {
      "op": "intc_3 // 1000",
      "stack_out": [
        "tmp%1#1",
        "1000"
      ]
    },
    "954": {
      "op": "/",
      "stack_out": [
        "tmp%2#1"
      ]
    },
    "955": {
      "op": "bytec 11 // \"fee_operational_partner\"",
      "defined_out": [
        "\"fee_operational_partner\"",
        "tmp%2#1"
      ],
      "stack_out": [
        "tmp%2#1",
        "\"fee_operational_partner\""
      ]
    },
    "957": {
      "op": "swap",
      "stack_out": [
        "\"fee_operational_partner\"",
        "tmp%2#1"
      ]
    },
    "958": {
      "op": "app_global_put",
      "stack_out": []
    },
    "959": {
      "op": "frame_dig -3",
      "stack_out": [
        "delegation_terms_general#0 (copy)"
      ]
    },
    "961": {
      "error": "Index access is out of bounds",
      "op": "extract 24 8 // on error: Index access is out of bounds",
      "defined_out": [
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "reinterpret_biguint%0#0"
      ]
    },
    "964": {
      "op": "dup",
      "defined_out": [
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "reinterpret_biguint%0#0",
        "reinterpret_biguint%0#0"
      ]
    },
    "965": {
      "op": "intc_0 // 0",
      "stack_out": [
        "reinterpret_biguint%0#0",
        "reinterpret_biguint%0#0",
        "0"
      ]
    },
    "966": {
      "op": "itob",
      "defined_out": [
        "reinterpret_biguint%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "reinterpret_biguint%0#0",
        "reinterpret_biguint%0#0",
        "tmp%8#0"
      ]
    },
    "967": {
      "op": "b!=",
      "defined_out": [
        "reinterpret_biguint%0#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "reinterpret_biguint%0#0",
        "tmp%9#0"
      ]
    },
    "968": {
      "op": "bz contract_setup_after_if_else@3",
      "stack_out": [
        "reinterpret_biguint%0#0"
      ]
    },
    "971": {
      "op": "itxn_begin"
    },
    "972": {
      "op": "frame_dig 0"
    },
    "974": {
      "op": "btoi"
    },
    "975": {
      "op": "global CurrentApplicationAddress"
    },
    "977": {
      "op": "intc_0 // 0"
    },
    "978": {
      "op": "itxn_field AssetAmount"
    },
    "980": {
      "op": "itxn_field AssetReceiver"
    },
    "982": {
      "op": "itxn_field XferAsset"
    },
    "984": {
      "op": "intc_2 // axfer"
    },
    "985": {
      "op": "itxn_field TypeEnum"
    },
    "987": {
      "op": "intc_0 // 0"
    },
    "988": {
      "op": "itxn_field Fee"
    },
    "990": {
      "op": "itxn_submit"
    },
    "991": {
      "block": "contract_setup_after_if_else@3",
      "stack_in": [
        "reinterpret_biguint%0#0"
      ],
      "op": "bytec_1 // \"state\"",
      "defined_out": [
        "\"state\""
      ],
      "stack_out": [
        "reinterpret_biguint%0#0",
        "\"state\""
      ]
    },
    "992": {
      "op": "pushbytes 0x02",
      "defined_out": [
        "\"state\"",
        "0x02"
      ],
      "stack_out": [
        "reinterpret_biguint%0#0",
        "\"state\"",
        "0x02"
      ]
    },
    "995": {
      "op": "app_global_put",
      "stack_out": [
        "reinterpret_biguint%0#0"
      ]
    },
    "996": {
      "retsub": true,
      "op": "retsub"
    },
    "997": {
      "subroutine": "smart_contracts.delegator_contract.contract.DelegatorContract.contract_pay",
      "params": {
        "txn#0": "uint64"
      },
      "block": "contract_pay",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1000": {
      "op": "txn Sender"
    },
    "1002": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1004": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1005": {
      "error": "Can only be called by smart contract creator.",
      "op": "assert // Can only be called by smart contract creator.",
      "stack_out": []
    },
    "1006": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1007": {
      "op": "bytec_1 // \"state\"",
      "defined_out": [
        "\"state\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"state\""
      ]
    },
    "1008": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1009": {
      "error": "check self.state exists",
      "op": "assert // check self.state exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1010": {
      "op": "pushbytes 0x02",
      "defined_out": [
        "0x02",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0x02"
      ]
    },
    "1013": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1014": {
      "error": "Cannot be called from other state than SET.",
      "op": "assert // Cannot be called from other state than SET.",
      "stack_out": []
    },
    "1015": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1016": {
      "op": "bytec_0 // \"G\"",
      "defined_out": [
        "\"G\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"G\""
      ]
    },
    "1017": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1018": {
      "error": "check self.delegation_terms_general exists",
      "op": "assert // check self.delegation_terms_general exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "1019": {
      "error": "Index access is out of bounds",
      "op": "extract 16 8 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1022": {
      "op": "btoi",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1023": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%5#0",
        "0"
      ]
    },
    "1024": {
      "op": "bytec 10 // \"fee_operational\"",
      "defined_out": [
        "\"fee_operational\"",
        "0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "0",
        "\"fee_operational\""
      ]
    },
    "1026": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1027": {
      "error": "check self.fee_operational exists",
      "op": "assert // check self.fee_operational exists",
      "stack_out": [
        "tmp%5#0",
        "maybe_value%2#0"
      ]
    },
    "1028": {
      "op": "+",
      "defined_out": [
        "base_fee#0"
      ],
      "stack_out": [
        "base_fee#0"
      ]
    },
    "1029": {
      "op": "intc_0 // 0",
      "stack_out": [
        "base_fee#0",
        "0"
      ]
    },
    "1030": {
      "op": "bytec_0 // \"G\"",
      "stack_out": [
        "base_fee#0",
        "0",
        "\"G\""
      ]
    },
    "1031": {
      "op": "app_global_get_ex",
      "defined_out": [
        "base_fee#0",
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "base_fee#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1032": {
      "error": "check self.delegation_terms_general exists",
      "op": "assert // check self.delegation_terms_general exists",
      "stack_out": [
        "base_fee#0",
        "maybe_value%3#0"
      ]
    },
    "1033": {
      "error": "Index access is out of bounds",
      "op": "extract 72 8 // on error: Index access is out of bounds",
      "defined_out": [
        "base_fee#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "base_fee#0",
        "tmp%6#0"
      ]
    },
    "1036": {
      "op": "btoi",
      "defined_out": [
        "base_fee#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "base_fee#0",
        "tmp%7#0"
      ]
    },
    "1037": {
      "op": "intc_0 // 0",
      "stack_out": [
        "base_fee#0",
        "tmp%7#0",
        "0"
      ]
    },
    "1038": {
      "op": "bytec 11 // \"fee_operational_partner\"",
      "defined_out": [
        "\"fee_operational_partner\"",
        "0",
        "base_fee#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "base_fee#0",
        "tmp%7#0",
        "0",
        "\"fee_operational_partner\""
      ]
    },
    "1040": {
      "op": "app_global_get_ex",
      "defined_out": [
        "base_fee#0",
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "base_fee#0",
        "tmp%7#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "1041": {
      "error": "check self.fee_operational_partner exists",
      "op": "assert // check self.fee_operational_partner exists",
      "stack_out": [
        "base_fee#0",
        "tmp%7#0",
        "maybe_value%4#0"
      ]
    },
    "1042": {
      "op": "+",
      "defined_out": [
        "base_fee#0",
        "partner_fee#0"
      ],
      "stack_out": [
        "base_fee#0",
        "partner_fee#0"
      ]
    },
    "1043": {
      "op": "+",
      "defined_out": [
        "amt_expected#0"
      ],
      "stack_out": [
        "amt_expected#0"
      ]
    },
    "1044": {
      "op": "frame_dig -1",
      "defined_out": [
        "amt_expected#0",
        "txn#0 (copy)"
      ],
      "stack_out": [
        "amt_expected#0",
        "txn#0 (copy)"
      ]
    },
    "1046": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "amt_expected#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "amt_expected#0",
        "tmp%8#0"
      ]
    },
    "1048": {
      "op": "dup",
      "stack_out": [
        "amt_expected#0",
        "tmp%8#0",
        "tmp%8#0"
      ]
    },
    "1049": {
      "op": "cover 2",
      "defined_out": [
        "amt_expected#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "amt_expected#0",
        "tmp%8#0"
      ]
    },
    "1051": {
      "op": "intc_1 // pay",
      "defined_out": [
        "amt_expected#0",
        "pay",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "amt_expected#0",
        "tmp%8#0",
        "pay"
      ]
    },
    "1052": {
      "op": "==",
      "defined_out": [
        "amt_expected#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "amt_expected#0",
        "tmp%9#0"
      ]
    },
    "1053": {
      "op": "bz contract_pay_else_body@2",
      "stack_out": [
        "tmp%8#0",
        "amt_expected#0"
      ]
    },
    "1056": {
      "op": "frame_dig -1"
    },
    "1058": {
      "op": "gtxns Receiver"
    },
    "1060": {
      "op": "global CurrentApplicationAddress"
    },
    "1062": {
      "op": "=="
    },
    "1063": {
      "error": "Transaction must be to this contract.",
      "op": "assert // Transaction must be to this contract."
    },
    "1064": {
      "op": "intc_0 // 0"
    },
    "1065": {
      "op": "bytec_0 // \"G\""
    },
    "1066": {
      "op": "app_global_get_ex"
    },
    "1067": {
      "error": "check self.delegation_terms_general exists",
      "op": "assert // check self.delegation_terms_general exists"
    },
    "1068": {
      "error": "Index access is out of bounds",
      "op": "extract 24 8 // on error: Index access is out of bounds"
    },
    "1071": {
      "op": "intc_0 // 0"
    },
    "1072": {
      "op": "itob"
    },
    "1073": {
      "op": "b=="
    },
    "1074": {
      "error": "Sent asset doesn't match the agreed one.",
      "op": "assert // Sent asset doesn't match the agreed one."
    },
    "1075": {
      "op": "frame_dig -1"
    },
    "1077": {
      "op": "gtxns Amount"
    },
    "1079": {
      "op": "=="
    },
    "1080": {
      "error": "Sent amount doesn't match the agreed one.",
      "op": "assert // Sent amount doesn't match the agreed one."
    },
    "1081": {
      "block": "contract_pay_after_if_else@6",
      "stack_in": [
        "tmp%8#0"
      ],
      "callsub": "smart_contracts.delegator_contract.contract.DelegatorContract._is_eligible",
      "op": "callsub _is_eligible",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%27#0"
      ]
    },
    "1084": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%27#0",
        "0"
      ]
    },
    "1085": {
      "op": "getbit",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%28#0"
      ]
    },
    "1086": {
      "error": "Delegator beneficiary is not eligible according to the agreed limits.",
      "op": "assert // Delegator beneficiary is not eligible according to the agreed limits.",
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "1087": {
      "op": "bytec_1 // \"state\"",
      "defined_out": [
        "\"state\""
      ],
      "stack_out": [
        "tmp%8#0",
        "\"state\""
      ]
    },
    "1088": {
      "op": "bytec 14 // 0x03",
      "defined_out": [
        "\"state\"",
        "0x03"
      ],
      "stack_out": [
        "tmp%8#0",
        "\"state\"",
        "0x03"
      ]
    },
    "1090": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "1091": {
      "retsub": true,
      "op": "retsub"
    },
    "1092": {
      "block": "contract_pay_else_body@2",
      "stack_in": [
        "tmp%8#0",
        "amt_expected#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "amt_expected#0",
        "tmp%8#0"
      ]
    },
    "1094": {
      "op": "intc_2 // axfer",
      "defined_out": [
        "axfer",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "amt_expected#0",
        "tmp%8#0",
        "axfer"
      ]
    },
    "1095": {
      "op": "==",
      "defined_out": [
        "tmp%18#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "amt_expected#0",
        "tmp%18#0"
      ]
    },
    "1096": {
      "error": "Transaction type must be either Payment or AssetTransfer.",
      "op": "assert // Transaction type must be either Payment or AssetTransfer.",
      "stack_out": [
        "tmp%8#0",
        "amt_expected#0"
      ]
    },
    "1097": {
      "op": "frame_dig -1",
      "defined_out": [
        "tmp%8#0",
        "txn#0 (copy)"
      ],
      "stack_out": [
        "tmp%8#0",
        "amt_expected#0",
        "txn#0 (copy)"
      ]
    },
    "1099": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "tmp%19#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "amt_expected#0",
        "tmp%19#0"
      ]
    },
    "1101": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%19#0",
        "tmp%20#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "amt_expected#0",
        "tmp%19#0",
        "tmp%20#0"
      ]
    },
    "1103": {
      "op": "==",
      "defined_out": [
        "tmp%21#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "amt_expected#0",
        "tmp%21#0"
      ]
    },
    "1104": {
      "error": "Transaction must be to this contract.",
      "op": "assert // Transaction must be to this contract.",
      "stack_out": [
        "tmp%8#0",
        "amt_expected#0"
      ]
    },
    "1105": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "amt_expected#0",
        "0"
      ]
    },
    "1106": {
      "op": "bytec_0 // \"G\"",
      "defined_out": [
        "\"G\"",
        "0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "amt_expected#0",
        "0",
        "\"G\""
      ]
    },
    "1107": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%6#0",
        "maybe_value%6#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "amt_expected#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "1108": {
      "error": "check self.delegation_terms_general exists",
      "op": "assert // check self.delegation_terms_general exists",
      "stack_out": [
        "tmp%8#0",
        "amt_expected#0",
        "maybe_value%6#0"
      ]
    },
    "1109": {
      "error": "Index access is out of bounds",
      "op": "extract 24 8 // on error: Index access is out of bounds",
      "defined_out": [
        "reinterpret_biguint%1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "amt_expected#0",
        "reinterpret_biguint%1#0"
      ]
    },
    "1112": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%8#0",
        "amt_expected#0",
        "reinterpret_biguint%1#0",
        "txn#0 (copy)"
      ]
    },
    "1114": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "reinterpret_biguint%1#0",
        "tmp%22#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "amt_expected#0",
        "reinterpret_biguint%1#0",
        "tmp%22#0"
      ]
    },
    "1116": {
      "op": "itob",
      "defined_out": [
        "reinterpret_biguint%1#0",
        "tmp%23#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "amt_expected#0",
        "reinterpret_biguint%1#0",
        "tmp%23#0"
      ]
    },
    "1117": {
      "op": "b==",
      "defined_out": [
        "tmp%24#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "amt_expected#0",
        "tmp%24#0"
      ]
    },
    "1118": {
      "error": "Sent asset doesn't match the agreed one.",
      "op": "assert // Sent asset doesn't match the agreed one.",
      "stack_out": [
        "tmp%8#0",
        "amt_expected#0"
      ]
    },
    "1119": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%8#0",
        "amt_expected#0",
        "txn#0 (copy)"
      ]
    },
    "1121": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "tmp%25#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "amt_expected#0",
        "tmp%25#0"
      ]
    },
    "1123": {
      "op": "==",
      "defined_out": [
        "tmp%26#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%26#0"
      ]
    },
    "1124": {
      "error": "Sent amount doesn't match the agreed one.",
      "op": "assert // Sent amount doesn't match the agreed one.",
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "1125": {
      "op": "b contract_pay_after_if_else@6"
    },
    "1128": {
      "subroutine": "smart_contracts.delegator_contract.contract.DelegatorContract.keys_confirm",
      "params": {
        "del_manager#0": "bytes"
      },
      "block": "keys_confirm",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1131": {
      "op": "txn Sender"
    },
    "1133": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1135": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1136": {
      "error": "Can only be called by smart contract creator.",
      "op": "assert // Can only be called by smart contract creator.",
      "stack_out": []
    },
    "1137": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1138": {
      "op": "bytec_1 // \"state\"",
      "defined_out": [
        "\"state\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"state\""
      ]
    },
    "1139": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1140": {
      "error": "check self.state exists",
      "op": "assert // check self.state exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1141": {
      "op": "bytec 15 // 0x04",
      "defined_out": [
        "0x04",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0x04"
      ]
    },
    "1143": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1144": {
      "error": "Cannot be called from other state than SUBMITTED.",
      "op": "assert // Cannot be called from other state than SUBMITTED.",
      "stack_out": []
    },
    "1145": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1146": {
      "op": "bytec_2 // \"del_manager\"",
      "defined_out": [
        "\"del_manager\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"del_manager\""
      ]
    },
    "1147": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1148": {
      "error": "check self.del_manager exists",
      "op": "assert // check self.del_manager exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "1149": {
      "op": "frame_dig -1",
      "defined_out": [
        "del_manager#0 (copy)",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "del_manager#0 (copy)"
      ]
    },
    "1151": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1152": {
      "error": "Can only be approved by delegator manager.",
      "op": "assert // Can only be approved by delegator manager.",
      "stack_out": []
    },
    "1153": {
      "op": "global Round",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1155": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%5#0",
        "0"
      ]
    },
    "1156": {
      "op": "bytec 5 // \"round_start\"",
      "defined_out": [
        "\"round_start\"",
        "0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "0",
        "\"round_start\""
      ]
    },
    "1158": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1159": {
      "error": "check self.round_start exists",
      "op": "assert // check self.round_start exists",
      "stack_out": [
        "tmp%5#0",
        "maybe_value%2#0"
      ]
    },
    "1160": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%5#0",
        "maybe_value%2#0",
        "0"
      ]
    },
    "1161": {
      "op": "bytec_0 // \"G\"",
      "defined_out": [
        "\"G\"",
        "0",
        "maybe_value%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "maybe_value%2#0",
        "0",
        "\"G\""
      ]
    },
    "1162": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1163": {
      "error": "check self.delegation_terms_general exists",
      "op": "assert // check self.delegation_terms_general exists",
      "stack_out": [
        "tmp%5#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ]
    },
    "1164": {
      "error": "Index access is out of bounds",
      "op": "extract 80 8 // on error: Index access is out of bounds",
      "defined_out": [
        "maybe_value%2#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "maybe_value%2#0",
        "tmp%6#0"
      ]
    },
    "1167": {
      "op": "btoi",
      "defined_out": [
        "maybe_value%2#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "maybe_value%2#0",
        "tmp%7#0"
      ]
    },
    "1168": {
      "op": "+",
      "defined_out": [
        "tmp%5#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "tmp%8#0"
      ]
    },
    "1169": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%5#0",
        "tmp%8#0",
        "0"
      ]
    },
    "1170": {
      "op": "bytec_0 // \"G\"",
      "stack_out": [
        "tmp%5#0",
        "tmp%8#0",
        "0",
        "\"G\""
      ]
    },
    "1171": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "tmp%5#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "tmp%8#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "1172": {
      "error": "check self.delegation_terms_general exists",
      "op": "assert // check self.delegation_terms_general exists",
      "stack_out": [
        "tmp%5#0",
        "tmp%8#0",
        "maybe_value%4#0"
      ]
    },
    "1173": {
      "error": "Index access is out of bounds",
      "op": "extract 88 8 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%5#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "1176": {
      "op": "btoi",
      "defined_out": [
        "tmp%10#0",
        "tmp%5#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "1177": {
      "op": "+",
      "defined_out": [
        "tmp%11#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "tmp%11#0"
      ]
    },
    "1178": {
      "op": "<=",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "1179": {
      "error": "Key confirmation was done too late.",
      "op": "assert // Key confirmation was done too late.",
      "stack_out": []
    },
    "1180": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1181": {
      "op": "bytec 7 // \"del_beneficiary\"",
      "defined_out": [
        "\"del_beneficiary\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"del_beneficiary\""
      ]
    },
    "1183": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "1184": {
      "error": "check self.del_beneficiary exists",
      "op": "assert // check self.del_beneficiary exists",
      "stack_out": [
        "maybe_value%5#0"
      ]
    },
    "1185": {
      "op": "acct_params_get AcctIncentiveEligible",
      "defined_out": [
        "acct_incentive_eligible_raw.0#0",
        "acct_incentive_eligible_raw.1#0"
      ],
      "stack_out": [
        "acct_incentive_eligible_raw.0#0",
        "acct_incentive_eligible_raw.1#0"
      ]
    },
    "1187": {
      "op": "pop",
      "stack_out": [
        "acct_incentive_eligible_raw.0#0"
      ]
    },
    "1188": {
      "error": "Must opt-in to consensus suspension tracking.",
      "op": "assert // Must opt-in to consensus suspension tracking.",
      "stack_out": []
    },
    "1189": {
      "op": "bytec 16 // \"round_breach_last\""
    },
    "1191": {
      "op": "global Round",
      "defined_out": [
        "\"round_breach_last\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "\"round_breach_last\"",
        "new_state_value%0#0"
      ]
    },
    "1193": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1194": {
      "op": "bytec 13 // \"cnt_breach_del\"",
      "defined_out": [
        "\"cnt_breach_del\""
      ],
      "stack_out": [
        "\"cnt_breach_del\""
      ]
    },
    "1196": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"cnt_breach_del\"",
        "0"
      ]
    },
    "1197": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1198": {
      "op": "bytec_1 // \"state\"",
      "stack_out": [
        "\"state\""
      ]
    },
    "1199": {
      "op": "bytec 6 // 0x05",
      "defined_out": [
        "\"state\"",
        "0x05"
      ],
      "stack_out": [
        "\"state\"",
        "0x05"
      ]
    },
    "1201": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1202": {
      "retsub": true,
      "op": "retsub"
    },
    "1203": {
      "subroutine": "smart_contracts.delegator_contract.contract.DelegatorContract.keys_not_confirmed",
      "params": {},
      "block": "keys_not_confirmed",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "1206": {
      "op": "txn Sender"
    },
    "1208": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1210": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1211": {
      "error": "Can only be called by smart contract creator.",
      "op": "assert // Can only be called by smart contract creator.",
      "stack_out": []
    },
    "1212": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1213": {
      "op": "bytec_1 // \"state\"",
      "defined_out": [
        "\"state\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"state\""
      ]
    },
    "1214": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1215": {
      "error": "check self.state exists",
      "op": "assert // check self.state exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1216": {
      "op": "bytec 15 // 0x04",
      "defined_out": [
        "0x04",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0x04"
      ]
    },
    "1218": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1219": {
      "error": "Cannot be called from other state than SUBMITTED.",
      "op": "assert // Cannot be called from other state than SUBMITTED.",
      "stack_out": []
    },
    "1220": {
      "op": "global Round",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1222": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%4#0",
        "0"
      ]
    },
    "1223": {
      "op": "bytec 5 // \"round_start\"",
      "defined_out": [
        "\"round_start\"",
        "0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "\"round_start\""
      ]
    },
    "1225": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1226": {
      "error": "check self.round_start exists",
      "op": "assert // check self.round_start exists",
      "stack_out": [
        "tmp%4#0",
        "maybe_value%1#0"
      ]
    },
    "1227": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%4#0",
        "maybe_value%1#0",
        "0"
      ]
    },
    "1228": {
      "op": "bytec_0 // \"G\"",
      "defined_out": [
        "\"G\"",
        "0",
        "maybe_value%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "maybe_value%1#0",
        "0",
        "\"G\""
      ]
    },
    "1229": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1230": {
      "error": "check self.delegation_terms_general exists",
      "op": "assert // check self.delegation_terms_general exists",
      "stack_out": [
        "tmp%4#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ]
    },
    "1231": {
      "error": "Index access is out of bounds",
      "op": "extract 80 8 // on error: Index access is out of bounds",
      "defined_out": [
        "maybe_value%1#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "maybe_value%1#0",
        "tmp%5#0"
      ]
    },
    "1234": {
      "op": "btoi",
      "defined_out": [
        "maybe_value%1#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "maybe_value%1#0",
        "tmp%6#0"
      ]
    },
    "1235": {
      "op": "+",
      "defined_out": [
        "tmp%4#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%7#0"
      ]
    },
    "1236": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%4#0",
        "tmp%7#0",
        "0"
      ]
    },
    "1237": {
      "op": "bytec_0 // \"G\"",
      "stack_out": [
        "tmp%4#0",
        "tmp%7#0",
        "0",
        "\"G\""
      ]
    },
    "1238": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%4#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%7#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1239": {
      "error": "check self.delegation_terms_general exists",
      "op": "assert // check self.delegation_terms_general exists",
      "stack_out": [
        "tmp%4#0",
        "tmp%7#0",
        "maybe_value%3#0"
      ]
    },
    "1240": {
      "error": "Index access is out of bounds",
      "op": "extract 88 8 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%4#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "1243": {
      "op": "btoi",
      "defined_out": [
        "tmp%4#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%7#0",
        "tmp%9#0"
      ]
    },
    "1244": {
      "op": "+",
      "defined_out": [
        "tmp%10#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%10#0"
      ]
    },
    "1245": {
      "op": ">",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "1246": {
      "error": "Report keys as not confirmed can be done only after enough rounds have passed.",
      "op": "assert // Report keys as not confirmed can be done only after enough rounds have passed.",
      "stack_out": []
    },
    "1247": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1248": {
      "op": "bytec_0 // \"G\"",
      "stack_out": [
        "0",
        "\"G\""
      ]
    },
    "1249": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "1250": {
      "error": "check self.delegation_terms_general exists",
      "op": "assert // check self.delegation_terms_general exists",
      "stack_out": [
        "maybe_value%4#0"
      ]
    },
    "1251": {
      "error": "Index access is out of bounds",
      "op": "extract 24 8 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "1254": {
      "op": "btoi",
      "defined_out": [
        "fee_asset#0"
      ],
      "stack_out": [
        "fee_asset#0"
      ]
    },
    "1255": {
      "op": "intc_0 // 0",
      "stack_out": [
        "fee_asset#0",
        "0"
      ]
    },
    "1256": {
      "op": "bytec 10 // \"fee_operational\"",
      "defined_out": [
        "\"fee_operational\"",
        "0",
        "fee_asset#0"
      ],
      "stack_out": [
        "fee_asset#0",
        "0",
        "\"fee_operational\""
      ]
    },
    "1258": {
      "op": "app_global_get_ex",
      "defined_out": [
        "fee_asset#0",
        "maybe_exists%5#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "fee_asset#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "1259": {
      "error": "check self.fee_operational exists",
      "op": "assert // check self.fee_operational exists",
      "stack_out": [
        "fee_asset#0",
        "maybe_value%5#0"
      ]
    },
    "1260": {
      "op": "intc_0 // 0",
      "stack_out": [
        "fee_asset#0",
        "maybe_value%5#0",
        "0"
      ]
    },
    "1261": {
      "op": "bytec 11 // \"fee_operational_partner\"",
      "defined_out": [
        "\"fee_operational_partner\"",
        "0",
        "fee_asset#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "fee_asset#0",
        "maybe_value%5#0",
        "0",
        "\"fee_operational_partner\""
      ]
    },
    "1263": {
      "op": "app_global_get_ex",
      "defined_out": [
        "fee_asset#0",
        "maybe_exists%6#0",
        "maybe_value%5#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "fee_asset#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "1264": {
      "error": "check self.fee_operational_partner exists",
      "op": "assert // check self.fee_operational_partner exists",
      "stack_out": [
        "fee_asset#0",
        "maybe_value%5#0",
        "maybe_value%6#0"
      ]
    },
    "1265": {
      "op": "+",
      "defined_out": [
        "amt_return#0",
        "fee_asset#0"
      ],
      "stack_out": [
        "fee_asset#0",
        "amt_return#0"
      ]
    },
    "1266": {
      "callsub": "smart_contracts.delegator_contract.contract.DelegatorContract._try_return_fee",
      "op": "callsub _try_return_fee",
      "stack_out": []
    },
    "1269": {
      "op": "bytec_1 // \"state\"",
      "stack_out": [
        "\"state\""
      ]
    },
    "1270": {
      "op": "pushbytes 0x11",
      "defined_out": [
        "\"state\"",
        "0x11"
      ],
      "stack_out": [
        "\"state\"",
        "0x11"
      ]
    },
    "1273": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1274": {
      "op": "bytec 8 // \"round_ended\""
    },
    "1276": {
      "op": "global Round",
      "defined_out": [
        "\"round_ended\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "\"round_ended\"",
        "new_state_value%0#0"
      ]
    },
    "1278": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1279": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1280": {
      "op": "bytec_2 // \"del_manager\"",
      "defined_out": [
        "\"del_manager\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"del_manager\""
      ]
    },
    "1281": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%7#0",
        "maybe_value%7#0"
      ],
      "stack_out": [
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "1282": {
      "error": "check self.del_manager exists",
      "op": "assert // check self.del_manager exists",
      "stack_out": [
        "maybe_value%7#0"
      ]
    },
    "1283": {
      "op": "pushbytes 0x4d6573736167652066726f6d2056616c61723a20596f752068617665206e6f7420636f6e6669726d656420746865206e6f646520746861742077617320707265706172656420666f7220796f752e20202020202020202020202020202020202020202020",
      "defined_out": [
        "0x4d6573736167652066726f6d2056616c61723a20596f752068617665206e6f7420636f6e6669726d656420746865206e6f646520746861742077617320707265706172656420666f7220796f752e20202020202020202020202020202020202020202020",
        "maybe_value%7#0"
      ],
      "stack_out": [
        "maybe_value%7#0",
        "0x4d6573736167652066726f6d2056616c61723a20596f752068617665206e6f7420636f6e6669726d656420746865206e6f646520746861742077617320707265706172656420666f7220796f752e20202020202020202020202020202020202020202020"
      ]
    },
    "1385": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1386": {
      "retsub": true,
      "op": "retsub"
    },
    "1387": {
      "subroutine": "smart_contracts.delegator_contract.contract.DelegatorContract.keys_not_submitted",
      "params": {},
      "block": "keys_not_submitted",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "1390": {
      "op": "txn Sender"
    },
    "1392": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1394": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1395": {
      "error": "Can only be called by smart contract creator.",
      "op": "assert // Can only be called by smart contract creator.",
      "stack_out": []
    },
    "1396": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1397": {
      "op": "bytec_1 // \"state\"",
      "defined_out": [
        "\"state\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"state\""
      ]
    },
    "1398": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1399": {
      "error": "check self.state exists",
      "op": "assert // check self.state exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1400": {
      "op": "bytec 14 // 0x03",
      "defined_out": [
        "0x03",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0x03"
      ]
    },
    "1402": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1403": {
      "error": "Cannot be called from other state than READY.",
      "op": "assert // Cannot be called from other state than READY.",
      "stack_out": []
    },
    "1404": {
      "op": "global Round",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1406": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%4#0",
        "0"
      ]
    },
    "1407": {
      "op": "bytec 5 // \"round_start\"",
      "defined_out": [
        "\"round_start\"",
        "0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "\"round_start\""
      ]
    },
    "1409": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1410": {
      "error": "check self.round_start exists",
      "op": "assert // check self.round_start exists",
      "stack_out": [
        "tmp%4#0",
        "maybe_value%1#0"
      ]
    },
    "1411": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%4#0",
        "maybe_value%1#0",
        "0"
      ]
    },
    "1412": {
      "op": "bytec_0 // \"G\"",
      "defined_out": [
        "\"G\"",
        "0",
        "maybe_value%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "maybe_value%1#0",
        "0",
        "\"G\""
      ]
    },
    "1413": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1414": {
      "error": "check self.delegation_terms_general exists",
      "op": "assert // check self.delegation_terms_general exists",
      "stack_out": [
        "tmp%4#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ]
    },
    "1415": {
      "error": "Index access is out of bounds",
      "op": "extract 80 8 // on error: Index access is out of bounds",
      "defined_out": [
        "maybe_value%1#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "maybe_value%1#0",
        "tmp%5#0"
      ]
    },
    "1418": {
      "op": "btoi",
      "defined_out": [
        "maybe_value%1#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "maybe_value%1#0",
        "tmp%6#0"
      ]
    },
    "1419": {
      "op": "+",
      "defined_out": [
        "tmp%4#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%7#0"
      ]
    },
    "1420": {
      "op": ">",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "1421": {
      "error": "Report keys as not submitted can be done only after enough rounds have passed.",
      "op": "assert // Report keys as not submitted can be done only after enough rounds have passed.",
      "stack_out": []
    },
    "1422": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1423": {
      "op": "bytec_0 // \"G\"",
      "stack_out": [
        "0",
        "\"G\""
      ]
    },
    "1424": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1425": {
      "error": "check self.delegation_terms_general exists",
      "op": "assert // check self.delegation_terms_general exists",
      "stack_out": [
        "maybe_value%3#0"
      ]
    },
    "1426": {
      "error": "Index access is out of bounds",
      "op": "extract 24 8 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "1429": {
      "op": "btoi",
      "defined_out": [
        "fee_asset#0"
      ],
      "stack_out": [
        "fee_asset#0"
      ]
    },
    "1430": {
      "op": "intc_0 // 0",
      "stack_out": [
        "fee_asset#0",
        "0"
      ]
    },
    "1431": {
      "op": "bytec_0 // \"G\"",
      "stack_out": [
        "fee_asset#0",
        "0",
        "\"G\""
      ]
    },
    "1432": {
      "op": "app_global_get_ex",
      "defined_out": [
        "fee_asset#0",
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "fee_asset#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "1433": {
      "error": "check self.delegation_terms_general exists",
      "op": "assert // check self.delegation_terms_general exists",
      "stack_out": [
        "fee_asset#0",
        "maybe_value%4#0"
      ]
    },
    "1434": {
      "error": "Index access is out of bounds",
      "op": "extract 16 8 // on error: Index access is out of bounds",
      "defined_out": [
        "fee_asset#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "fee_asset#0",
        "tmp%10#0"
      ]
    },
    "1437": {
      "op": "btoi",
      "defined_out": [
        "fee_asset#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "fee_asset#0",
        "tmp%11#0"
      ]
    },
    "1438": {
      "op": "intc_0 // 0",
      "stack_out": [
        "fee_asset#0",
        "tmp%11#0",
        "0"
      ]
    },
    "1439": {
      "op": "bytec 10 // \"fee_operational\"",
      "defined_out": [
        "\"fee_operational\"",
        "0",
        "fee_asset#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "fee_asset#0",
        "tmp%11#0",
        "0",
        "\"fee_operational\""
      ]
    },
    "1441": {
      "op": "app_global_get_ex",
      "defined_out": [
        "fee_asset#0",
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "fee_asset#0",
        "tmp%11#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "1442": {
      "error": "check self.fee_operational exists",
      "op": "assert // check self.fee_operational exists",
      "stack_out": [
        "fee_asset#0",
        "tmp%11#0",
        "maybe_value%5#0"
      ]
    },
    "1443": {
      "op": "+",
      "defined_out": [
        "base_fee#0",
        "fee_asset#0"
      ],
      "stack_out": [
        "fee_asset#0",
        "base_fee#0"
      ]
    },
    "1444": {
      "op": "intc_0 // 0",
      "stack_out": [
        "fee_asset#0",
        "base_fee#0",
        "0"
      ]
    },
    "1445": {
      "op": "bytec_0 // \"G\"",
      "stack_out": [
        "fee_asset#0",
        "base_fee#0",
        "0",
        "\"G\""
      ]
    },
    "1446": {
      "op": "app_global_get_ex",
      "defined_out": [
        "base_fee#0",
        "fee_asset#0",
        "maybe_exists%6#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "fee_asset#0",
        "base_fee#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "1447": {
      "error": "check self.delegation_terms_general exists",
      "op": "assert // check self.delegation_terms_general exists",
      "stack_out": [
        "fee_asset#0",
        "base_fee#0",
        "maybe_value%6#0"
      ]
    },
    "1448": {
      "error": "Index access is out of bounds",
      "op": "extract 72 8 // on error: Index access is out of bounds",
      "defined_out": [
        "base_fee#0",
        "fee_asset#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "fee_asset#0",
        "base_fee#0",
        "tmp%12#0"
      ]
    },
    "1451": {
      "op": "btoi",
      "defined_out": [
        "base_fee#0",
        "fee_asset#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "fee_asset#0",
        "base_fee#0",
        "tmp%13#0"
      ]
    },
    "1452": {
      "op": "intc_0 // 0",
      "stack_out": [
        "fee_asset#0",
        "base_fee#0",
        "tmp%13#0",
        "0"
      ]
    },
    "1453": {
      "op": "bytec 11 // \"fee_operational_partner\"",
      "defined_out": [
        "\"fee_operational_partner\"",
        "0",
        "base_fee#0",
        "fee_asset#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "fee_asset#0",
        "base_fee#0",
        "tmp%13#0",
        "0",
        "\"fee_operational_partner\""
      ]
    },
    "1455": {
      "op": "app_global_get_ex",
      "defined_out": [
        "base_fee#0",
        "fee_asset#0",
        "maybe_exists%7#0",
        "maybe_value%7#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "fee_asset#0",
        "base_fee#0",
        "tmp%13#0",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "1456": {
      "error": "check self.fee_operational_partner exists",
      "op": "assert // check self.fee_operational_partner exists",
      "stack_out": [
        "fee_asset#0",
        "base_fee#0",
        "tmp%13#0",
        "maybe_value%7#0"
      ]
    },
    "1457": {
      "op": "+",
      "defined_out": [
        "base_fee#0",
        "fee_asset#0",
        "partner_fee#0"
      ],
      "stack_out": [
        "fee_asset#0",
        "base_fee#0",
        "partner_fee#0"
      ]
    },
    "1458": {
      "op": "+",
      "defined_out": [
        "amt_return#0",
        "fee_asset#0"
      ],
      "stack_out": [
        "fee_asset#0",
        "amt_return#0"
      ]
    },
    "1459": {
      "callsub": "smart_contracts.delegator_contract.contract.DelegatorContract._try_return_fee",
      "op": "callsub _try_return_fee",
      "stack_out": []
    },
    "1462": {
      "op": "bytec_1 // \"state\"",
      "stack_out": [
        "\"state\""
      ]
    },
    "1463": {
      "op": "bytec 21 // 0x10",
      "defined_out": [
        "\"state\"",
        "0x10"
      ],
      "stack_out": [
        "\"state\"",
        "0x10"
      ]
    },
    "1465": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1466": {
      "op": "bytec 8 // \"round_ended\""
    },
    "1468": {
      "op": "global Round",
      "defined_out": [
        "\"round_ended\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "\"round_ended\"",
        "new_state_value%0#0"
      ]
    },
    "1470": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1471": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1472": {
      "op": "bytec_2 // \"del_manager\"",
      "defined_out": [
        "\"del_manager\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"del_manager\""
      ]
    },
    "1473": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%8#0",
        "maybe_value%8#0"
      ],
      "stack_out": [
        "maybe_value%8#0",
        "maybe_exists%8#0"
      ]
    },
    "1474": {
      "error": "check self.del_manager exists",
      "op": "assert // check self.del_manager exists",
      "stack_out": [
        "maybe_value%8#0"
      ]
    },
    "1475": {
      "op": "pushbytes 0x4d6573736167652066726f6d2056616c61723a204e6f64652072756e6e65722068617320756e666f7274756e6174656c79206e6f742070726570617265642061206e6f646520666f7220796f752e20202020202020202020202020202020202020202020",
      "defined_out": [
        "0x4d6573736167652066726f6d2056616c61723a204e6f64652072756e6e65722068617320756e666f7274756e6174656c79206e6f742070726570617265642061206e6f646520666f7220796f752e20202020202020202020202020202020202020202020",
        "maybe_value%8#0"
      ],
      "stack_out": [
        "maybe_value%8#0",
        "0x4d6573736167652066726f6d2056616c61723a204e6f64652072756e6e65722068617320756e666f7274756e6174656c79206e6f742070726570617265642061206e6f646520666f7220796f752e20202020202020202020202020202020202020202020"
      ]
    },
    "1577": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1578": {
      "retsub": true,
      "op": "retsub"
    },
    "1579": {
      "subroutine": "smart_contracts.delegator_contract.contract.DelegatorContract.keys_submit",
      "params": {
        "key_reg_txn_info#0": "bytes"
      },
      "block": "keys_submit",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1582": {
      "op": "txn Sender"
    },
    "1584": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1586": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1587": {
      "error": "Can only be called by smart contract creator.",
      "op": "assert // Can only be called by smart contract creator.",
      "stack_out": []
    },
    "1588": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1589": {
      "op": "bytec_1 // \"state\"",
      "defined_out": [
        "\"state\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"state\""
      ]
    },
    "1590": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1591": {
      "error": "check self.state exists",
      "op": "assert // check self.state exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1592": {
      "op": "bytec 14 // 0x03",
      "defined_out": [
        "0x03",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0x03"
      ]
    },
    "1594": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1595": {
      "error": "Cannot be called from other state than READY.",
      "op": "assert // Cannot be called from other state than READY.",
      "stack_out": []
    },
    "1596": {
      "op": "frame_dig -1",
      "defined_out": [
        "key_reg_txn_info#0 (copy)"
      ],
      "stack_out": [
        "key_reg_txn_info#0 (copy)"
      ]
    },
    "1598": {
      "error": "Index access is out of bounds",
      "op": "extract 152 32 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1601": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%4#0",
        "0"
      ]
    },
    "1602": {
      "op": "bytec 7 // \"del_beneficiary\"",
      "defined_out": [
        "\"del_beneficiary\"",
        "0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "\"del_beneficiary\""
      ]
    },
    "1604": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1605": {
      "error": "check self.del_beneficiary exists",
      "op": "assert // check self.del_beneficiary exists",
      "stack_out": [
        "tmp%4#0",
        "maybe_value%1#0"
      ]
    },
    "1606": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1607": {
      "error": "Key beneficiary does not match.",
      "op": "assert // Key beneficiary does not match.",
      "stack_out": []
    },
    "1608": {
      "op": "frame_dig -1",
      "stack_out": [
        "key_reg_txn_info#0 (copy)"
      ]
    },
    "1610": {
      "error": "Index access is out of bounds",
      "op": "extract 0 8 // on error: Index access is out of bounds",
      "defined_out": [
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "reinterpret_biguint%0#0"
      ]
    },
    "1613": {
      "op": "intc_0 // 0",
      "stack_out": [
        "reinterpret_biguint%0#0",
        "0"
      ]
    },
    "1614": {
      "op": "bytec 5 // \"round_start\"",
      "defined_out": [
        "\"round_start\"",
        "0",
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "reinterpret_biguint%0#0",
        "0",
        "\"round_start\""
      ]
    },
    "1616": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "reinterpret_biguint%0#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1617": {
      "error": "check self.round_start exists",
      "op": "assert // check self.round_start exists",
      "stack_out": [
        "reinterpret_biguint%0#0",
        "maybe_value%2#0"
      ]
    },
    "1618": {
      "op": "itob",
      "defined_out": [
        "reinterpret_biguint%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "reinterpret_biguint%0#0",
        "tmp%6#0"
      ]
    },
    "1619": {
      "op": "b==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1620": {
      "error": "Vote first round does not match contract start.",
      "op": "assert // Vote first round does not match contract start.",
      "stack_out": []
    },
    "1621": {
      "op": "frame_dig -1",
      "stack_out": [
        "key_reg_txn_info#0 (copy)"
      ]
    },
    "1623": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "reinterpret_biguint%1#0"
      ],
      "stack_out": [
        "reinterpret_biguint%1#0"
      ]
    },
    "1626": {
      "op": "intc_0 // 0",
      "stack_out": [
        "reinterpret_biguint%1#0",
        "0"
      ]
    },
    "1627": {
      "op": "bytec_3 // \"round_end\"",
      "defined_out": [
        "\"round_end\"",
        "0",
        "reinterpret_biguint%1#0"
      ],
      "stack_out": [
        "reinterpret_biguint%1#0",
        "0",
        "\"round_end\""
      ]
    },
    "1628": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "reinterpret_biguint%1#0"
      ],
      "stack_out": [
        "reinterpret_biguint%1#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1629": {
      "error": "check self.round_end exists",
      "op": "assert // check self.round_end exists",
      "stack_out": [
        "reinterpret_biguint%1#0",
        "maybe_value%3#0"
      ]
    },
    "1630": {
      "op": "itob",
      "defined_out": [
        "reinterpret_biguint%1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "reinterpret_biguint%1#0",
        "tmp%8#0"
      ]
    },
    "1631": {
      "op": "b==",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "1632": {
      "error": "Vote last round does not match contract end.",
      "op": "assert // Vote last round does not match contract end.",
      "stack_out": []
    },
    "1633": {
      "op": "frame_dig -1",
      "stack_out": [
        "key_reg_txn_info#0 (copy)"
      ]
    },
    "1635": {
      "error": "Index access is out of bounds",
      "op": "extract 16 8 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "1638": {
      "op": "btoi",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "1639": {
      "op": "bytec 22 // \"vote_key_dilution\"",
      "defined_out": [
        "\"vote_key_dilution\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0",
        "\"vote_key_dilution\""
      ]
    },
    "1641": {
      "op": "swap",
      "stack_out": [
        "\"vote_key_dilution\"",
        "new_state_value%0#0"
      ]
    },
    "1642": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1643": {
      "op": "frame_dig -1",
      "stack_out": [
        "key_reg_txn_info#0 (copy)"
      ]
    },
    "1645": {
      "error": "Index access is out of bounds",
      "op": "extract 24 32 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "1648": {
      "op": "bytec 24 // \"vote_key\"",
      "defined_out": [
        "\"vote_key\"",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "\"vote_key\""
      ]
    },
    "1650": {
      "op": "swap",
      "stack_out": [
        "\"vote_key\"",
        "tmp%11#0"
      ]
    },
    "1651": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1652": {
      "op": "frame_dig -1",
      "stack_out": [
        "key_reg_txn_info#0 (copy)"
      ]
    },
    "1654": {
      "error": "Index access is out of bounds",
      "op": "extract 56 32 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "1657": {
      "op": "bytec 23 // \"sel_key\"",
      "defined_out": [
        "\"sel_key\"",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "\"sel_key\""
      ]
    },
    "1659": {
      "op": "swap",
      "stack_out": [
        "\"sel_key\"",
        "tmp%12#0"
      ]
    },
    "1660": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1661": {
      "op": "frame_dig -1",
      "stack_out": [
        "key_reg_txn_info#0 (copy)"
      ]
    },
    "1663": {
      "error": "Index access is out of bounds",
      "op": "extract 88 64 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "1666": {
      "op": "bytec 25 // \"state_proof_key\"",
      "defined_out": [
        "\"state_proof_key\"",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "\"state_proof_key\""
      ]
    },
    "1668": {
      "op": "swap",
      "stack_out": [
        "\"state_proof_key\"",
        "tmp%13#0"
      ]
    },
    "1669": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1670": {
      "op": "global Round",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "1672": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%14#0",
        "0"
      ]
    },
    "1673": {
      "op": "bytec 5 // \"round_start\"",
      "stack_out": [
        "tmp%14#0",
        "0",
        "\"round_start\""
      ]
    },
    "1675": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "1676": {
      "error": "check self.round_start exists",
      "op": "assert // check self.round_start exists",
      "stack_out": [
        "tmp%14#0",
        "maybe_value%4#0"
      ]
    },
    "1677": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%14#0",
        "maybe_value%4#0",
        "0"
      ]
    },
    "1678": {
      "op": "bytec_0 // \"G\"",
      "defined_out": [
        "\"G\"",
        "0",
        "maybe_value%4#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "maybe_value%4#0",
        "0",
        "\"G\""
      ]
    },
    "1679": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "1680": {
      "error": "check self.delegation_terms_general exists",
      "op": "assert // check self.delegation_terms_general exists",
      "stack_out": [
        "tmp%14#0",
        "maybe_value%4#0",
        "maybe_value%5#0"
      ]
    },
    "1681": {
      "error": "Index access is out of bounds",
      "op": "extract 80 8 // on error: Index access is out of bounds",
      "defined_out": [
        "maybe_value%4#0",
        "tmp%14#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "maybe_value%4#0",
        "tmp%15#0"
      ]
    },
    "1684": {
      "op": "btoi",
      "defined_out": [
        "maybe_value%4#0",
        "tmp%14#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "maybe_value%4#0",
        "tmp%16#0"
      ]
    },
    "1685": {
      "op": "+",
      "defined_out": [
        "tmp%14#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "tmp%17#0"
      ]
    },
    "1686": {
      "op": "<=",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "1687": {
      "error": "Key submission was done too late.",
      "op": "assert // Key submission was done too late.",
      "stack_out": []
    },
    "1688": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1689": {
      "op": "bytec_0 // \"G\"",
      "stack_out": [
        "0",
        "\"G\""
      ]
    },
    "1690": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%6#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "1691": {
      "error": "check self.delegation_terms_general exists",
      "op": "assert // check self.delegation_terms_general exists",
      "stack_out": [
        "maybe_value%6#0"
      ]
    },
    "1692": {
      "error": "Index access is out of bounds",
      "op": "extract 16 8 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "1695": {
      "op": "btoi",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "1696": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%20#0",
        "0"
      ]
    },
    "1697": {
      "op": "bytec_0 // \"G\"",
      "stack_out": [
        "tmp%20#0",
        "0",
        "\"G\""
      ]
    },
    "1698": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%7#0",
        "maybe_value%7#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "1699": {
      "error": "check self.delegation_terms_general exists",
      "op": "assert // check self.delegation_terms_general exists",
      "stack_out": [
        "tmp%20#0",
        "maybe_value%7#0"
      ]
    },
    "1700": {
      "error": "Index access is out of bounds",
      "op": "extract 72 8 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%20#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%20#0",
        "tmp%21#0"
      ]
    },
    "1703": {
      "op": "btoi",
      "defined_out": [
        "tmp%20#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%20#0",
        "tmp%22#0"
      ]
    },
    "1704": {
      "callsub": "smart_contracts.delegator_contract.contract.DelegatorContract._distribute_earnings",
      "op": "callsub _distribute_earnings",
      "defined_out": [
        "earnings_distribution#0"
      ],
      "stack_out": [
        "earnings_distribution#0"
      ]
    },
    "1707": {
      "op": "bytec_1 // \"state\"",
      "stack_out": [
        "earnings_distribution#0",
        "\"state\""
      ]
    },
    "1708": {
      "op": "bytec 15 // 0x04",
      "defined_out": [
        "\"state\"",
        "0x04",
        "earnings_distribution#0"
      ],
      "stack_out": [
        "earnings_distribution#0",
        "\"state\"",
        "0x04"
      ]
    },
    "1710": {
      "op": "app_global_put",
      "stack_out": [
        "earnings_distribution#0"
      ]
    },
    "1711": {
      "op": "intc_0 // 0",
      "stack_out": [
        "earnings_distribution#0",
        "0"
      ]
    },
    "1712": {
      "op": "bytec_2 // \"del_manager\"",
      "defined_out": [
        "\"del_manager\"",
        "0",
        "earnings_distribution#0"
      ],
      "stack_out": [
        "earnings_distribution#0",
        "0",
        "\"del_manager\""
      ]
    },
    "1713": {
      "op": "app_global_get_ex",
      "defined_out": [
        "earnings_distribution#0",
        "maybe_exists%8#0",
        "maybe_value%8#0"
      ],
      "stack_out": [
        "earnings_distribution#0",
        "maybe_value%8#0",
        "maybe_exists%8#0"
      ]
    },
    "1714": {
      "error": "check self.del_manager exists",
      "op": "assert // check self.del_manager exists",
      "stack_out": [
        "earnings_distribution#0",
        "maybe_value%8#0"
      ]
    },
    "1715": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1716": {
      "op": "pushbytes 0x4d6573736167652066726f6d2056616c61723a204e6f646520686173206265656e20707265706172656420666f7220796f7520746f207374616b652e20202020202020202020202020202020202020202020202020202020202020202020202020202020",
      "defined_out": [
        "0x4d6573736167652066726f6d2056616c61723a204e6f646520686173206265656e20707265706172656420666f7220796f7520746f207374616b652e20202020202020202020202020202020202020202020202020202020202020202020202020202020",
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "0x4d6573736167652066726f6d2056616c61723a204e6f646520686173206265656e20707265706172656420666f7220796f7520746f207374616b652e20202020202020202020202020202020202020202020202020202020202020202020202020202020"
      ]
    },
    "1818": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0"
      ]
    },
    "1819": {
      "retsub": true,
      "op": "retsub"
    },
    "1820": {
      "subroutine": "smart_contracts.delegator_contract.contract.DelegatorContract.breach_limits",
      "params": {},
      "block": "breach_limits",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "1823": {
      "op": "txn Sender"
    },
    "1825": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1827": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1828": {
      "error": "Can only be called by smart contract creator.",
      "op": "assert // Can only be called by smart contract creator.",
      "stack_out": []
    },
    "1829": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1830": {
      "op": "bytec_1 // \"state\"",
      "defined_out": [
        "\"state\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"state\""
      ]
    },
    "1831": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1832": {
      "error": "check self.state exists",
      "op": "assert // check self.state exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1833": {
      "op": "bytec 6 // 0x05",
      "defined_out": [
        "0x05",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0x05"
      ]
    },
    "1835": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1836": {
      "error": "Cannot be called from other state than LIVE.",
      "op": "assert // Cannot be called from other state than LIVE.",
      "stack_out": []
    },
    "1837": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1838": {
      "op": "bytec_3 // \"round_end\"",
      "defined_out": [
        "\"round_end\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"round_end\""
      ]
    },
    "1839": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1840": {
      "error": "check self.round_end exists",
      "op": "assert // check self.round_end exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "1841": {
      "op": "global Round",
      "defined_out": [
        "maybe_value%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "tmp%4#0"
      ]
    },
    "1843": {
      "op": ">",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1844": {
      "error": "Cannot be called when the contract has already expired.",
      "op": "assert // Cannot be called when the contract has already expired.",
      "stack_out": []
    },
    "1845": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1846": {
      "op": "bytec 16 // \"round_breach_last\"",
      "defined_out": [
        "\"round_breach_last\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"round_breach_last\""
      ]
    },
    "1848": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1849": {
      "error": "check self.round_breach_last exists",
      "op": "assert // check self.round_breach_last exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "1850": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%2#0",
        "0"
      ]
    },
    "1851": {
      "op": "bytec 12 // \"B\"",
      "defined_out": [
        "\"B\"",
        "0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "0",
        "\"B\""
      ]
    },
    "1853": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1854": {
      "error": "check self.delegation_terms_balance exists",
      "op": "assert // check self.delegation_terms_balance exists",
      "stack_out": [
        "maybe_value%2#0",
        "maybe_value%3#0"
      ]
    },
    "1855": {
      "error": "Index access is out of bounds",
      "op": "extract 16 8 // on error: Index access is out of bounds",
      "defined_out": [
        "maybe_value%2#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "tmp%6#0"
      ]
    },
    "1858": {
      "op": "btoi",
      "defined_out": [
        "maybe_value%2#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "tmp%7#0"
      ]
    },
    "1859": {
      "op": "+",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "1860": {
      "op": "global Round",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "1862": {
      "op": "<",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "1863": {
      "error": "Not enough rounds have passed since last limit breach event.",
      "op": "assert // Not enough rounds have passed since last limit breach event.",
      "stack_out": []
    },
    "1864": {
      "callsub": "smart_contracts.delegator_contract.contract.DelegatorContract._is_eligible",
      "op": "callsub _is_eligible",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "1867": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%11#0",
        "0"
      ]
    },
    "1868": {
      "op": "getbit",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "1869": {
      "op": "!",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "1870": {
      "error": "Delegator beneficiary is still eligible according to the agreed limits.",
      "op": "assert // Delegator beneficiary is still eligible according to the agreed limits.",
      "stack_out": []
    },
    "1871": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1872": {
      "op": "bytec 13 // \"cnt_breach_del\"",
      "defined_out": [
        "\"cnt_breach_del\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"cnt_breach_del\""
      ]
    },
    "1874": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "1875": {
      "error": "check self.cnt_breach_del exists",
      "op": "assert // check self.cnt_breach_del exists",
      "stack_out": [
        "maybe_value%4#0"
      ]
    },
    "1876": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "1"
      ]
    },
    "1877": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "1878": {
      "op": "bytec 13 // \"cnt_breach_del\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"cnt_breach_del\""
      ]
    },
    "1880": {
      "op": "swap",
      "stack_out": [
        "\"cnt_breach_del\"",
        "new_state_value%0#0"
      ]
    },
    "1881": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1882": {
      "op": "bytec 16 // \"round_breach_last\""
    },
    "1884": {
      "op": "global Round",
      "defined_out": [
        "\"round_breach_last\"",
        "new_state_value%1#0"
      ],
      "stack_out": [
        "\"round_breach_last\"",
        "new_state_value%1#0"
      ]
    },
    "1886": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1887": {
      "callsub": "smart_contracts.delegator_contract.contract.DelegatorContract.contract_claim",
      "op": "callsub contract_claim",
      "defined_out": [
        "earnings_distribution#0"
      ],
      "stack_out": [
        "earnings_distribution#0"
      ]
    },
    "1890": {
      "op": "intc_0 // 0"
    },
    "1891": {
      "op": "pushbytes 0x4d6573736167652066726f6d2056616c61723a20596f75722062616c616e6365206973206f75747369646520746865206c696d69747320616772656564207769746820746865206e6f64652072756e6e65722e20436f7272656374206974212020202020"
    },
    "1993": {
      "op": "intc_0 // 0"
    },
    "1994": {
      "op": "bytec 12 // \"B\"",
      "defined_out": [
        "\"B\"",
        "0",
        "earnings_distribution#0",
        "max_breach_reached#0",
        "msg#0"
      ],
      "stack_out": [
        "earnings_distribution#0",
        "max_breach_reached#0",
        "msg#0",
        "0",
        "\"B\""
      ]
    },
    "1996": {
      "op": "app_global_get_ex",
      "defined_out": [
        "earnings_distribution#0",
        "max_breach_reached#0",
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "msg#0"
      ],
      "stack_out": [
        "earnings_distribution#0",
        "max_breach_reached#0",
        "msg#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "1997": {
      "error": "check self.delegation_terms_balance exists",
      "op": "assert // check self.delegation_terms_balance exists",
      "stack_out": [
        "earnings_distribution#0",
        "max_breach_reached#0",
        "msg#0",
        "maybe_value%5#0"
      ]
    },
    "1998": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "earnings_distribution#0",
        "max_breach_reached#0",
        "msg#0",
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "earnings_distribution#0",
        "max_breach_reached#0",
        "msg#0",
        "reinterpret_biguint%0#0"
      ]
    },
    "2001": {
      "op": "intc_0 // 0",
      "stack_out": [
        "earnings_distribution#0",
        "max_breach_reached#0",
        "msg#0",
        "reinterpret_biguint%0#0",
        "0"
      ]
    },
    "2002": {
      "op": "bytec 13 // \"cnt_breach_del\"",
      "stack_out": [
        "earnings_distribution#0",
        "max_breach_reached#0",
        "msg#0",
        "reinterpret_biguint%0#0",
        "0",
        "\"cnt_breach_del\""
      ]
    },
    "2004": {
      "op": "app_global_get_ex",
      "defined_out": [
        "earnings_distribution#0",
        "max_breach_reached#0",
        "maybe_exists%6#0",
        "maybe_value%6#0",
        "msg#0",
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "earnings_distribution#0",
        "max_breach_reached#0",
        "msg#0",
        "reinterpret_biguint%0#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "2005": {
      "error": "check self.cnt_breach_del exists",
      "op": "assert // check self.cnt_breach_del exists",
      "stack_out": [
        "earnings_distribution#0",
        "max_breach_reached#0",
        "msg#0",
        "reinterpret_biguint%0#0",
        "maybe_value%6#0"
      ]
    },
    "2006": {
      "op": "itob",
      "defined_out": [
        "earnings_distribution#0",
        "max_breach_reached#0",
        "msg#0",
        "reinterpret_biguint%0#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "earnings_distribution#0",
        "max_breach_reached#0",
        "msg#0",
        "reinterpret_biguint%0#0",
        "tmp%14#0"
      ]
    },
    "2007": {
      "op": "b<=",
      "defined_out": [
        "earnings_distribution#0",
        "max_breach_reached#0",
        "msg#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "earnings_distribution#0",
        "max_breach_reached#0",
        "msg#0",
        "tmp%15#0"
      ]
    },
    "2008": {
      "op": "bz breach_limits_after_if_else@2",
      "stack_out": [
        "earnings_distribution#0",
        "max_breach_reached#0",
        "msg#0"
      ]
    },
    "2011": {
      "op": "bytec_1 // \"state\""
    },
    "2012": {
      "op": "pushbytes 0x12"
    },
    "2015": {
      "op": "app_global_put"
    },
    "2016": {
      "op": "bytec 8 // \"round_ended\""
    },
    "2018": {
      "op": "global Round"
    },
    "2020": {
      "op": "app_global_put"
    },
    "2021": {
      "op": "intc_1 // 1"
    },
    "2022": {
      "op": "frame_bury 1"
    },
    "2024": {
      "op": "pushbytes 0x4d6573736167652066726f6d2056616c61723a20596f757220636f6e74726163742068617320656e646564206265636175736520796f7520627265616368656420746865207465726d7320746f6f206d616e792074696d65732e20202020202020202020"
    },
    "2126": {
      "op": "frame_bury 2"
    },
    "2128": {
      "block": "breach_limits_after_if_else@2",
      "stack_in": [
        "earnings_distribution#0",
        "max_breach_reached#0",
        "msg#0"
      ],
      "op": "bytec 19 // 0x00",
      "defined_out": [
        "0x00"
      ],
      "stack_out": [
        "earnings_distribution#0",
        "max_breach_reached#0",
        "msg#0",
        "0x00"
      ]
    },
    "2130": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00"
      ],
      "stack_out": [
        "earnings_distribution#0",
        "max_breach_reached#0",
        "msg#0",
        "0x00",
        "0"
      ]
    },
    "2131": {
      "op": "frame_dig 1",
      "defined_out": [
        "0",
        "0x00",
        "max_breach_reached#0"
      ],
      "stack_out": [
        "earnings_distribution#0",
        "max_breach_reached#0",
        "msg#0",
        "0x00",
        "0",
        "max_breach_reached#0"
      ]
    },
    "2133": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0",
        "max_breach_reached#0"
      ],
      "stack_out": [
        "earnings_distribution#0",
        "max_breach_reached#0",
        "msg#0",
        "encoded_bool%0#0"
      ]
    },
    "2134": {
      "op": "intc_0 // 0",
      "stack_out": [
        "earnings_distribution#0",
        "max_breach_reached#0",
        "msg#0",
        "encoded_bool%0#0",
        "0"
      ]
    },
    "2135": {
      "op": "bytec_2 // \"del_manager\"",
      "defined_out": [
        "\"del_manager\"",
        "0",
        "encoded_bool%0#0",
        "max_breach_reached#0"
      ],
      "stack_out": [
        "earnings_distribution#0",
        "max_breach_reached#0",
        "msg#0",
        "encoded_bool%0#0",
        "0",
        "\"del_manager\""
      ]
    },
    "2136": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_bool%0#0",
        "max_breach_reached#0",
        "maybe_exists%7#0",
        "maybe_value%7#0"
      ],
      "stack_out": [
        "earnings_distribution#0",
        "max_breach_reached#0",
        "msg#0",
        "encoded_bool%0#0",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "2137": {
      "error": "check self.del_manager exists",
      "op": "assert // check self.del_manager exists",
      "stack_out": [
        "earnings_distribution#0",
        "max_breach_reached#0",
        "msg#0",
        "encoded_bool%0#0",
        "maybe_value%7#0"
      ]
    },
    "2138": {
      "op": "swap",
      "stack_out": [
        "earnings_distribution#0",
        "max_breach_reached#0",
        "msg#0",
        "maybe_value%7#0",
        "encoded_bool%0#0"
      ]
    },
    "2139": {
      "op": "frame_dig 0",
      "defined_out": [
        "earnings_distribution#0",
        "encoded_bool%0#0",
        "max_breach_reached#0",
        "maybe_value%7#0"
      ],
      "stack_out": [
        "earnings_distribution#0",
        "max_breach_reached#0",
        "msg#0",
        "maybe_value%7#0",
        "encoded_bool%0#0",
        "earnings_distribution#0"
      ]
    },
    "2141": {
      "op": "concat",
      "defined_out": [
        "earnings_distribution#0",
        "encoded_tuple_buffer%2#0",
        "max_breach_reached#0",
        "maybe_value%7#0"
      ],
      "stack_out": [
        "earnings_distribution#0",
        "max_breach_reached#0",
        "msg#0",
        "maybe_value%7#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "2142": {
      "op": "swap",
      "stack_out": [
        "earnings_distribution#0",
        "max_breach_reached#0",
        "msg#0",
        "encoded_tuple_buffer%2#0",
        "maybe_value%7#0"
      ]
    },
    "2143": {
      "op": "concat",
      "defined_out": [
        "earnings_distribution#0",
        "encoded_tuple_buffer%3#0",
        "max_breach_reached#0"
      ],
      "stack_out": [
        "earnings_distribution#0",
        "max_breach_reached#0",
        "msg#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "2144": {
      "op": "frame_dig 2",
      "defined_out": [
        "earnings_distribution#0",
        "encoded_tuple_buffer%3#0",
        "max_breach_reached#0",
        "msg#0"
      ],
      "stack_out": [
        "earnings_distribution#0",
        "max_breach_reached#0",
        "msg#0",
        "encoded_tuple_buffer%3#0",
        "msg#0"
      ]
    },
    "2146": {
      "op": "concat",
      "defined_out": [
        "earnings_distribution#0",
        "encoded_tuple_buffer%4#0",
        "max_breach_reached#0",
        "msg#0"
      ],
      "stack_out": [
        "earnings_distribution#0",
        "max_breach_reached#0",
        "msg#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "2147": {
      "op": "frame_bury 0"
    },
    "2149": {
      "retsub": true,
      "op": "retsub"
    },
    "2150": {
      "subroutine": "smart_contracts.delegator_contract.contract.DelegatorContract.breach_pay",
      "params": {},
      "block": "breach_pay",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "2153": {
      "op": "pushbytes \"\""
    },
    "2155": {
      "op": "dupn 4"
    },
    "2157": {
      "op": "txn Sender"
    },
    "2159": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "2161": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "tmp%2#0"
      ]
    },
    "2162": {
      "error": "Can only be called by smart contract creator.",
      "op": "assert // Can only be called by smart contract creator.",
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0"
      ]
    },
    "2163": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "0"
      ]
    },
    "2164": {
      "op": "bytec_1 // \"state\"",
      "defined_out": [
        "\"state\"",
        "0"
      ],
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "0",
        "\"state\""
      ]
    },
    "2165": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2166": {
      "error": "check self.state exists",
      "op": "assert // check self.state exists",
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "maybe_value%0#0"
      ]
    },
    "2167": {
      "op": "bytec 6 // 0x05",
      "defined_out": [
        "0x05",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "maybe_value%0#0",
        "0x05"
      ]
    },
    "2169": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "tmp%3#0"
      ]
    },
    "2170": {
      "op": "bnz breach_pay_bool_true@3",
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0"
      ]
    },
    "2173": {
      "op": "intc_0 // 0"
    },
    "2174": {
      "op": "bytec_1 // \"state\""
    },
    "2175": {
      "op": "app_global_get_ex"
    },
    "2176": {
      "error": "check self.state exists",
      "op": "assert // check self.state exists"
    },
    "2177": {
      "op": "bytec 15 // 0x04"
    },
    "2179": {
      "op": "=="
    },
    "2180": {
      "op": "bnz breach_pay_bool_true@3"
    },
    "2183": {
      "op": "intc_0 // 0"
    },
    "2184": {
      "op": "bytec_1 // \"state\""
    },
    "2185": {
      "op": "app_global_get_ex"
    },
    "2186": {
      "error": "check self.state exists",
      "op": "assert // check self.state exists"
    },
    "2187": {
      "op": "bytec 14 // 0x03"
    },
    "2189": {
      "op": "=="
    },
    "2190": {
      "op": "bz breach_pay_bool_false@4"
    },
    "2193": {
      "block": "breach_pay_bool_true@3",
      "stack_in": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "or_result%0#0"
      ]
    },
    "2194": {
      "block": "breach_pay_bool_merge@5",
      "stack_in": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "or_result%0#0"
      ],
      "error": "Cannot be called from other state than LIVE or SUBMITTED or READY.",
      "op": "assert // Cannot be called from other state than LIVE or SUBMITTED or READY.",
      "defined_out": [],
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0"
      ]
    },
    "2195": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "0"
      ]
    },
    "2196": {
      "op": "bytec_0 // \"G\"",
      "defined_out": [
        "\"G\"",
        "0"
      ],
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "0",
        "\"G\""
      ]
    },
    "2197": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "2198": {
      "error": "check self.delegation_terms_general exists",
      "op": "assert // check self.delegation_terms_general exists",
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "maybe_value%3#0"
      ]
    },
    "2199": {
      "error": "Index access is out of bounds",
      "op": "extract 24 8 // on error: Index access is out of bounds",
      "defined_out": [
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "reinterpret_biguint%0#0"
      ]
    },
    "2202": {
      "op": "intc_0 // 0",
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "reinterpret_biguint%0#0",
        "0"
      ]
    },
    "2203": {
      "op": "itob",
      "defined_out": [
        "reinterpret_biguint%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "reinterpret_biguint%0#0",
        "tmp%6#0"
      ]
    },
    "2204": {
      "op": "b!=",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "tmp%7#0"
      ]
    },
    "2205": {
      "error": "ALGO cannot be frozen or clawed back.",
      "op": "assert // ALGO cannot be frozen or clawed back.",
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0"
      ]
    },
    "2206": {
      "op": "intc_0 // 0",
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "0"
      ]
    },
    "2207": {
      "op": "bytec_0 // \"G\"",
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "0",
        "\"G\""
      ]
    },
    "2208": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "2209": {
      "error": "check self.delegation_terms_general exists",
      "op": "assert // check self.delegation_terms_general exists",
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "maybe_value%4#0"
      ]
    },
    "2210": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "tmp%8#0"
      ]
    },
    "2213": {
      "op": "btoi",
      "defined_out": [
        "fee_round#0"
      ],
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "fee_round#0"
      ]
    },
    "2214": {
      "op": "frame_bury 1",
      "defined_out": [
        "fee_round#0"
      ],
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0"
      ]
    },
    "2216": {
      "op": "intc_0 // 0",
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "0"
      ]
    },
    "2217": {
      "op": "bytec_0 // \"G\"",
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "0",
        "\"G\""
      ]
    },
    "2218": {
      "op": "app_global_get_ex",
      "defined_out": [
        "fee_round#0",
        "maybe_exists%5#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "2219": {
      "error": "check self.delegation_terms_general exists",
      "op": "assert // check self.delegation_terms_general exists",
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "maybe_value%5#0"
      ]
    },
    "2220": {
      "error": "Index access is out of bounds",
      "op": "extract 64 8 // on error: Index access is out of bounds",
      "defined_out": [
        "fee_round#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "tmp%9#0"
      ]
    },
    "2223": {
      "op": "btoi",
      "defined_out": [
        "fee_round#0",
        "fee_round_partner#0"
      ],
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "fee_round_partner#0"
      ]
    },
    "2224": {
      "op": "frame_bury 2",
      "defined_out": [
        "fee_round#0",
        "fee_round_partner#0"
      ],
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0"
      ]
    },
    "2226": {
      "op": "intc_0 // 0",
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "0"
      ]
    },
    "2227": {
      "op": "bytec_0 // \"G\"",
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "0",
        "\"G\""
      ]
    },
    "2228": {
      "op": "app_global_get_ex",
      "defined_out": [
        "fee_round#0",
        "fee_round_partner#0",
        "maybe_exists%6#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "2229": {
      "error": "check self.delegation_terms_general exists",
      "op": "assert // check self.delegation_terms_general exists",
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "maybe_value%6#0"
      ]
    },
    "2230": {
      "error": "Index access is out of bounds",
      "op": "extract 16 8 // on error: Index access is out of bounds",
      "defined_out": [
        "fee_round#0",
        "fee_round_partner#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "tmp%10#0"
      ]
    },
    "2233": {
      "op": "btoi",
      "defined_out": [
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0"
      ],
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "fee_setup#0"
      ]
    },
    "2234": {
      "op": "frame_bury 3",
      "defined_out": [
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0"
      ],
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0"
      ]
    },
    "2236": {
      "op": "intc_0 // 0",
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "0"
      ]
    },
    "2237": {
      "op": "bytec_0 // \"G\"",
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "0",
        "\"G\""
      ]
    },
    "2238": {
      "op": "app_global_get_ex",
      "defined_out": [
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "maybe_exists%7#0",
        "maybe_value%7#0"
      ],
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "2239": {
      "error": "check self.delegation_terms_general exists",
      "op": "assert // check self.delegation_terms_general exists",
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "maybe_value%7#0"
      ]
    },
    "2240": {
      "error": "Index access is out of bounds",
      "op": "extract 72 8 // on error: Index access is out of bounds",
      "defined_out": [
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "tmp%11#0"
      ]
    },
    "2243": {
      "op": "btoi",
      "defined_out": [
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0"
      ],
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "fee_setup_partner#0"
      ]
    },
    "2244": {
      "op": "frame_bury 4",
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0"
      ]
    },
    "2246": {
      "op": "intc_0 // 0",
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "0"
      ]
    },
    "2247": {
      "op": "bytec_0 // \"G\"",
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "0",
        "\"G\""
      ]
    },
    "2248": {
      "op": "app_global_get_ex",
      "defined_out": [
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "maybe_exists%8#0",
        "maybe_value%8#0"
      ],
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "maybe_value%8#0",
        "maybe_exists%8#0"
      ]
    },
    "2249": {
      "error": "check self.delegation_terms_general exists",
      "op": "assert // check self.delegation_terms_general exists",
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "maybe_value%8#0"
      ]
    },
    "2250": {
      "error": "Index access is out of bounds",
      "op": "extract 24 8 // on error: Index access is out of bounds",
      "defined_out": [
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "tmp%12#0"
      ]
    },
    "2253": {
      "op": "btoi",
      "defined_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0"
      ],
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "asset#0"
      ]
    },
    "2254": {
      "op": "dup",
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "asset#0",
        "asset#0"
      ]
    },
    "2255": {
      "op": "frame_bury 0",
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "asset#0"
      ]
    },
    "2257": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "asset#0",
        "tmp%13#0"
      ]
    },
    "2259": {
      "op": "swap",
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "tmp%13#0",
        "asset#0"
      ]
    },
    "2260": {
      "op": "asset_holding_get AssetFrozen",
      "defined_out": [
        "asset#0",
        "check%0#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "value%0#0"
      ],
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "value%0#0",
        "check%0#0"
      ]
    },
    "2262": {
      "error": "account opted into asset",
      "op": "assert // account opted into asset",
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "value%0#0"
      ]
    },
    "2263": {
      "op": "bnz breach_pay_after_if_else@19",
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0"
      ]
    },
    "2266": {
      "op": "intc_0 // 0"
    },
    "2267": {
      "op": "bytec_1 // \"state\""
    },
    "2268": {
      "op": "app_global_get_ex"
    },
    "2269": {
      "error": "check self.state exists",
      "op": "assert // check self.state exists"
    },
    "2270": {
      "op": "bytec 14 // 0x03"
    },
    "2272": {
      "op": "=="
    },
    "2273": {
      "op": "bz breach_pay_else_body@9"
    },
    "2276": {
      "op": "intc_0 // 0"
    },
    "2277": {
      "op": "bytec 10 // \"fee_operational\""
    },
    "2279": {
      "op": "app_global_get_ex"
    },
    "2280": {
      "error": "check self.fee_operational exists",
      "op": "assert // check self.fee_operational exists"
    },
    "2281": {
      "op": "frame_dig 3"
    },
    "2283": {
      "op": "+"
    },
    "2284": {
      "op": "intc_0 // 0"
    },
    "2285": {
      "op": "bytec 11 // \"fee_operational_partner\""
    },
    "2287": {
      "op": "app_global_get_ex"
    },
    "2288": {
      "error": "check self.fee_operational_partner exists",
      "op": "assert // check self.fee_operational_partner exists"
    },
    "2289": {
      "op": "frame_dig 4"
    },
    "2291": {
      "op": "+"
    },
    "2292": {
      "op": "+"
    },
    "2293": {
      "op": "global CurrentApplicationAddress"
    },
    "2295": {
      "op": "frame_dig 0"
    },
    "2297": {
      "op": "asset_holding_get AssetBalance"
    },
    "2299": {
      "error": "account opted into asset",
      "op": "assert // account opted into asset"
    },
    "2300": {
      "op": ">"
    },
    "2301": {
      "error": "Contract has sufficient funds to pay the setup and operational fee.",
      "op": "assert // Contract has sufficient funds to pay the setup and operational fee."
    },
    "2302": {
      "block": "breach_pay_after_if_else@19",
      "stack_in": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0"
      ],
      "op": "bytec_1 // \"state\"",
      "defined_out": [
        "\"state\""
      ],
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "\"state\""
      ]
    },
    "2303": {
      "op": "pushbytes 0x16",
      "defined_out": [
        "\"state\"",
        "0x16"
      ],
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "\"state\"",
        "0x16"
      ]
    },
    "2306": {
      "op": "app_global_put",
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0"
      ]
    },
    "2307": {
      "op": "bytec 8 // \"round_ended\""
    },
    "2309": {
      "op": "global Round",
      "defined_out": [
        "\"round_ended\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "\"round_ended\"",
        "new_state_value%0#0"
      ]
    },
    "2311": {
      "op": "app_global_put",
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0"
      ]
    },
    "2312": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "0"
      ]
    },
    "2313": {
      "op": "bytec_2 // \"del_manager\"",
      "defined_out": [
        "\"del_manager\"",
        "0"
      ],
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "0",
        "\"del_manager\""
      ]
    },
    "2314": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%20#0",
        "maybe_value%20#0"
      ],
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "maybe_value%20#0",
        "maybe_exists%20#0"
      ]
    },
    "2315": {
      "error": "check self.del_manager exists",
      "op": "assert // check self.del_manager exists",
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "maybe_value%20#0"
      ]
    },
    "2316": {
      "op": "pushbytes 0x4d6573736167652066726f6d2056616c61723a20546865726520697320616e206973737565207769746820796f7572207061796d656e7420746f20746865206e6f64652072756e6e65722e20596f7520646f6e2774207374616b6520616e796d6f72652e",
      "defined_out": [
        "0x4d6573736167652066726f6d2056616c61723a20546865726520697320616e206973737565207769746820796f7572207061796d656e7420746f20746865206e6f64652072756e6e65722e20596f7520646f6e2774207374616b6520616e796d6f72652e",
        "maybe_value%20#0"
      ],
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "maybe_value%20#0",
        "0x4d6573736167652066726f6d2056616c61723a20546865726520697320616e206973737565207769746820796f7572207061796d656e7420746f20746865206e6f64652072756e6e65722e20596f7520646f6e2774207374616b6520616e796d6f72652e"
      ]
    },
    "2418": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "2419": {
      "op": "frame_bury 0"
    },
    "2421": {
      "retsub": true,
      "op": "retsub"
    },
    "2422": {
      "block": "breach_pay_else_body@9",
      "stack_in": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "0"
      ]
    },
    "2423": {
      "op": "bytec_1 // \"state\"",
      "defined_out": [
        "\"state\"",
        "0"
      ],
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "0",
        "\"state\""
      ]
    },
    "2424": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%12#0",
        "maybe_value%12#0"
      ],
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "maybe_value%12#0",
        "maybe_exists%12#0"
      ]
    },
    "2425": {
      "error": "check self.state exists",
      "op": "assert // check self.state exists",
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "maybe_value%12#0"
      ]
    },
    "2426": {
      "op": "bytec 15 // 0x04",
      "defined_out": [
        "0x04",
        "maybe_value%12#0"
      ],
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "maybe_value%12#0",
        "0x04"
      ]
    },
    "2428": {
      "op": "==",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "tmp%17#0"
      ]
    },
    "2429": {
      "op": "bz breach_pay_else_body@11",
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0"
      ]
    },
    "2432": {
      "op": "intc_0 // 0"
    },
    "2433": {
      "op": "bytec 10 // \"fee_operational\""
    },
    "2435": {
      "op": "app_global_get_ex"
    },
    "2436": {
      "error": "check self.fee_operational exists",
      "op": "assert // check self.fee_operational exists"
    },
    "2437": {
      "op": "intc_0 // 0"
    },
    "2438": {
      "op": "bytec 11 // \"fee_operational_partner\""
    },
    "2440": {
      "op": "app_global_get_ex"
    },
    "2441": {
      "error": "check self.fee_operational_partner exists",
      "op": "assert // check self.fee_operational_partner exists"
    },
    "2442": {
      "op": "+"
    },
    "2443": {
      "op": "global CurrentApplicationAddress"
    },
    "2445": {
      "op": "frame_dig 0"
    },
    "2447": {
      "op": "asset_holding_get AssetBalance"
    },
    "2449": {
      "error": "account opted into asset",
      "op": "assert // account opted into asset"
    },
    "2450": {
      "op": ">"
    },
    "2451": {
      "error": "Contract has sufficient funds to pay the full operational fee.",
      "op": "assert // Contract has sufficient funds to pay the full operational fee."
    },
    "2452": {
      "op": "b breach_pay_after_if_else@19"
    },
    "2455": {
      "block": "breach_pay_else_body@11",
      "stack_in": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "0"
      ]
    },
    "2456": {
      "op": "bytec_1 // \"state\"",
      "defined_out": [
        "\"state\"",
        "0"
      ],
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "0",
        "\"state\""
      ]
    },
    "2457": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%15#0",
        "maybe_value%15#0"
      ],
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "maybe_value%15#0",
        "maybe_exists%15#0"
      ]
    },
    "2458": {
      "error": "check self.state exists",
      "op": "assert // check self.state exists",
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "maybe_value%15#0"
      ]
    },
    "2459": {
      "op": "bytec 6 // 0x05",
      "defined_out": [
        "0x05",
        "maybe_value%15#0"
      ],
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "maybe_value%15#0",
        "0x05"
      ]
    },
    "2461": {
      "op": "==",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "tmp%20#0"
      ]
    },
    "2462": {
      "op": "bz breach_pay_after_if_else@19",
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0"
      ]
    },
    "2465": {
      "op": "global Round"
    },
    "2467": {
      "op": "intc_0 // 0"
    },
    "2468": {
      "op": "bytec_3 // \"round_end\""
    },
    "2469": {
      "op": "app_global_get_ex"
    },
    "2470": {
      "error": "check self.round_end exists",
      "op": "assert // check self.round_end exists"
    },
    "2471": {
      "op": "<"
    },
    "2472": {
      "op": "bz breach_pay_else_body@14"
    },
    "2475": {
      "op": "global Round"
    },
    "2477": {
      "block": "breach_pay_after_if_else@15",
      "stack_in": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "tmp_r#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "tmp_r#0",
        "0"
      ]
    },
    "2478": {
      "op": "bytec 9 // \"round_claim_last\"",
      "defined_out": [
        "\"round_claim_last\"",
        "0"
      ],
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "tmp_r#0",
        "0",
        "\"round_claim_last\""
      ]
    },
    "2480": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%18#0",
        "round_start#0"
      ],
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "tmp_r#0",
        "round_start#0",
        "maybe_exists%18#0"
      ]
    },
    "2481": {
      "error": "check self.round_claim_last exists",
      "op": "assert // check self.round_claim_last exists",
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "tmp_r#0",
        "round_start#0"
      ]
    },
    "2482": {
      "op": "dig 1",
      "defined_out": [
        "round_start#0",
        "tmp_r#0",
        "tmp_r#0 (copy)"
      ],
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "tmp_r#0",
        "round_start#0",
        "tmp_r#0 (copy)"
      ]
    },
    "2484": {
      "op": "swap",
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "tmp_r#0",
        "tmp_r#0 (copy)",
        "round_start#0"
      ]
    },
    "2485": {
      "op": "-",
      "defined_out": [
        "tmp%0#1",
        "tmp_r#0"
      ],
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "tmp_r#0",
        "tmp%0#1"
      ]
    },
    "2486": {
      "op": "frame_dig 1",
      "defined_out": [
        "fee_round#0",
        "tmp%0#1",
        "tmp_r#0"
      ],
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "tmp_r#0",
        "tmp%0#1",
        "fee_round#0"
      ]
    },
    "2488": {
      "op": "*",
      "defined_out": [
        "fee_round#0",
        "tmp%1#1",
        "tmp_r#0"
      ],
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "tmp_r#0",
        "tmp%1#1"
      ]
    },
    "2489": {
      "op": "intc_3 // 1000",
      "defined_out": [
        "1000",
        "fee_round#0",
        "tmp%1#1",
        "tmp_r#0"
      ],
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "tmp_r#0",
        "tmp%1#1",
        "1000"
      ]
    },
    "2490": {
      "op": "/",
      "defined_out": [
        "base_fee#0",
        "fee_round#0",
        "tmp_r#0"
      ],
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "tmp_r#0",
        "base_fee#0"
      ]
    },
    "2491": {
      "op": "intc_0 // 0",
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "tmp_r#0",
        "base_fee#0",
        "0"
      ]
    },
    "2492": {
      "op": "bytec 9 // \"round_claim_last\"",
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "tmp_r#0",
        "base_fee#0",
        "0",
        "\"round_claim_last\""
      ]
    },
    "2494": {
      "op": "app_global_get_ex",
      "defined_out": [
        "base_fee#0",
        "fee_round#0",
        "maybe_exists%19#0",
        "round_start#0",
        "tmp_r#0"
      ],
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "tmp_r#0",
        "base_fee#0",
        "round_start#0",
        "maybe_exists%19#0"
      ]
    },
    "2495": {
      "error": "check self.round_claim_last exists",
      "op": "assert // check self.round_claim_last exists",
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "tmp_r#0",
        "base_fee#0",
        "round_start#0"
      ]
    },
    "2496": {
      "op": "uncover 2",
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "base_fee#0",
        "round_start#0",
        "tmp_r#0"
      ]
    },
    "2498": {
      "op": "swap",
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "base_fee#0",
        "tmp_r#0",
        "round_start#0"
      ]
    },
    "2499": {
      "op": "-",
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "base_fee#0",
        "tmp%0#1"
      ]
    },
    "2500": {
      "op": "frame_dig 2",
      "defined_out": [
        "base_fee#0",
        "fee_round#0",
        "fee_round_partner#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "base_fee#0",
        "tmp%0#1",
        "fee_round_partner#0"
      ]
    },
    "2502": {
      "op": "*",
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "base_fee#0",
        "tmp%1#1"
      ]
    },
    "2503": {
      "op": "intc_3 // 1000",
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "base_fee#0",
        "tmp%1#1",
        "1000"
      ]
    },
    "2504": {
      "op": "/",
      "defined_out": [
        "base_fee#0",
        "fee_round#0",
        "fee_round_partner#0",
        "partner_fee#0"
      ],
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "base_fee#0",
        "partner_fee#0"
      ]
    },
    "2505": {
      "op": "+",
      "defined_out": [
        "amt#0",
        "fee_round#0",
        "fee_round_partner#0"
      ],
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "amt#0"
      ]
    },
    "2506": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "amt#0",
        "fee_round#0",
        "fee_round_partner#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "amt#0",
        "tmp%23#0"
      ]
    },
    "2508": {
      "op": "frame_dig 0",
      "defined_out": [
        "amt#0",
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "amt#0",
        "tmp%23#0",
        "asset#0"
      ]
    },
    "2510": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "amt#0",
        "asset#0",
        "check%3#0",
        "fee_round#0",
        "fee_round_partner#0",
        "value%3#0"
      ],
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "amt#0",
        "value%3#0",
        "check%3#0"
      ]
    },
    "2512": {
      "error": "account opted into asset",
      "op": "assert // account opted into asset",
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "amt#0",
        "value%3#0"
      ]
    },
    "2513": {
      "op": ">",
      "defined_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "tmp%24#0"
      ]
    },
    "2514": {
      "error": "Contract has sufficient funds to pay the earned operational fee.",
      "op": "assert // Contract has sufficient funds to pay the earned operational fee.",
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0"
      ]
    },
    "2515": {
      "op": "b breach_pay_after_if_else@19"
    },
    "2518": {
      "block": "breach_pay_else_body@14",
      "stack_in": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "0"
      ]
    },
    "2519": {
      "op": "bytec_3 // \"round_end\"",
      "defined_out": [
        "\"round_end\"",
        "0"
      ],
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "0",
        "\"round_end\""
      ]
    },
    "2520": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%17#0",
        "tmp_r#0"
      ],
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "tmp_r#0",
        "maybe_exists%17#0"
      ]
    },
    "2521": {
      "error": "check self.round_end exists",
      "op": "assert // check self.round_end exists",
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "tmp_r#0"
      ]
    },
    "2522": {
      "op": "b breach_pay_after_if_else@15"
    },
    "2525": {
      "block": "breach_pay_bool_false@4",
      "stack_in": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "asset#0",
        "fee_round#0",
        "fee_round_partner#0",
        "fee_setup#0",
        "fee_setup_partner#0",
        "or_result%0#0"
      ]
    },
    "2526": {
      "op": "b breach_pay_bool_merge@5"
    },
    "2529": {
      "subroutine": "smart_contracts.delegator_contract.contract.DelegatorContract.breach_suspended",
      "params": {},
      "block": "breach_suspended",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "2532": {
      "op": "txn Sender"
    },
    "2534": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "2536": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "2537": {
      "error": "Can only be called by smart contract creator.",
      "op": "assert // Can only be called by smart contract creator.",
      "stack_out": []
    },
    "2538": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2539": {
      "op": "bytec_1 // \"state\"",
      "defined_out": [
        "\"state\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"state\""
      ]
    },
    "2540": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2541": {
      "error": "check self.state exists",
      "op": "assert // check self.state exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2542": {
      "op": "bytec 6 // 0x05",
      "defined_out": [
        "0x05",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0x05"
      ]
    },
    "2544": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "2545": {
      "error": "Cannot be called from other state than LIVE.",
      "op": "assert // Cannot be called from other state than LIVE.",
      "stack_out": []
    },
    "2546": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "2547": {
      "op": "bytec_3 // \"round_end\"",
      "defined_out": [
        "\"round_end\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"round_end\""
      ]
    },
    "2548": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2549": {
      "error": "check self.round_end exists",
      "op": "assert // check self.round_end exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "2550": {
      "op": "global Round",
      "defined_out": [
        "maybe_value%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "tmp%4#0"
      ]
    },
    "2552": {
      "op": ">",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "2553": {
      "error": "Cannot be called when the contract has already expired.",
      "op": "assert // Cannot be called when the contract has already expired.",
      "stack_out": []
    },
    "2554": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "2555": {
      "op": "bytec 7 // \"del_beneficiary\"",
      "defined_out": [
        "\"del_beneficiary\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"del_beneficiary\""
      ]
    },
    "2557": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2558": {
      "error": "check self.del_beneficiary exists",
      "op": "assert // check self.del_beneficiary exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "2559": {
      "op": "acct_params_get AcctIncentiveEligible",
      "defined_out": [
        "acct_incentive_eligible_raw.0#0",
        "acct_incentive_eligible_raw.1#0"
      ],
      "stack_out": [
        "acct_incentive_eligible_raw.0#0",
        "acct_incentive_eligible_raw.1#0"
      ]
    },
    "2561": {
      "op": "pop",
      "stack_out": [
        "acct_incentive_eligible_raw.0#0"
      ]
    },
    "2562": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "2563": {
      "error": "Account is still participating in consensus.",
      "op": "assert // Account is still participating in consensus.",
      "stack_out": []
    },
    "2564": {
      "callsub": "smart_contracts.delegator_contract.contract.DelegatorContract.contract_claim",
      "op": "callsub contract_claim",
      "defined_out": [
        "earnings_distribution#0"
      ],
      "stack_out": [
        "earnings_distribution#0"
      ]
    },
    "2567": {
      "op": "bytec_1 // \"state\"",
      "stack_out": [
        "earnings_distribution#0",
        "\"state\""
      ]
    },
    "2568": {
      "op": "pushbytes 0x15",
      "defined_out": [
        "\"state\"",
        "0x15",
        "earnings_distribution#0"
      ],
      "stack_out": [
        "earnings_distribution#0",
        "\"state\"",
        "0x15"
      ]
    },
    "2571": {
      "op": "app_global_put",
      "stack_out": [
        "earnings_distribution#0"
      ]
    },
    "2572": {
      "op": "bytec 8 // \"round_ended\""
    },
    "2574": {
      "op": "global Round",
      "defined_out": [
        "\"round_ended\"",
        "earnings_distribution#0",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "earnings_distribution#0",
        "\"round_ended\"",
        "new_state_value%0#0"
      ]
    },
    "2576": {
      "op": "app_global_put",
      "stack_out": [
        "earnings_distribution#0"
      ]
    },
    "2577": {
      "op": "intc_0 // 0",
      "stack_out": [
        "earnings_distribution#0",
        "0"
      ]
    },
    "2578": {
      "op": "bytec_2 // \"del_manager\"",
      "defined_out": [
        "\"del_manager\"",
        "0",
        "earnings_distribution#0"
      ],
      "stack_out": [
        "earnings_distribution#0",
        "0",
        "\"del_manager\""
      ]
    },
    "2579": {
      "op": "app_global_get_ex",
      "defined_out": [
        "earnings_distribution#0",
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "earnings_distribution#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "2580": {
      "error": "check self.del_manager exists",
      "op": "assert // check self.del_manager exists",
      "stack_out": [
        "earnings_distribution#0",
        "maybe_value%3#0"
      ]
    },
    "2581": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "2582": {
      "op": "pushbytes 0x4d6573736167652066726f6d2056616c61723a20546865206e6574776f726b206861732073757370656e64656420796f7572206163636f756e742066726f6d207374616b696e672e20596f7520646f6e2774207374616b6520616e796d6f72652e202020",
      "defined_out": [
        "0x4d6573736167652066726f6d2056616c61723a20546865206e6574776f726b206861732073757370656e64656420796f7572206163636f756e742066726f6d207374616b696e672e20596f7520646f6e2774207374616b6520616e796d6f72652e202020",
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "0x4d6573736167652066726f6d2056616c61723a20546865206e6574776f726b206861732073757370656e64656420796f7572206163636f756e742066726f6d207374616b696e672e20596f7520646f6e2774207374616b6520616e796d6f72652e202020"
      ]
    },
    "2684": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0"
      ]
    },
    "2685": {
      "retsub": true,
      "op": "retsub"
    },
    "2686": {
      "subroutine": "smart_contracts.delegator_contract.contract.DelegatorContract.contract_claim",
      "params": {},
      "block": "contract_claim",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "2689": {
      "op": "txn Sender"
    },
    "2691": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "2693": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "2694": {
      "error": "Can only be called by smart contract creator.",
      "op": "assert // Can only be called by smart contract creator.",
      "stack_out": []
    },
    "2695": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2696": {
      "op": "bytec_1 // \"state\"",
      "defined_out": [
        "\"state\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"state\""
      ]
    },
    "2697": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2698": {
      "error": "check self.state exists",
      "op": "assert // check self.state exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2699": {
      "op": "bytec 6 // 0x05",
      "defined_out": [
        "0x05",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0x05"
      ]
    },
    "2701": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "2702": {
      "error": "Cannot be called from other state than LIVE.",
      "op": "assert // Cannot be called from other state than LIVE.",
      "stack_out": []
    },
    "2703": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "2704": {
      "op": "bytec 9 // \"round_claim_last\"",
      "defined_out": [
        "\"round_claim_last\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"round_claim_last\""
      ]
    },
    "2706": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2707": {
      "error": "check self.round_claim_last exists",
      "op": "assert // check self.round_claim_last exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "2708": {
      "op": "global Round",
      "defined_out": [
        "maybe_value%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "tmp%4#0"
      ]
    },
    "2710": {
      "op": "<",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "2711": {
      "error": "Operational fee has already been claimed up to this round.",
      "op": "assert // Operational fee has already been claimed up to this round.",
      "stack_out": []
    },
    "2712": {
      "op": "global Round",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "2714": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%6#0",
        "0"
      ]
    },
    "2715": {
      "op": "bytec_3 // \"round_end\"",
      "defined_out": [
        "\"round_end\"",
        "0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "0",
        "\"round_end\""
      ]
    },
    "2716": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2717": {
      "error": "check self.round_end exists",
      "op": "assert // check self.round_end exists",
      "stack_out": [
        "tmp%6#0",
        "maybe_value%2#0"
      ]
    },
    "2718": {
      "op": ">",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "2719": {
      "op": "bz contract_claim_else_body@2",
      "stack_out": []
    },
    "2722": {
      "op": "intc_0 // 0"
    },
    "2723": {
      "op": "bytec_3 // \"round_end\""
    },
    "2724": {
      "op": "app_global_get_ex"
    },
    "2725": {
      "error": "check self.round_end exists",
      "op": "assert // check self.round_end exists"
    },
    "2726": {
      "block": "contract_claim_after_if_else@3",
      "stack_in": [
        "round_claim_to#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "round_claim_to#0",
        "0"
      ]
    },
    "2727": {
      "op": "bytec_0 // \"G\"",
      "defined_out": [
        "\"G\"",
        "0"
      ],
      "stack_out": [
        "round_claim_to#0",
        "0",
        "\"G\""
      ]
    },
    "2728": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "round_claim_to#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "2729": {
      "error": "check self.delegation_terms_general exists",
      "op": "assert // check self.delegation_terms_general exists",
      "stack_out": [
        "round_claim_to#0",
        "maybe_value%4#0"
      ]
    },
    "2730": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "round_claim_to#0",
        "tmp%8#0"
      ]
    },
    "2733": {
      "op": "btoi",
      "defined_out": [
        "fee_round#0"
      ],
      "stack_out": [
        "round_claim_to#0",
        "fee_round#0"
      ]
    },
    "2734": {
      "op": "intc_0 // 0",
      "stack_out": [
        "round_claim_to#0",
        "fee_round#0",
        "0"
      ]
    },
    "2735": {
      "op": "bytec 9 // \"round_claim_last\"",
      "defined_out": [
        "\"round_claim_last\"",
        "0",
        "fee_round#0"
      ],
      "stack_out": [
        "round_claim_to#0",
        "fee_round#0",
        "0",
        "\"round_claim_last\""
      ]
    },
    "2737": {
      "op": "app_global_get_ex",
      "defined_out": [
        "fee_round#0",
        "maybe_exists%5#0",
        "round_start#0"
      ],
      "stack_out": [
        "round_claim_to#0",
        "fee_round#0",
        "round_start#0",
        "maybe_exists%5#0"
      ]
    },
    "2738": {
      "error": "check self.round_claim_last exists",
      "op": "assert // check self.round_claim_last exists",
      "stack_out": [
        "round_claim_to#0",
        "fee_round#0",
        "round_start#0"
      ]
    },
    "2739": {
      "op": "dig 2",
      "defined_out": [
        "fee_round#0",
        "round_claim_to#0",
        "round_claim_to#0 (copy)",
        "round_start#0"
      ],
      "stack_out": [
        "round_claim_to#0",
        "fee_round#0",
        "round_start#0",
        "round_claim_to#0 (copy)"
      ]
    },
    "2741": {
      "op": "swap",
      "stack_out": [
        "round_claim_to#0",
        "fee_round#0",
        "round_claim_to#0 (copy)",
        "round_start#0"
      ]
    },
    "2742": {
      "op": "-",
      "defined_out": [
        "fee_round#0",
        "round_claim_to#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "round_claim_to#0",
        "fee_round#0",
        "tmp%0#1"
      ]
    },
    "2743": {
      "op": "*",
      "defined_out": [
        "round_claim_to#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "round_claim_to#0",
        "tmp%1#1"
      ]
    },
    "2744": {
      "op": "intc_3 // 1000",
      "defined_out": [
        "1000",
        "round_claim_to#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "round_claim_to#0",
        "tmp%1#1",
        "1000"
      ]
    },
    "2745": {
      "op": "/",
      "defined_out": [
        "fee_operational_earned#0",
        "round_claim_to#0"
      ],
      "stack_out": [
        "round_claim_to#0",
        "fee_operational_earned#0"
      ]
    },
    "2746": {
      "op": "intc_0 // 0",
      "stack_out": [
        "round_claim_to#0",
        "fee_operational_earned#0",
        "0"
      ]
    },
    "2747": {
      "op": "bytec_0 // \"G\"",
      "stack_out": [
        "round_claim_to#0",
        "fee_operational_earned#0",
        "0",
        "\"G\""
      ]
    },
    "2748": {
      "op": "app_global_get_ex",
      "defined_out": [
        "fee_operational_earned#0",
        "maybe_exists%6#0",
        "maybe_value%6#0",
        "round_claim_to#0"
      ],
      "stack_out": [
        "round_claim_to#0",
        "fee_operational_earned#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "2749": {
      "error": "check self.delegation_terms_general exists",
      "op": "assert // check self.delegation_terms_general exists",
      "stack_out": [
        "round_claim_to#0",
        "fee_operational_earned#0",
        "maybe_value%6#0"
      ]
    },
    "2750": {
      "error": "Index access is out of bounds",
      "op": "extract 64 8 // on error: Index access is out of bounds",
      "defined_out": [
        "fee_operational_earned#0",
        "round_claim_to#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "round_claim_to#0",
        "fee_operational_earned#0",
        "tmp%10#0"
      ]
    },
    "2753": {
      "op": "btoi",
      "stack_out": [
        "round_claim_to#0",
        "fee_operational_earned#0",
        "fee_round#0"
      ]
    },
    "2754": {
      "op": "intc_0 // 0",
      "stack_out": [
        "round_claim_to#0",
        "fee_operational_earned#0",
        "fee_round#0",
        "0"
      ]
    },
    "2755": {
      "op": "bytec 9 // \"round_claim_last\"",
      "stack_out": [
        "round_claim_to#0",
        "fee_operational_earned#0",
        "fee_round#0",
        "0",
        "\"round_claim_last\""
      ]
    },
    "2757": {
      "op": "app_global_get_ex",
      "defined_out": [
        "fee_operational_earned#0",
        "fee_round#0",
        "maybe_exists%7#0",
        "round_claim_to#0",
        "round_start#0"
      ],
      "stack_out": [
        "round_claim_to#0",
        "fee_operational_earned#0",
        "fee_round#0",
        "round_start#0",
        "maybe_exists%7#0"
      ]
    },
    "2758": {
      "error": "check self.round_claim_last exists",
      "op": "assert // check self.round_claim_last exists",
      "stack_out": [
        "round_claim_to#0",
        "fee_operational_earned#0",
        "fee_round#0",
        "round_start#0"
      ]
    },
    "2759": {
      "op": "dig 3",
      "stack_out": [
        "round_claim_to#0",
        "fee_operational_earned#0",
        "fee_round#0",
        "round_start#0",
        "round_claim_to#0 (copy)"
      ]
    },
    "2761": {
      "op": "swap",
      "stack_out": [
        "round_claim_to#0",
        "fee_operational_earned#0",
        "fee_round#0",
        "round_claim_to#0 (copy)",
        "round_start#0"
      ]
    },
    "2762": {
      "op": "-",
      "stack_out": [
        "round_claim_to#0",
        "fee_operational_earned#0",
        "fee_round#0",
        "tmp%0#1"
      ]
    },
    "2763": {
      "op": "*",
      "stack_out": [
        "round_claim_to#0",
        "fee_operational_earned#0",
        "tmp%1#1"
      ]
    },
    "2764": {
      "op": "intc_3 // 1000",
      "stack_out": [
        "round_claim_to#0",
        "fee_operational_earned#0",
        "tmp%1#1",
        "1000"
      ]
    },
    "2765": {
      "op": "/",
      "defined_out": [
        "fee_operational_earned#0",
        "fee_operational_earned_partner#0",
        "round_claim_to#0"
      ],
      "stack_out": [
        "round_claim_to#0",
        "fee_operational_earned#0",
        "fee_operational_earned_partner#0"
      ]
    },
    "2766": {
      "callsub": "smart_contracts.delegator_contract.contract.DelegatorContract._distribute_earnings",
      "op": "callsub _distribute_earnings",
      "defined_out": [
        "earnings_distribution#0",
        "round_claim_to#0"
      ],
      "stack_out": [
        "round_claim_to#0",
        "earnings_distribution#0"
      ]
    },
    "2769": {
      "op": "bytec 9 // \"round_claim_last\"",
      "stack_out": [
        "round_claim_to#0",
        "earnings_distribution#0",
        "\"round_claim_last\""
      ]
    },
    "2771": {
      "op": "uncover 2",
      "stack_out": [
        "earnings_distribution#0",
        "\"round_claim_last\"",
        "round_claim_to#0"
      ]
    },
    "2773": {
      "op": "app_global_put",
      "stack_out": [
        "earnings_distribution#0"
      ]
    },
    "2774": {
      "retsub": true,
      "op": "retsub"
    },
    "2775": {
      "block": "contract_claim_else_body@2",
      "stack_in": [],
      "op": "global Round",
      "defined_out": [
        "round_claim_to#0"
      ],
      "stack_out": [
        "round_claim_to#0"
      ]
    },
    "2777": {
      "op": "b contract_claim_after_if_else@3"
    },
    "2780": {
      "subroutine": "smart_contracts.delegator_contract.contract.DelegatorContract._distribute_earnings",
      "params": {
        "amount#0": "uint64",
        "amount_partner#0": "uint64"
      },
      "block": "_distribute_earnings",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2783": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2784": {
      "op": "bytec_0 // \"G\"",
      "defined_out": [
        "\"G\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"G\""
      ]
    },
    "2785": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2786": {
      "error": "check self.delegation_terms_general exists",
      "op": "assert // check self.delegation_terms_general exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2787": {
      "error": "Index access is out of bounds",
      "op": "extract 24 8 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2790": {
      "op": "btoi",
      "defined_out": [
        "asset#0"
      ],
      "stack_out": [
        "asset#0"
      ]
    },
    "2791": {
      "op": "dup",
      "defined_out": [
        "asset#0"
      ],
      "stack_out": [
        "asset#0",
        "asset#0"
      ]
    },
    "2792": {
      "op": "intc_0 // 0",
      "stack_out": [
        "asset#0",
        "asset#0",
        "0"
      ]
    },
    "2793": {
      "op": "bytec 18 // \"validator_ad_app_id\"",
      "defined_out": [
        "\"validator_ad_app_id\"",
        "0",
        "asset#0"
      ],
      "stack_out": [
        "asset#0",
        "asset#0",
        "0",
        "\"validator_ad_app_id\""
      ]
    },
    "2795": {
      "op": "app_global_get_ex",
      "defined_out": [
        "asset#0",
        "maybe_exists%1#0",
        "val_app#0"
      ],
      "stack_out": [
        "asset#0",
        "asset#0",
        "val_app#0",
        "maybe_exists%1#0"
      ]
    },
    "2796": {
      "op": "swap",
      "stack_out": [
        "asset#0",
        "asset#0",
        "maybe_exists%1#0",
        "val_app#0"
      ]
    },
    "2797": {
      "op": "cover 2",
      "defined_out": [
        "asset#0",
        "maybe_exists%1#0",
        "val_app#0"
      ],
      "stack_out": [
        "asset#0",
        "val_app#0",
        "asset#0",
        "maybe_exists%1#0"
      ]
    },
    "2799": {
      "error": "check self.validator_ad_app_id exists",
      "op": "assert // check self.validator_ad_app_id exists",
      "stack_out": [
        "asset#0",
        "val_app#0",
        "asset#0"
      ]
    },
    "2800": {
      "op": "intc_0 // 0",
      "stack_out": [
        "asset#0",
        "val_app#0",
        "asset#0",
        "0"
      ]
    },
    "2801": {
      "op": "bytec 17 // \"noticeboard_app_id\"",
      "defined_out": [
        "\"noticeboard_app_id\"",
        "0",
        "asset#0",
        "val_app#0"
      ],
      "stack_out": [
        "asset#0",
        "val_app#0",
        "asset#0",
        "0",
        "\"noticeboard_app_id\""
      ]
    },
    "2803": {
      "op": "app_global_get_ex",
      "defined_out": [
        "asset#0",
        "maybe_exists%2#0",
        "pla_app#0",
        "val_app#0"
      ],
      "stack_out": [
        "asset#0",
        "val_app#0",
        "asset#0",
        "pla_app#0",
        "maybe_exists%2#0"
      ]
    },
    "2804": {
      "op": "swap",
      "stack_out": [
        "asset#0",
        "val_app#0",
        "asset#0",
        "maybe_exists%2#0",
        "pla_app#0"
      ]
    },
    "2805": {
      "op": "cover 2",
      "stack_out": [
        "asset#0",
        "val_app#0",
        "pla_app#0",
        "asset#0",
        "maybe_exists%2#0"
      ]
    },
    "2807": {
      "error": "check self.noticeboard_app_id exists",
      "op": "assert // check self.noticeboard_app_id exists",
      "stack_out": [
        "asset#0",
        "val_app#0",
        "pla_app#0",
        "asset#0"
      ]
    },
    "2808": {
      "op": "intc_0 // 0",
      "stack_out": [
        "asset#0",
        "val_app#0",
        "pla_app#0",
        "asset#0",
        "0"
      ]
    },
    "2809": {
      "op": "bytec_0 // \"G\"",
      "stack_out": [
        "asset#0",
        "val_app#0",
        "pla_app#0",
        "asset#0",
        "0",
        "\"G\""
      ]
    },
    "2810": {
      "op": "app_global_get_ex",
      "defined_out": [
        "asset#0",
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "pla_app#0",
        "val_app#0"
      ],
      "stack_out": [
        "asset#0",
        "val_app#0",
        "pla_app#0",
        "asset#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "2811": {
      "error": "check self.delegation_terms_general exists",
      "op": "assert // check self.delegation_terms_general exists",
      "stack_out": [
        "asset#0",
        "val_app#0",
        "pla_app#0",
        "asset#0",
        "maybe_value%3#0"
      ]
    },
    "2812": {
      "error": "Index access is out of bounds",
      "op": "extract 32 32 // on error: Index access is out of bounds",
      "defined_out": [
        "asset#0",
        "partner#0",
        "pla_app#0",
        "val_app#0"
      ],
      "stack_out": [
        "asset#0",
        "val_app#0",
        "pla_app#0",
        "asset#0",
        "partner#0"
      ]
    },
    "2815": {
      "op": "swap",
      "defined_out": [
        "asset#0",
        "partner#0",
        "pla_app#0",
        "val_app#0"
      ],
      "stack_out": [
        "asset#0",
        "val_app#0",
        "pla_app#0",
        "partner#0",
        "asset#0"
      ]
    },
    "2816": {
      "op": "intc_0 // 0",
      "stack_out": [
        "asset#0",
        "val_app#0",
        "pla_app#0",
        "partner#0",
        "asset#0",
        "0"
      ]
    },
    "2817": {
      "op": "bytec_0 // \"G\"",
      "stack_out": [
        "asset#0",
        "val_app#0",
        "pla_app#0",
        "partner#0",
        "asset#0",
        "0",
        "\"G\""
      ]
    },
    "2818": {
      "op": "app_global_get_ex",
      "defined_out": [
        "asset#0",
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "partner#0",
        "pla_app#0",
        "val_app#0"
      ],
      "stack_out": [
        "asset#0",
        "val_app#0",
        "pla_app#0",
        "partner#0",
        "asset#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "2819": {
      "error": "check self.delegation_terms_general exists",
      "op": "assert // check self.delegation_terms_general exists",
      "stack_out": [
        "asset#0",
        "val_app#0",
        "pla_app#0",
        "partner#0",
        "asset#0",
        "maybe_value%4#0"
      ]
    },
    "2820": {
      "error": "Index access is out of bounds",
      "op": "extract 0 8 // on error: Index access is out of bounds",
      "defined_out": [
        "asset#0",
        "partner#0",
        "pla_app#0",
        "tmp%1#0",
        "val_app#0"
      ],
      "stack_out": [
        "asset#0",
        "val_app#0",
        "pla_app#0",
        "partner#0",
        "asset#0",
        "tmp%1#0"
      ]
    },
    "2823": {
      "op": "btoi",
      "defined_out": [
        "asset#0",
        "commission#0",
        "partner#0",
        "pla_app#0",
        "val_app#0"
      ],
      "stack_out": [
        "asset#0",
        "val_app#0",
        "pla_app#0",
        "partner#0",
        "asset#0",
        "commission#0"
      ]
    },
    "2824": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "asset#0",
        "commission#0",
        "partner#0",
        "pla_app#0",
        "val_app#0"
      ],
      "stack_out": [
        "asset#0",
        "val_app#0",
        "pla_app#0",
        "partner#0",
        "asset#0",
        "commission#0",
        "amount#0 (copy)"
      ]
    },
    "2826": {
      "op": "mulw",
      "defined_out": [
        "asset#0",
        "partner#0",
        "pla_app#0",
        "tmp.0#0",
        "tmp.1#0",
        "val_app#0"
      ],
      "stack_out": [
        "asset#0",
        "val_app#0",
        "pla_app#0",
        "partner#0",
        "asset#0",
        "tmp.0#0",
        "tmp.1#0"
      ]
    },
    "2827": {
      "op": "pushint 1000000 // 1000000",
      "defined_out": [
        "1000000",
        "asset#0",
        "partner#0",
        "pla_app#0",
        "tmp.0#0",
        "tmp.1#0",
        "val_app#0"
      ],
      "stack_out": [
        "asset#0",
        "val_app#0",
        "pla_app#0",
        "partner#0",
        "asset#0",
        "tmp.0#0",
        "tmp.1#0",
        "1000000"
      ]
    },
    "2831": {
      "op": "divw",
      "defined_out": [
        "asset#0",
        "partner#0",
        "pla_app#0",
        "plat_earn#0",
        "val_app#0"
      ],
      "stack_out": [
        "asset#0",
        "val_app#0",
        "pla_app#0",
        "partner#0",
        "asset#0",
        "plat_earn#0"
      ]
    },
    "2832": {
      "op": "frame_dig -2",
      "stack_out": [
        "asset#0",
        "val_app#0",
        "pla_app#0",
        "partner#0",
        "asset#0",
        "plat_earn#0",
        "amount#0 (copy)"
      ]
    },
    "2834": {
      "op": "dig 1",
      "defined_out": [
        "amount#0 (copy)",
        "asset#0",
        "partner#0",
        "pla_app#0",
        "plat_earn#0",
        "plat_earn#0 (copy)",
        "val_app#0"
      ],
      "stack_out": [
        "asset#0",
        "val_app#0",
        "pla_app#0",
        "partner#0",
        "asset#0",
        "plat_earn#0",
        "amount#0 (copy)",
        "plat_earn#0 (copy)"
      ]
    },
    "2836": {
      "op": "-",
      "defined_out": [
        "asset#0",
        "partner#0",
        "pla_app#0",
        "plat_earn#0",
        "user_earn#0",
        "val_app#0"
      ],
      "stack_out": [
        "asset#0",
        "val_app#0",
        "pla_app#0",
        "partner#0",
        "asset#0",
        "plat_earn#0",
        "user_earn#0"
      ]
    },
    "2837": {
      "op": "itob",
      "defined_out": [
        "asset#0",
        "partner#0",
        "pla_app#0",
        "plat_earn#0",
        "val_app#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "asset#0",
        "val_app#0",
        "pla_app#0",
        "partner#0",
        "asset#0",
        "plat_earn#0",
        "val_as_bytes%0#0"
      ]
    },
    "2838": {
      "op": "swap",
      "stack_out": [
        "asset#0",
        "val_app#0",
        "pla_app#0",
        "partner#0",
        "asset#0",
        "val_as_bytes%0#0",
        "plat_earn#0"
      ]
    },
    "2839": {
      "op": "itob",
      "defined_out": [
        "asset#0",
        "partner#0",
        "pla_app#0",
        "val_app#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "asset#0",
        "val_app#0",
        "pla_app#0",
        "partner#0",
        "asset#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "2840": {
      "op": "dig 2",
      "defined_out": [
        "asset#0",
        "asset#0 (copy)",
        "partner#0",
        "pla_app#0",
        "val_app#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "asset#0",
        "val_app#0",
        "pla_app#0",
        "partner#0",
        "asset#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "asset#0 (copy)"
      ]
    },
    "2842": {
      "op": "itob",
      "defined_out": [
        "asset#0",
        "partner#0",
        "pla_app#0",
        "val_app#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "asset#0",
        "val_app#0",
        "pla_app#0",
        "partner#0",
        "asset#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ]
    },
    "2843": {
      "op": "cover 2",
      "stack_out": [
        "asset#0",
        "val_app#0",
        "pla_app#0",
        "partner#0",
        "asset#0",
        "val_as_bytes%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "2845": {
      "op": "concat",
      "defined_out": [
        "asset#0",
        "encoded_tuple_buffer%2#0",
        "partner#0",
        "pla_app#0",
        "val_app#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "asset#0",
        "val_app#0",
        "pla_app#0",
        "partner#0",
        "asset#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "2846": {
      "op": "swap",
      "stack_out": [
        "asset#0",
        "val_app#0",
        "pla_app#0",
        "partner#0",
        "asset#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%2#0"
      ]
    },
    "2847": {
      "op": "concat",
      "defined_out": [
        "asset#0",
        "earnings_distribution#0",
        "partner#0",
        "pla_app#0",
        "val_app#0"
      ],
      "stack_out": [
        "asset#0",
        "val_app#0",
        "pla_app#0",
        "partner#0",
        "asset#0",
        "earnings_distribution#0"
      ]
    },
    "2848": {
      "op": "swap",
      "defined_out": [
        "asset#0",
        "earnings_distribution#0",
        "partner#0",
        "pla_app#0",
        "val_app#0"
      ],
      "stack_out": [
        "asset#0",
        "val_app#0",
        "pla_app#0",
        "partner#0",
        "earnings_distribution#0",
        "asset#0"
      ]
    },
    "2849": {
      "op": "bz _distribute_earnings_else_body@19",
      "stack_out": [
        "asset#0",
        "val_app#0",
        "pla_app#0",
        "partner#0",
        "earnings_distribution#0"
      ]
    },
    "2852": {
      "op": "global CurrentApplicationAddress"
    },
    "2854": {
      "op": "frame_dig 0"
    },
    "2856": {
      "op": "dup"
    },
    "2857": {
      "op": "cover 2"
    },
    "2859": {
      "op": "asset_holding_get AssetBalance"
    },
    "2861": {
      "error": "account opted into asset",
      "op": "assert // account opted into asset"
    },
    "2862": {
      "op": "frame_dig -2"
    },
    "2864": {
      "op": "frame_dig -1"
    },
    "2866": {
      "op": "+"
    },
    "2867": {
      "op": ">="
    },
    "2868": {
      "error": "Earnings cannot be paid because DelegatorContract has insufficient amount.",
      "op": "assert // Earnings cannot be paid because DelegatorContract has insufficient amount."
    },
    "2869": {
      "op": "global CurrentApplicationAddress"
    },
    "2871": {
      "op": "dig 1"
    },
    "2873": {
      "op": "asset_holding_get AssetFrozen"
    },
    "2875": {
      "error": "account opted into asset",
      "op": "assert // account opted into asset"
    },
    "2876": {
      "op": "!"
    },
    "2877": {
      "error": "Earnings cannot be paid because DelegatorContract has the asset frozen.",
      "op": "assert // Earnings cannot be paid because DelegatorContract has the asset frozen."
    },
    "2878": {
      "op": "frame_dig 1"
    },
    "2880": {
      "op": "app_params_get AppAddress"
    },
    "2882": {
      "error": "application exists",
      "op": "assert // application exists"
    },
    "2883": {
      "op": "swap"
    },
    "2884": {
      "op": "asset_holding_get AssetBalance"
    },
    "2886": {
      "op": "bury 1"
    },
    "2888": {
      "op": "bz _distribute_earnings_after_if_else@6"
    },
    "2891": {
      "op": "frame_dig 1"
    },
    "2893": {
      "op": "app_params_get AppAddress"
    },
    "2895": {
      "error": "application exists",
      "op": "assert // application exists"
    },
    "2896": {
      "op": "frame_dig 0"
    },
    "2898": {
      "op": "asset_holding_get AssetFrozen"
    },
    "2900": {
      "error": "account opted into asset",
      "op": "assert // account opted into asset"
    },
    "2901": {
      "op": "bnz _distribute_earnings_after_if_else@6"
    },
    "2904": {
      "op": "itxn_begin"
    },
    "2905": {
      "op": "frame_dig 1"
    },
    "2907": {
      "op": "app_params_get AppAddress"
    },
    "2909": {
      "error": "application exists",
      "op": "assert // application exists"
    },
    "2910": {
      "op": "frame_dig 4"
    },
    "2912": {
      "error": "Index access is out of bounds",
      "op": "extract 0 8 // on error: Index access is out of bounds"
    },
    "2915": {
      "op": "btoi"
    },
    "2916": {
      "op": "itxn_field AssetAmount"
    },
    "2918": {
      "op": "itxn_field AssetReceiver"
    },
    "2920": {
      "op": "frame_dig 0"
    },
    "2922": {
      "op": "itxn_field XferAsset"
    },
    "2924": {
      "op": "intc_2 // axfer"
    },
    "2925": {
      "op": "itxn_field TypeEnum"
    },
    "2927": {
      "op": "intc_0 // 0"
    },
    "2928": {
      "op": "itxn_field Fee"
    },
    "2930": {
      "op": "itxn_submit"
    },
    "2931": {
      "block": "_distribute_earnings_after_if_else@6",
      "stack_in": [
        "asset#0",
        "val_app#0",
        "pla_app#0",
        "partner#0",
        "earnings_distribution#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "pla_app#0"
      ],
      "stack_out": [
        "asset#0",
        "val_app#0",
        "pla_app#0",
        "partner#0",
        "earnings_distribution#0",
        "pla_app#0"
      ]
    },
    "2933": {
      "op": "app_params_get AppAddress",
      "defined_out": [
        "check%6#0",
        "pla_app#0",
        "value%6#0"
      ],
      "stack_out": [
        "asset#0",
        "val_app#0",
        "pla_app#0",
        "partner#0",
        "earnings_distribution#0",
        "value%6#0",
        "check%6#0"
      ]
    },
    "2935": {
      "error": "application exists",
      "op": "assert // application exists",
      "stack_out": [
        "asset#0",
        "val_app#0",
        "pla_app#0",
        "partner#0",
        "earnings_distribution#0",
        "value%6#0"
      ]
    },
    "2936": {
      "op": "frame_dig 0",
      "defined_out": [
        "asset#0",
        "pla_app#0",
        "value%6#0"
      ],
      "stack_out": [
        "asset#0",
        "val_app#0",
        "pla_app#0",
        "partner#0",
        "earnings_distribution#0",
        "value%6#0",
        "asset#0"
      ]
    },
    "2938": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "asset#0",
        "pla_app#0",
        "tmp%12#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "asset#0",
        "val_app#0",
        "pla_app#0",
        "partner#0",
        "earnings_distribution#0",
        "tmp%12#0",
        "tmp%13#0"
      ]
    },
    "2940": {
      "op": "bury 1",
      "stack_out": [
        "asset#0",
        "val_app#0",
        "pla_app#0",
        "partner#0",
        "earnings_distribution#0",
        "tmp%13#0"
      ]
    },
    "2942": {
      "op": "bz _distribute_earnings_after_if_else@11",
      "stack_out": [
        "asset#0",
        "val_app#0",
        "pla_app#0",
        "partner#0",
        "earnings_distribution#0"
      ]
    },
    "2945": {
      "op": "frame_dig 2"
    },
    "2947": {
      "op": "app_params_get AppAddress"
    },
    "2949": {
      "error": "application exists",
      "op": "assert // application exists"
    },
    "2950": {
      "op": "frame_dig 0"
    },
    "2952": {
      "op": "asset_holding_get AssetFrozen"
    },
    "2954": {
      "error": "account opted into asset",
      "op": "assert // account opted into asset"
    },
    "2955": {
      "op": "bnz _distribute_earnings_after_if_else@11"
    },
    "2958": {
      "op": "itxn_begin"
    },
    "2959": {
      "op": "frame_dig 2"
    },
    "2961": {
      "op": "app_params_get AppAddress"
    },
    "2963": {
      "error": "application exists",
      "op": "assert // application exists"
    },
    "2964": {
      "op": "frame_dig 4"
    },
    "2966": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds"
    },
    "2969": {
      "op": "btoi"
    },
    "2970": {
      "op": "itxn_field AssetAmount"
    },
    "2972": {
      "op": "itxn_field AssetReceiver"
    },
    "2974": {
      "op": "frame_dig 0"
    },
    "2976": {
      "op": "itxn_field XferAsset"
    },
    "2978": {
      "op": "intc_2 // axfer"
    },
    "2979": {
      "op": "itxn_field TypeEnum"
    },
    "2981": {
      "op": "intc_0 // 0"
    },
    "2982": {
      "op": "itxn_field Fee"
    },
    "2984": {
      "op": "itxn_submit"
    },
    "2985": {
      "block": "_distribute_earnings_after_if_else@11",
      "stack_in": [
        "asset#0",
        "val_app#0",
        "pla_app#0",
        "partner#0",
        "earnings_distribution#0"
      ],
      "op": "frame_dig 3"
    },
    "2987": {
      "op": "global ZeroAddress",
      "defined_out": [
        "partner#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "asset#0",
        "val_app#0",
        "pla_app#0",
        "partner#0",
        "earnings_distribution#0",
        "partner#0",
        "tmp%15#0"
      ]
    },
    "2989": {
      "op": "!=",
      "defined_out": [
        "partner#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "asset#0",
        "val_app#0",
        "pla_app#0",
        "partner#0",
        "earnings_distribution#0",
        "tmp%16#0"
      ]
    },
    "2990": {
      "op": "bz _distribute_earnings_after_if_else@27",
      "stack_out": [
        "asset#0",
        "val_app#0",
        "pla_app#0",
        "partner#0",
        "earnings_distribution#0"
      ]
    },
    "2993": {
      "op": "frame_dig 3"
    },
    "2995": {
      "op": "frame_dig 0"
    },
    "2997": {
      "op": "asset_holding_get AssetBalance"
    },
    "2999": {
      "op": "bury 1"
    },
    "3001": {
      "op": "bz _distribute_earnings_after_if_else@27"
    },
    "3004": {
      "op": "frame_dig 3"
    },
    "3006": {
      "op": "frame_dig 0"
    },
    "3008": {
      "op": "asset_holding_get AssetFrozen"
    },
    "3010": {
      "error": "account opted into asset",
      "op": "assert // account opted into asset"
    },
    "3011": {
      "op": "bnz _distribute_earnings_after_if_else@27"
    },
    "3014": {
      "op": "itxn_begin"
    },
    "3015": {
      "op": "frame_dig -1"
    },
    "3017": {
      "op": "itxn_field AssetAmount"
    },
    "3019": {
      "op": "frame_dig 3"
    },
    "3021": {
      "op": "itxn_field AssetReceiver"
    },
    "3023": {
      "op": "frame_dig 0"
    },
    "3025": {
      "op": "itxn_field XferAsset"
    },
    "3027": {
      "op": "intc_2 // axfer"
    },
    "3028": {
      "op": "itxn_field TypeEnum"
    },
    "3030": {
      "op": "intc_0 // 0"
    },
    "3031": {
      "op": "itxn_field Fee"
    },
    "3033": {
      "op": "itxn_submit"
    },
    "3034": {
      "block": "_distribute_earnings_after_if_else@27",
      "stack_in": [
        "asset#0",
        "val_app#0",
        "pla_app#0",
        "partner#0",
        "earnings_distribution#0"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "earnings_distribution#0"
      ],
      "stack_out": [
        "asset#0",
        "val_app#0",
        "pla_app#0",
        "partner#0",
        "earnings_distribution#0",
        "earnings_distribution#0"
      ]
    },
    "3036": {
      "op": "frame_bury 0"
    },
    "3038": {
      "retsub": true,
      "op": "retsub"
    },
    "3039": {
      "block": "_distribute_earnings_else_body@19",
      "stack_in": [
        "asset#0",
        "val_app#0",
        "pla_app#0",
        "partner#0",
        "earnings_distribution#0"
      ],
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "asset#0",
        "val_app#0",
        "pla_app#0",
        "partner#0",
        "earnings_distribution#0",
        "tmp%19#0"
      ]
    },
    "3041": {
      "op": "acct_params_get AcctBalance",
      "defined_out": [
        "check%11#0",
        "value%11#0"
      ],
      "stack_out": [
        "asset#0",
        "val_app#0",
        "pla_app#0",
        "partner#0",
        "earnings_distribution#0",
        "value%11#0",
        "check%11#0"
      ]
    },
    "3043": {
      "error": "account funded",
      "op": "assert // account funded",
      "stack_out": [
        "asset#0",
        "val_app#0",
        "pla_app#0",
        "partner#0",
        "earnings_distribution#0",
        "value%11#0"
      ]
    },
    "3044": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%20#0",
        "value%11#0"
      ],
      "stack_out": [
        "asset#0",
        "val_app#0",
        "pla_app#0",
        "partner#0",
        "earnings_distribution#0",
        "value%11#0",
        "tmp%20#0"
      ]
    },
    "3046": {
      "op": "acct_params_get AcctMinBalance",
      "defined_out": [
        "check%12#0",
        "value%11#0",
        "value%12#0"
      ],
      "stack_out": [
        "asset#0",
        "val_app#0",
        "pla_app#0",
        "partner#0",
        "earnings_distribution#0",
        "value%11#0",
        "value%12#0",
        "check%12#0"
      ]
    },
    "3048": {
      "error": "account funded",
      "op": "assert // account funded",
      "stack_out": [
        "asset#0",
        "val_app#0",
        "pla_app#0",
        "partner#0",
        "earnings_distribution#0",
        "value%11#0",
        "value%12#0"
      ]
    },
    "3049": {
      "op": "-",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "asset#0",
        "val_app#0",
        "pla_app#0",
        "partner#0",
        "earnings_distribution#0",
        "tmp%21#0"
      ]
    },
    "3050": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "tmp%21#0"
      ],
      "stack_out": [
        "asset#0",
        "val_app#0",
        "pla_app#0",
        "partner#0",
        "earnings_distribution#0",
        "tmp%21#0",
        "amount#0 (copy)"
      ]
    },
    "3052": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "amount_partner#0 (copy)",
        "tmp%21#0"
      ],
      "stack_out": [
        "asset#0",
        "val_app#0",
        "pla_app#0",
        "partner#0",
        "earnings_distribution#0",
        "tmp%21#0",
        "amount#0 (copy)",
        "amount_partner#0 (copy)"
      ]
    },
    "3054": {
      "op": "+",
      "defined_out": [
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "asset#0",
        "val_app#0",
        "pla_app#0",
        "partner#0",
        "earnings_distribution#0",
        "tmp%21#0",
        "tmp%22#0"
      ]
    },
    "3055": {
      "op": ">=",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "asset#0",
        "val_app#0",
        "pla_app#0",
        "partner#0",
        "earnings_distribution#0",
        "tmp%23#0"
      ]
    },
    "3056": {
      "error": "Earnings cannot be paid because DelegatorContract has insufficient ALGO.",
      "op": "assert // Earnings cannot be paid because DelegatorContract has insufficient ALGO.",
      "stack_out": [
        "asset#0",
        "val_app#0",
        "pla_app#0",
        "partner#0",
        "earnings_distribution#0"
      ]
    },
    "3057": {
      "op": "itxn_begin"
    },
    "3058": {
      "op": "frame_dig 1",
      "defined_out": [
        "val_app#0"
      ],
      "stack_out": [
        "asset#0",
        "val_app#0",
        "pla_app#0",
        "partner#0",
        "earnings_distribution#0",
        "val_app#0"
      ]
    },
    "3060": {
      "op": "app_params_get AppAddress",
      "defined_out": [
        "check%13#0",
        "val_app#0",
        "value%13#0"
      ],
      "stack_out": [
        "asset#0",
        "val_app#0",
        "pla_app#0",
        "partner#0",
        "earnings_distribution#0",
        "value%13#0",
        "check%13#0"
      ]
    },
    "3062": {
      "error": "application exists",
      "op": "assert // application exists",
      "stack_out": [
        "asset#0",
        "val_app#0",
        "pla_app#0",
        "partner#0",
        "earnings_distribution#0",
        "value%13#0"
      ]
    },
    "3063": {
      "op": "frame_dig 4",
      "defined_out": [
        "earnings_distribution#0",
        "val_app#0",
        "value%13#0"
      ],
      "stack_out": [
        "asset#0",
        "val_app#0",
        "pla_app#0",
        "partner#0",
        "earnings_distribution#0",
        "value%13#0",
        "earnings_distribution#0"
      ]
    },
    "3065": {
      "op": "dup",
      "defined_out": [
        "earnings_distribution#0",
        "earnings_distribution#0 (copy)",
        "val_app#0",
        "value%13#0"
      ],
      "stack_out": [
        "asset#0",
        "val_app#0",
        "pla_app#0",
        "partner#0",
        "earnings_distribution#0",
        "value%13#0",
        "earnings_distribution#0 (copy)",
        "earnings_distribution#0 (copy)"
      ]
    },
    "3066": {
      "op": "cover 2",
      "stack_out": [
        "asset#0",
        "val_app#0",
        "pla_app#0",
        "partner#0",
        "earnings_distribution#0",
        "earnings_distribution#0",
        "value%13#0",
        "earnings_distribution#0 (copy)"
      ]
    },
    "3068": {
      "error": "Index access is out of bounds",
      "op": "extract 0 8 // on error: Index access is out of bounds",
      "defined_out": [
        "earnings_distribution#0",
        "tmp%24#0",
        "val_app#0",
        "value%13#0"
      ],
      "stack_out": [
        "asset#0",
        "val_app#0",
        "pla_app#0",
        "partner#0",
        "earnings_distribution#0",
        "earnings_distribution#0",
        "value%13#0",
        "tmp%24#0"
      ]
    },
    "3071": {
      "op": "btoi",
      "defined_out": [
        "earnings_distribution#0",
        "inner_txn_params%3%%param_Amount_idx_0#0",
        "val_app#0",
        "value%13#0"
      ],
      "stack_out": [
        "asset#0",
        "val_app#0",
        "pla_app#0",
        "partner#0",
        "earnings_distribution#0",
        "earnings_distribution#0",
        "value%13#0",
        "inner_txn_params%3%%param_Amount_idx_0#0"
      ]
    },
    "3072": {
      "op": "itxn_field Amount",
      "stack_out": [
        "asset#0",
        "val_app#0",
        "pla_app#0",
        "partner#0",
        "earnings_distribution#0",
        "earnings_distribution#0",
        "value%13#0"
      ]
    },
    "3074": {
      "op": "itxn_field Receiver",
      "stack_out": [
        "asset#0",
        "val_app#0",
        "pla_app#0",
        "partner#0",
        "earnings_distribution#0",
        "earnings_distribution#0"
      ]
    },
    "3076": {
      "op": "intc_1 // pay",
      "defined_out": [
        "earnings_distribution#0",
        "pay",
        "val_app#0"
      ],
      "stack_out": [
        "asset#0",
        "val_app#0",
        "pla_app#0",
        "partner#0",
        "earnings_distribution#0",
        "earnings_distribution#0",
        "pay"
      ]
    },
    "3077": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "asset#0",
        "val_app#0",
        "pla_app#0",
        "partner#0",
        "earnings_distribution#0",
        "earnings_distribution#0"
      ]
    },
    "3079": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "earnings_distribution#0",
        "val_app#0"
      ],
      "stack_out": [
        "asset#0",
        "val_app#0",
        "pla_app#0",
        "partner#0",
        "earnings_distribution#0",
        "earnings_distribution#0",
        "0"
      ]
    },
    "3080": {
      "op": "itxn_field Fee",
      "stack_out": [
        "asset#0",
        "val_app#0",
        "pla_app#0",
        "partner#0",
        "earnings_distribution#0",
        "earnings_distribution#0"
      ]
    },
    "3082": {
      "op": "itxn_submit"
    },
    "3083": {
      "op": "itxn_begin"
    },
    "3084": {
      "op": "frame_dig 2",
      "defined_out": [
        "earnings_distribution#0",
        "pla_app#0",
        "val_app#0"
      ],
      "stack_out": [
        "asset#0",
        "val_app#0",
        "pla_app#0",
        "partner#0",
        "earnings_distribution#0",
        "earnings_distribution#0",
        "pla_app#0"
      ]
    },
    "3086": {
      "op": "app_params_get AppAddress",
      "defined_out": [
        "check%14#0",
        "earnings_distribution#0",
        "pla_app#0",
        "val_app#0",
        "value%14#0"
      ],
      "stack_out": [
        "asset#0",
        "val_app#0",
        "pla_app#0",
        "partner#0",
        "earnings_distribution#0",
        "earnings_distribution#0",
        "value%14#0",
        "check%14#0"
      ]
    },
    "3088": {
      "error": "application exists",
      "op": "assert // application exists",
      "stack_out": [
        "asset#0",
        "val_app#0",
        "pla_app#0",
        "partner#0",
        "earnings_distribution#0",
        "earnings_distribution#0",
        "value%14#0"
      ]
    },
    "3089": {
      "op": "swap",
      "stack_out": [
        "asset#0",
        "val_app#0",
        "pla_app#0",
        "partner#0",
        "earnings_distribution#0",
        "value%14#0",
        "earnings_distribution#0"
      ]
    },
    "3090": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "earnings_distribution#0",
        "pla_app#0",
        "tmp%25#0",
        "val_app#0",
        "value%14#0"
      ],
      "stack_out": [
        "asset#0",
        "val_app#0",
        "pla_app#0",
        "partner#0",
        "earnings_distribution#0",
        "value%14#0",
        "tmp%25#0"
      ]
    },
    "3093": {
      "op": "btoi",
      "defined_out": [
        "earnings_distribution#0",
        "inner_txn_params%4%%param_Amount_idx_0#0",
        "pla_app#0",
        "val_app#0",
        "value%14#0"
      ],
      "stack_out": [
        "asset#0",
        "val_app#0",
        "pla_app#0",
        "partner#0",
        "earnings_distribution#0",
        "value%14#0",
        "inner_txn_params%4%%param_Amount_idx_0#0"
      ]
    },
    "3094": {
      "op": "itxn_field Amount",
      "stack_out": [
        "asset#0",
        "val_app#0",
        "pla_app#0",
        "partner#0",
        "earnings_distribution#0",
        "value%14#0"
      ]
    },
    "3096": {
      "op": "itxn_field Receiver",
      "stack_out": [
        "asset#0",
        "val_app#0",
        "pla_app#0",
        "partner#0",
        "earnings_distribution#0"
      ]
    },
    "3098": {
      "op": "intc_1 // pay",
      "stack_out": [
        "asset#0",
        "val_app#0",
        "pla_app#0",
        "partner#0",
        "earnings_distribution#0",
        "pay"
      ]
    },
    "3099": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "asset#0",
        "val_app#0",
        "pla_app#0",
        "partner#0",
        "earnings_distribution#0"
      ]
    },
    "3101": {
      "op": "intc_0 // 0",
      "stack_out": [
        "asset#0",
        "val_app#0",
        "pla_app#0",
        "partner#0",
        "earnings_distribution#0",
        "0"
      ]
    },
    "3102": {
      "op": "itxn_field Fee",
      "stack_out": [
        "asset#0",
        "val_app#0",
        "pla_app#0",
        "partner#0",
        "earnings_distribution#0"
      ]
    },
    "3104": {
      "op": "itxn_submit"
    },
    "3105": {
      "op": "frame_dig 3"
    },
    "3107": {
      "op": "global ZeroAddress",
      "defined_out": [
        "earnings_distribution#0",
        "partner#0",
        "pla_app#0",
        "tmp%26#0",
        "val_app#0"
      ],
      "stack_out": [
        "asset#0",
        "val_app#0",
        "pla_app#0",
        "partner#0",
        "earnings_distribution#0",
        "partner#0",
        "tmp%26#0"
      ]
    },
    "3109": {
      "op": "!=",
      "defined_out": [
        "earnings_distribution#0",
        "partner#0",
        "pla_app#0",
        "tmp%27#0",
        "val_app#0"
      ],
      "stack_out": [
        "asset#0",
        "val_app#0",
        "pla_app#0",
        "partner#0",
        "earnings_distribution#0",
        "tmp%27#0"
      ]
    },
    "3110": {
      "op": "bz _distribute_earnings_after_if_else@27",
      "stack_out": [
        "asset#0",
        "val_app#0",
        "pla_app#0",
        "partner#0",
        "earnings_distribution#0"
      ]
    },
    "3113": {
      "op": "frame_dig 3"
    },
    "3115": {
      "op": "balance"
    },
    "3116": {
      "op": "global MinBalance"
    },
    "3118": {
      "op": ">="
    },
    "3119": {
      "op": "bz _distribute_earnings_after_if_else@27"
    },
    "3122": {
      "op": "itxn_begin"
    },
    "3123": {
      "op": "frame_dig -1"
    },
    "3125": {
      "op": "itxn_field Amount"
    },
    "3127": {
      "op": "frame_dig 3"
    },
    "3129": {
      "op": "itxn_field Receiver"
    },
    "3131": {
      "op": "intc_1 // pay"
    },
    "3132": {
      "op": "itxn_field TypeEnum"
    },
    "3134": {
      "op": "intc_0 // 0"
    },
    "3135": {
      "op": "itxn_field Fee"
    },
    "3137": {
      "op": "itxn_submit"
    },
    "3138": {
      "op": "b _distribute_earnings_after_if_else@27"
    },
    "3141": {
      "subroutine": "smart_contracts.delegator_contract.contract.DelegatorContract.contract_expired",
      "params": {},
      "block": "contract_expired",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "3144": {
      "op": "txn Sender"
    },
    "3146": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "3148": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "3149": {
      "error": "Can only be called by smart contract creator.",
      "op": "assert // Can only be called by smart contract creator.",
      "stack_out": []
    },
    "3150": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "3151": {
      "op": "bytec_1 // \"state\"",
      "defined_out": [
        "\"state\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"state\""
      ]
    },
    "3152": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3153": {
      "error": "check self.state exists",
      "op": "assert // check self.state exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "3154": {
      "op": "bytec 6 // 0x05",
      "defined_out": [
        "0x05",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0x05"
      ]
    },
    "3156": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "3157": {
      "error": "Cannot be called from other state than LIVE.",
      "op": "assert // Cannot be called from other state than LIVE.",
      "stack_out": []
    },
    "3158": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "3159": {
      "op": "bytec_3 // \"round_end\"",
      "defined_out": [
        "\"round_end\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"round_end\""
      ]
    },
    "3160": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "3161": {
      "error": "check self.round_end exists",
      "op": "assert // check self.round_end exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "3162": {
      "op": "global Round",
      "defined_out": [
        "maybe_value%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "tmp%4#0"
      ]
    },
    "3164": {
      "op": "<=",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "3165": {
      "error": "Cannot be called when the contract has not yet expired.",
      "op": "assert // Cannot be called when the contract has not yet expired.",
      "stack_out": []
    },
    "3166": {
      "callsub": "smart_contracts.delegator_contract.contract.DelegatorContract.contract_claim",
      "op": "callsub contract_claim",
      "defined_out": [
        "earnings_distribution#0"
      ],
      "stack_out": [
        "earnings_distribution#0"
      ]
    },
    "3169": {
      "op": "bytec_1 // \"state\"",
      "stack_out": [
        "earnings_distribution#0",
        "\"state\""
      ]
    },
    "3170": {
      "op": "pushbytes 0x14",
      "defined_out": [
        "\"state\"",
        "0x14",
        "earnings_distribution#0"
      ],
      "stack_out": [
        "earnings_distribution#0",
        "\"state\"",
        "0x14"
      ]
    },
    "3173": {
      "op": "app_global_put",
      "stack_out": [
        "earnings_distribution#0"
      ]
    },
    "3174": {
      "op": "bytec 8 // \"round_ended\""
    },
    "3176": {
      "op": "global Round",
      "defined_out": [
        "\"round_ended\"",
        "earnings_distribution#0",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "earnings_distribution#0",
        "\"round_ended\"",
        "new_state_value%0#0"
      ]
    },
    "3178": {
      "op": "app_global_put",
      "stack_out": [
        "earnings_distribution#0"
      ]
    },
    "3179": {
      "op": "intc_0 // 0",
      "stack_out": [
        "earnings_distribution#0",
        "0"
      ]
    },
    "3180": {
      "op": "bytec_2 // \"del_manager\"",
      "defined_out": [
        "\"del_manager\"",
        "0",
        "earnings_distribution#0"
      ],
      "stack_out": [
        "earnings_distribution#0",
        "0",
        "\"del_manager\""
      ]
    },
    "3181": {
      "op": "app_global_get_ex",
      "defined_out": [
        "earnings_distribution#0",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "earnings_distribution#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "3182": {
      "error": "check self.del_manager exists",
      "op": "assert // check self.del_manager exists",
      "stack_out": [
        "earnings_distribution#0",
        "maybe_value%2#0"
      ]
    },
    "3183": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "3184": {
      "op": "pushbytes 0x4d6573736167652066726f6d2056616c61723a20596f757220636f6e747261637420746f207374616b6520776974682061206e6f64652072756e6e65722068617320656e6465642e20202020202020202020202020202020202020202020202020202020",
      "defined_out": [
        "0x4d6573736167652066726f6d2056616c61723a20596f757220636f6e747261637420746f207374616b6520776974682061206e6f64652072756e6e65722068617320656e6465642e20202020202020202020202020202020202020202020202020202020",
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "0x4d6573736167652066726f6d2056616c61723a20596f757220636f6e747261637420746f207374616b6520776974682061206e6f64652072756e6e65722068617320656e6465642e20202020202020202020202020202020202020202020202020202020"
      ]
    },
    "3286": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0"
      ]
    },
    "3287": {
      "retsub": true,
      "op": "retsub"
    },
    "3288": {
      "subroutine": "smart_contracts.delegator_contract.contract.DelegatorContract.contract_withdraw",
      "params": {
        "del_manager#0": "bytes"
      },
      "block": "contract_withdraw",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "3291": {
      "op": "txn Sender"
    },
    "3293": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "3295": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "3296": {
      "error": "Can only be called by smart contract creator.",
      "op": "assert // Can only be called by smart contract creator.",
      "stack_out": []
    },
    "3297": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "3298": {
      "op": "bytec_1 // \"state\"",
      "defined_out": [
        "\"state\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"state\""
      ]
    },
    "3299": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3300": {
      "error": "check self.state exists",
      "op": "assert // check self.state exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "3301": {
      "op": "bytec 6 // 0x05",
      "defined_out": [
        "0x05",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0x05"
      ]
    },
    "3303": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "3304": {
      "error": "Cannot be called from other state than LIVE.",
      "op": "assert // Cannot be called from other state than LIVE.",
      "stack_out": []
    },
    "3305": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "3306": {
      "op": "bytec_2 // \"del_manager\"",
      "defined_out": [
        "\"del_manager\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"del_manager\""
      ]
    },
    "3307": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "3308": {
      "error": "check self.del_manager exists",
      "op": "assert // check self.del_manager exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "3309": {
      "op": "frame_dig -1",
      "defined_out": [
        "del_manager#0 (copy)",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "del_manager#0 (copy)"
      ]
    },
    "3311": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "3312": {
      "error": "Can only be approved by delegator manager.",
      "op": "assert // Can only be approved by delegator manager.",
      "stack_out": []
    },
    "3313": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "3314": {
      "op": "bytec_3 // \"round_end\"",
      "defined_out": [
        "\"round_end\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"round_end\""
      ]
    },
    "3315": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "3316": {
      "error": "check self.round_end exists",
      "op": "assert // check self.round_end exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "3317": {
      "op": "global Round",
      "defined_out": [
        "maybe_value%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "tmp%5#0"
      ]
    },
    "3319": {
      "op": ">",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "3320": {
      "error": "Cannot be called when the contract has already expired.",
      "op": "assert // Cannot be called when the contract has already expired.",
      "stack_out": []
    },
    "3321": {
      "callsub": "smart_contracts.delegator_contract.contract.DelegatorContract.contract_claim",
      "op": "callsub contract_claim",
      "defined_out": [
        "earnings_distribution#0"
      ],
      "stack_out": [
        "earnings_distribution#0"
      ]
    },
    "3324": {
      "op": "bytec_1 // \"state\"",
      "stack_out": [
        "earnings_distribution#0",
        "\"state\""
      ]
    },
    "3325": {
      "op": "pushbytes 0x13",
      "defined_out": [
        "\"state\"",
        "0x13",
        "earnings_distribution#0"
      ],
      "stack_out": [
        "earnings_distribution#0",
        "\"state\"",
        "0x13"
      ]
    },
    "3328": {
      "op": "app_global_put",
      "stack_out": [
        "earnings_distribution#0"
      ]
    },
    "3329": {
      "op": "bytec 8 // \"round_ended\""
    },
    "3331": {
      "op": "global Round",
      "defined_out": [
        "\"round_ended\"",
        "earnings_distribution#0",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "earnings_distribution#0",
        "\"round_ended\"",
        "new_state_value%0#0"
      ]
    },
    "3333": {
      "op": "app_global_put",
      "stack_out": [
        "earnings_distribution#0"
      ]
    },
    "3334": {
      "retsub": true,
      "op": "retsub"
    },
    "3335": {
      "subroutine": "smart_contracts.delegator_contract.contract.DelegatorContract.contract_delete",
      "params": {
        "del_manager#0": "bytes"
      },
      "block": "contract_delete",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "3338": {
      "op": "txn Sender"
    },
    "3340": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "3342": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "3343": {
      "error": "Can only be called by smart contract creator.",
      "op": "assert // Can only be called by smart contract creator.",
      "stack_out": []
    },
    "3344": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "3345": {
      "op": "bytec_1 // \"state\"",
      "defined_out": [
        "\"state\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"state\""
      ]
    },
    "3346": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3347": {
      "error": "check self.state exists",
      "op": "assert // check self.state exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "3348": {
      "op": "bytec 21 // 0x10",
      "defined_out": [
        "0x10",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0x10"
      ]
    },
    "3350": {
      "op": "b&",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "3351": {
      "op": "bytec 21 // 0x10",
      "stack_out": [
        "tmp%3#0",
        "0x10"
      ]
    },
    "3353": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "3354": {
      "error": "Cannot be called from other state than ENDED_xyz.",
      "op": "assert // Cannot be called from other state than ENDED_xyz.",
      "stack_out": []
    },
    "3355": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "3356": {
      "op": "bytec_2 // \"del_manager\"",
      "defined_out": [
        "\"del_manager\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"del_manager\""
      ]
    },
    "3357": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "3358": {
      "error": "check self.del_manager exists",
      "op": "assert // check self.del_manager exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "3359": {
      "op": "frame_dig -1",
      "defined_out": [
        "del_manager#0 (copy)",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "del_manager#0 (copy)"
      ]
    },
    "3361": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "3362": {
      "error": "Can only be approved by delegator manager.",
      "op": "assert // Can only be approved by delegator manager.",
      "stack_out": []
    },
    "3363": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "3364": {
      "op": "bytec_0 // \"G\"",
      "defined_out": [
        "\"G\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"G\""
      ]
    },
    "3365": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "3366": {
      "error": "check self.delegation_terms_general exists",
      "op": "assert // check self.delegation_terms_general exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "3367": {
      "error": "Index access is out of bounds",
      "op": "extract 24 8 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "3370": {
      "op": "btoi",
      "defined_out": [
        "asset_id#0"
      ],
      "stack_out": [
        "asset_id#0"
      ]
    },
    "3371": {
      "op": "dup",
      "defined_out": [
        "asset_id#0"
      ],
      "stack_out": [
        "asset_id#0",
        "asset_id#0"
      ]
    },
    "3372": {
      "op": "bnz contract_delete_else_body@3",
      "stack_out": [
        "asset_id#0"
      ]
    },
    "3375": {
      "op": "global CurrentApplicationAddress"
    },
    "3377": {
      "op": "acct_params_get AcctBalance"
    },
    "3379": {
      "error": "account funded",
      "op": "assert // account funded"
    },
    "3380": {
      "op": "global CurrentApplicationAddress"
    },
    "3382": {
      "op": "acct_params_get AcctMinBalance"
    },
    "3384": {
      "error": "account funded",
      "op": "assert // account funded"
    },
    "3385": {
      "op": "-"
    },
    "3386": {
      "op": "dup"
    },
    "3387": {
      "op": "itxn_begin"
    },
    "3388": {
      "op": "intc_0 // 0"
    },
    "3389": {
      "op": "bytec_2 // \"del_manager\""
    },
    "3390": {
      "op": "app_global_get_ex"
    },
    "3391": {
      "error": "check self.del_manager exists",
      "op": "assert // check self.del_manager exists"
    },
    "3392": {
      "op": "itxn_field Receiver"
    },
    "3394": {
      "op": "itxn_field Amount"
    },
    "3396": {
      "op": "intc_1 // pay"
    },
    "3397": {
      "op": "itxn_field TypeEnum"
    },
    "3399": {
      "op": "intc_0 // 0"
    },
    "3400": {
      "op": "itxn_field Fee"
    },
    "3402": {
      "op": "itxn_submit"
    },
    "3403": {
      "block": "contract_delete_after_if_else@5",
      "stack_in": [
        "asset_id#0",
        "bal#0"
      ],
      "op": "itxn_begin"
    },
    "3404": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "asset_id#0",
        "bal#0",
        "0"
      ]
    },
    "3405": {
      "op": "bytec_2 // \"del_manager\"",
      "defined_out": [
        "\"del_manager\"",
        "0"
      ],
      "stack_out": [
        "asset_id#0",
        "bal#0",
        "0",
        "\"del_manager\""
      ]
    },
    "3406": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%6#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "asset_id#0",
        "bal#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "3407": {
      "error": "check self.del_manager exists",
      "op": "assert // check self.del_manager exists",
      "stack_out": [
        "asset_id#0",
        "bal#0",
        "maybe_value%6#0"
      ]
    },
    "3408": {
      "op": "intc_0 // 0",
      "stack_out": [
        "asset_id#0",
        "bal#0",
        "maybe_value%6#0",
        "0"
      ]
    },
    "3409": {
      "op": "bytec_2 // \"del_manager\"",
      "stack_out": [
        "asset_id#0",
        "bal#0",
        "maybe_value%6#0",
        "0",
        "\"del_manager\""
      ]
    },
    "3410": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%7#0",
        "maybe_value%6#0",
        "maybe_value%7#0"
      ],
      "stack_out": [
        "asset_id#0",
        "bal#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "3411": {
      "error": "check self.del_manager exists",
      "op": "assert // check self.del_manager exists",
      "stack_out": [
        "asset_id#0",
        "bal#0",
        "maybe_value%6#0",
        "maybe_value%7#0"
      ]
    },
    "3412": {
      "op": "itxn_field CloseRemainderTo",
      "stack_out": [
        "asset_id#0",
        "bal#0",
        "maybe_value%6#0"
      ]
    },
    "3414": {
      "op": "intc_0 // 0",
      "stack_out": [
        "asset_id#0",
        "bal#0",
        "maybe_value%6#0",
        "0"
      ]
    },
    "3415": {
      "op": "itxn_field Amount",
      "stack_out": [
        "asset_id#0",
        "bal#0",
        "maybe_value%6#0"
      ]
    },
    "3417": {
      "op": "itxn_field Receiver",
      "stack_out": [
        "asset_id#0",
        "bal#0"
      ]
    },
    "3419": {
      "op": "intc_1 // pay",
      "defined_out": [
        "pay"
      ],
      "stack_out": [
        "asset_id#0",
        "bal#0",
        "pay"
      ]
    },
    "3420": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "asset_id#0",
        "bal#0"
      ]
    },
    "3422": {
      "op": "intc_0 // 0",
      "stack_out": [
        "asset_id#0",
        "bal#0",
        "0"
      ]
    },
    "3423": {
      "op": "itxn_field Fee",
      "stack_out": [
        "asset_id#0",
        "bal#0"
      ]
    },
    "3425": {
      "op": "itxn_submit",
      "defined_out": [
        "bal#0"
      ]
    },
    "3426": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "asset_id#0",
        "val_as_bytes%0#0"
      ]
    },
    "3427": {
      "op": "frame_dig 0",
      "defined_out": [
        "asset_id#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "asset_id#0",
        "val_as_bytes%0#0",
        "asset_id#0"
      ]
    },
    "3429": {
      "op": "itob",
      "defined_out": [
        "asset_id#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "asset_id#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "3430": {
      "op": "concat",
      "defined_out": [
        "asset_id#0",
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "asset_id#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "3431": {
      "op": "swap"
    },
    "3432": {
      "retsub": true,
      "op": "retsub"
    },
    "3433": {
      "block": "contract_delete_else_body@3",
      "stack_in": [
        "asset_id#0"
      ],
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "asset_id#0",
        "tmp%10#0"
      ]
    },
    "3435": {
      "op": "frame_dig 0",
      "defined_out": [
        "asset_id#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "asset_id#0",
        "tmp%10#0",
        "asset_id#0"
      ]
    },
    "3437": {
      "op": "dup",
      "defined_out": [
        "asset_id#0",
        "asset_id#0 (copy)",
        "tmp%10#0"
      ],
      "stack_out": [
        "asset_id#0",
        "tmp%10#0",
        "asset_id#0 (copy)",
        "asset_id#0 (copy)"
      ]
    },
    "3438": {
      "op": "cover 2",
      "stack_out": [
        "asset_id#0",
        "asset_id#0",
        "tmp%10#0",
        "asset_id#0 (copy)"
      ]
    },
    "3440": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "asset_id#0",
        "bal#0",
        "check%2#0"
      ],
      "stack_out": [
        "asset_id#0",
        "asset_id#0",
        "bal#0",
        "check%2#0"
      ]
    },
    "3442": {
      "op": "swap",
      "stack_out": [
        "asset_id#0",
        "asset_id#0",
        "check%2#0",
        "bal#0"
      ]
    },
    "3443": {
      "op": "dup",
      "stack_out": [
        "asset_id#0",
        "asset_id#0",
        "check%2#0",
        "bal#0",
        "bal#0 (copy)"
      ]
    },
    "3444": {
      "op": "cover 2",
      "stack_out": [
        "asset_id#0",
        "asset_id#0",
        "bal#0",
        "check%2#0",
        "bal#0"
      ]
    },
    "3446": {
      "op": "cover 3",
      "defined_out": [
        "asset_id#0",
        "bal#0",
        "check%2#0"
      ],
      "stack_out": [
        "asset_id#0",
        "bal#0",
        "asset_id#0",
        "bal#0",
        "check%2#0"
      ]
    },
    "3448": {
      "error": "account opted into asset",
      "op": "assert // account opted into asset",
      "stack_out": [
        "asset_id#0",
        "bal#0",
        "asset_id#0",
        "bal#0"
      ]
    },
    "3449": {
      "op": "itxn_begin"
    },
    "3450": {
      "op": "intc_0 // 0",
      "stack_out": [
        "asset_id#0",
        "bal#0",
        "asset_id#0",
        "bal#0",
        "0"
      ]
    },
    "3451": {
      "op": "bytec_2 // \"del_manager\"",
      "defined_out": [
        "\"del_manager\"",
        "0",
        "asset_id#0",
        "bal#0"
      ],
      "stack_out": [
        "asset_id#0",
        "bal#0",
        "asset_id#0",
        "bal#0",
        "0",
        "\"del_manager\""
      ]
    },
    "3452": {
      "op": "app_global_get_ex",
      "defined_out": [
        "asset_id#0",
        "bal#0",
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "asset_id#0",
        "bal#0",
        "asset_id#0",
        "bal#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "3453": {
      "error": "check self.del_manager exists",
      "op": "assert // check self.del_manager exists",
      "stack_out": [
        "asset_id#0",
        "bal#0",
        "asset_id#0",
        "bal#0",
        "maybe_value%4#0"
      ]
    },
    "3454": {
      "op": "intc_0 // 0",
      "stack_out": [
        "asset_id#0",
        "bal#0",
        "asset_id#0",
        "bal#0",
        "maybe_value%4#0",
        "0"
      ]
    },
    "3455": {
      "op": "bytec_2 // \"del_manager\"",
      "stack_out": [
        "asset_id#0",
        "bal#0",
        "asset_id#0",
        "bal#0",
        "maybe_value%4#0",
        "0",
        "\"del_manager\""
      ]
    },
    "3456": {
      "op": "app_global_get_ex",
      "defined_out": [
        "asset_id#0",
        "bal#0",
        "maybe_exists%5#0",
        "maybe_value%4#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "asset_id#0",
        "bal#0",
        "asset_id#0",
        "bal#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "3457": {
      "error": "check self.del_manager exists",
      "op": "assert // check self.del_manager exists",
      "stack_out": [
        "asset_id#0",
        "bal#0",
        "asset_id#0",
        "bal#0",
        "maybe_value%4#0",
        "maybe_value%5#0"
      ]
    },
    "3458": {
      "op": "itxn_field AssetCloseTo",
      "stack_out": [
        "asset_id#0",
        "bal#0",
        "asset_id#0",
        "bal#0",
        "maybe_value%4#0"
      ]
    },
    "3460": {
      "op": "itxn_field AssetReceiver"
    },
    "3462": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "asset_id#0",
        "bal#0",
        "asset_id#0"
      ]
    },
    "3464": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "asset_id#0",
        "bal#0"
      ]
    },
    "3466": {
      "op": "intc_2 // axfer",
      "defined_out": [
        "asset_id#0",
        "axfer",
        "bal#0"
      ],
      "stack_out": [
        "asset_id#0",
        "bal#0",
        "axfer"
      ]
    },
    "3467": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "asset_id#0",
        "bal#0"
      ]
    },
    "3469": {
      "op": "intc_0 // 0",
      "stack_out": [
        "asset_id#0",
        "bal#0",
        "0"
      ]
    },
    "3470": {
      "op": "itxn_field Fee",
      "stack_out": [
        "asset_id#0",
        "bal#0"
      ]
    },
    "3472": {
      "op": "itxn_submit"
    },
    "3473": {
      "op": "b contract_delete_after_if_else@5"
    },
    "3476": {
      "subroutine": "smart_contracts.delegator_contract.contract.DelegatorContract.contract_report_expiry_soon",
      "params": {
        "before_expiry#0": "uint64",
        "report_period#0": "uint64"
      },
      "block": "contract_report_expiry_soon",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "3479": {
      "op": "txn Sender"
    },
    "3481": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "3483": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "3484": {
      "error": "Can only be called by smart contract creator.",
      "op": "assert // Can only be called by smart contract creator.",
      "stack_out": []
    },
    "3485": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "3486": {
      "op": "bytec_1 // \"state\"",
      "defined_out": [
        "\"state\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"state\""
      ]
    },
    "3487": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3488": {
      "error": "check self.state exists",
      "op": "assert // check self.state exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "3489": {
      "op": "bytec 6 // 0x05",
      "defined_out": [
        "0x05",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0x05"
      ]
    },
    "3491": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "3492": {
      "error": "Cannot be called from other state than LIVE.",
      "op": "assert // Cannot be called from other state than LIVE.",
      "stack_out": []
    },
    "3493": {
      "op": "global Round",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "3495": {
      "op": "frame_dig -2",
      "defined_out": [
        "before_expiry#0 (copy)",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "before_expiry#0 (copy)"
      ]
    },
    "3497": {
      "op": "+",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "3498": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%5#0",
        "0"
      ]
    },
    "3499": {
      "op": "bytec_3 // \"round_end\"",
      "defined_out": [
        "\"round_end\"",
        "0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "0",
        "\"round_end\""
      ]
    },
    "3500": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "3501": {
      "error": "check self.round_end exists",
      "op": "assert // check self.round_end exists",
      "stack_out": [
        "tmp%5#0",
        "maybe_value%1#0"
      ]
    },
    "3502": {
      "op": ">=",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "3503": {
      "error": "It is too soon to report the contract is about to expire.",
      "op": "assert // It is too soon to report the contract is about to expire.",
      "stack_out": []
    },
    "3504": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "3505": {
      "op": "bytec_3 // \"round_end\"",
      "stack_out": [
        "0",
        "\"round_end\""
      ]
    },
    "3506": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "3507": {
      "error": "check self.round_end exists",
      "op": "assert // check self.round_end exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "3508": {
      "op": "global Round",
      "defined_out": [
        "maybe_value%2#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "tmp%7#0"
      ]
    },
    "3510": {
      "op": ">",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "3511": {
      "error": "Cannot be called when the contract has already expired.",
      "op": "assert // Cannot be called when the contract has already expired.",
      "stack_out": []
    },
    "3512": {
      "op": "global Round",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "3514": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%9#0",
        "0"
      ]
    },
    "3515": {
      "op": "bytec 20 // \"round_expiry_soon_last\"",
      "defined_out": [
        "\"round_expiry_soon_last\"",
        "0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "0",
        "\"round_expiry_soon_last\""
      ]
    },
    "3517": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "3518": {
      "error": "check self.round_expiry_soon_last exists",
      "op": "assert // check self.round_expiry_soon_last exists",
      "stack_out": [
        "tmp%9#0",
        "maybe_value%3#0"
      ]
    },
    "3519": {
      "op": "frame_dig -1",
      "defined_out": [
        "maybe_value%3#0",
        "report_period#0 (copy)",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "maybe_value%3#0",
        "report_period#0 (copy)"
      ]
    },
    "3521": {
      "op": "+",
      "defined_out": [
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "3522": {
      "op": ">=",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "3523": {
      "error": "It is too soon to report again that the contract is about to expire.",
      "op": "assert // It is too soon to report again that the contract is about to expire.",
      "stack_out": []
    },
    "3524": {
      "op": "bytec 20 // \"round_expiry_soon_last\""
    },
    "3526": {
      "op": "global Round",
      "defined_out": [
        "\"round_expiry_soon_last\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "\"round_expiry_soon_last\"",
        "new_state_value%0#0"
      ]
    },
    "3528": {
      "op": "app_global_put",
      "stack_out": []
    },
    "3529": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "3530": {
      "op": "bytec_2 // \"del_manager\"",
      "defined_out": [
        "\"del_manager\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"del_manager\""
      ]
    },
    "3531": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "3532": {
      "error": "check self.del_manager exists",
      "op": "assert // check self.del_manager exists",
      "stack_out": [
        "maybe_value%4#0"
      ]
    },
    "3533": {
      "op": "pushbytes 0x4d6573736167652066726f6d2056616c61723a20596f757220636f6e747261637420746f207374616b6520776974682061206e6f64652072756e6e6572206973206578706972696e672e20436f6e736964657220657874656e64696e6720697421202020",
      "defined_out": [
        "0x4d6573736167652066726f6d2056616c61723a20596f757220636f6e747261637420746f207374616b6520776974682061206e6f64652072756e6e6572206973206578706972696e672e20436f6e736964657220657874656e64696e6720697421202020",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "0x4d6573736167652066726f6d2056616c61723a20596f757220636f6e747261637420746f207374616b6520776974682061206e6f64652072756e6e6572206973206578706972696e672e20436f6e736964657220657874656e64696e6720697421202020"
      ]
    },
    "3635": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "3636": {
      "retsub": true,
      "op": "retsub"
    },
    "3637": {
      "subroutine": "smart_contracts.delegator_contract.contract.DelegatorContract._is_eligible",
      "params": {},
      "block": "_is_eligible",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "3640": {
      "op": "intc_0 // 0",
      "stack_out": [
        "asa_id_list#0"
      ]
    },
    "3641": {
      "op": "dup",
      "stack_out": [
        "asa_id_list#0",
        "tmp%3#0"
      ]
    },
    "3642": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "asa_id_list#0",
        "tmp%3#0",
        "asa_bal#0"
      ]
    },
    "3644": {
      "op": "dupn 4",
      "stack_out": [
        "asa_id_list#0",
        "tmp%3#0",
        "asa_bal#0",
        "asset_id#0",
        "idx#0",
        "is_eligible#1",
        "is_eligible#13"
      ]
    },
    "3646": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "asa_id_list#0",
        "tmp%3#0",
        "asa_bal#0",
        "asset_id#0",
        "idx#0",
        "is_eligible#1",
        "is_eligible#13",
        "0"
      ]
    },
    "3647": {
      "op": "bytec 7 // \"del_beneficiary\"",
      "defined_out": [
        "\"del_beneficiary\"",
        "0"
      ],
      "stack_out": [
        "asa_id_list#0",
        "tmp%3#0",
        "asa_bal#0",
        "asset_id#0",
        "idx#0",
        "is_eligible#1",
        "is_eligible#13",
        "0",
        "\"del_beneficiary\""
      ]
    },
    "3649": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "asa_id_list#0",
        "tmp%3#0",
        "asa_bal#0",
        "asset_id#0",
        "idx#0",
        "is_eligible#1",
        "is_eligible#13",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3650": {
      "error": "check self.del_beneficiary exists",
      "op": "assert // check self.del_beneficiary exists",
      "stack_out": [
        "asa_id_list#0",
        "tmp%3#0",
        "asa_bal#0",
        "asset_id#0",
        "idx#0",
        "is_eligible#1",
        "is_eligible#13",
        "maybe_value%0#0"
      ]
    },
    "3651": {
      "op": "acct_params_get AcctBalance",
      "defined_out": [
        "algo_bal#0",
        "check%0#0"
      ],
      "stack_out": [
        "asa_id_list#0",
        "tmp%3#0",
        "asa_bal#0",
        "asset_id#0",
        "idx#0",
        "is_eligible#1",
        "is_eligible#13",
        "algo_bal#0",
        "check%0#0"
      ]
    },
    "3653": {
      "error": "account funded",
      "op": "assert // account funded",
      "stack_out": [
        "asa_id_list#0",
        "tmp%3#0",
        "asa_bal#0",
        "asset_id#0",
        "idx#0",
        "is_eligible#1",
        "is_eligible#13",
        "algo_bal#0"
      ]
    },
    "3654": {
      "op": "intc_0 // 0",
      "stack_out": [
        "asa_id_list#0",
        "tmp%3#0",
        "asa_bal#0",
        "asset_id#0",
        "idx#0",
        "is_eligible#1",
        "is_eligible#13",
        "algo_bal#0",
        "0"
      ]
    },
    "3655": {
      "op": "bytec 12 // \"B\"",
      "defined_out": [
        "\"B\"",
        "0",
        "algo_bal#0"
      ],
      "stack_out": [
        "asa_id_list#0",
        "tmp%3#0",
        "asa_bal#0",
        "asset_id#0",
        "idx#0",
        "is_eligible#1",
        "is_eligible#13",
        "algo_bal#0",
        "0",
        "\"B\""
      ]
    },
    "3657": {
      "op": "app_global_get_ex",
      "defined_out": [
        "algo_bal#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "asa_id_list#0",
        "tmp%3#0",
        "asa_bal#0",
        "asset_id#0",
        "idx#0",
        "is_eligible#1",
        "is_eligible#13",
        "algo_bal#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "3658": {
      "error": "check self.delegation_terms_balance exists",
      "op": "assert // check self.delegation_terms_balance exists",
      "stack_out": [
        "asa_id_list#0",
        "tmp%3#0",
        "asa_bal#0",
        "asset_id#0",
        "idx#0",
        "is_eligible#1",
        "is_eligible#13",
        "algo_bal#0",
        "maybe_value%1#0"
      ]
    },
    "3659": {
      "error": "Index access is out of bounds",
      "op": "extract 0 8 // on error: Index access is out of bounds",
      "defined_out": [
        "algo_bal#0",
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "asa_id_list#0",
        "tmp%3#0",
        "asa_bal#0",
        "asset_id#0",
        "idx#0",
        "is_eligible#1",
        "is_eligible#13",
        "algo_bal#0",
        "reinterpret_biguint%0#0"
      ]
    },
    "3662": {
      "op": "swap",
      "stack_out": [
        "asa_id_list#0",
        "tmp%3#0",
        "asa_bal#0",
        "asset_id#0",
        "idx#0",
        "is_eligible#1",
        "is_eligible#13",
        "reinterpret_biguint%0#0",
        "algo_bal#0"
      ]
    },
    "3663": {
      "op": "itob",
      "defined_out": [
        "reinterpret_biguint%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "asa_id_list#0",
        "tmp%3#0",
        "asa_bal#0",
        "asset_id#0",
        "idx#0",
        "is_eligible#1",
        "is_eligible#13",
        "reinterpret_biguint%0#0",
        "tmp%0#0"
      ]
    },
    "3664": {
      "op": "b>=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "asa_id_list#0",
        "tmp%3#0",
        "asa_bal#0",
        "asset_id#0",
        "idx#0",
        "is_eligible#1",
        "is_eligible#13",
        "tmp%1#0"
      ]
    },
    "3665": {
      "op": "bz _is_eligible_bool_false@3",
      "stack_out": [
        "asa_id_list#0",
        "tmp%3#0",
        "asa_bal#0",
        "asset_id#0",
        "idx#0",
        "is_eligible#1",
        "is_eligible#13"
      ]
    },
    "3668": {
      "op": "intc_1 // 1"
    },
    "3669": {
      "op": "frame_bury 5"
    },
    "3671": {
      "block": "_is_eligible_bool_merge@4",
      "stack_in": [
        "asa_id_list#0",
        "tmp%3#0",
        "asa_bal#0",
        "asset_id#0",
        "idx#0",
        "is_eligible#1",
        "is_eligible#13"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "asa_id_list#0",
        "tmp%3#0",
        "asa_bal#0",
        "asset_id#0",
        "idx#0",
        "is_eligible#1",
        "is_eligible#13",
        "0"
      ]
    },
    "3672": {
      "op": "bytec 12 // \"B\"",
      "defined_out": [
        "\"B\"",
        "0"
      ],
      "stack_out": [
        "asa_id_list#0",
        "tmp%3#0",
        "asa_bal#0",
        "asset_id#0",
        "idx#0",
        "is_eligible#1",
        "is_eligible#13",
        "0",
        "\"B\""
      ]
    },
    "3674": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "asa_id_list#0",
        "tmp%3#0",
        "asa_bal#0",
        "asset_id#0",
        "idx#0",
        "is_eligible#1",
        "is_eligible#13",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "3675": {
      "error": "check self.delegation_terms_balance exists",
      "op": "assert // check self.delegation_terms_balance exists",
      "stack_out": [
        "asa_id_list#0",
        "tmp%3#0",
        "asa_bal#0",
        "asset_id#0",
        "idx#0",
        "is_eligible#1",
        "is_eligible#13",
        "maybe_value%2#0"
      ]
    },
    "3676": {
      "error": "Index access is out of bounds",
      "op": "extract 24 32 // on error: Index access is out of bounds",
      "defined_out": [
        "asa_id_list#0"
      ],
      "stack_out": [
        "asa_id_list#0",
        "tmp%3#0",
        "asa_bal#0",
        "asset_id#0",
        "idx#0",
        "is_eligible#1",
        "is_eligible#13",
        "asa_id_list#0"
      ]
    },
    "3679": {
      "op": "frame_bury 0",
      "defined_out": [
        "asa_id_list#0"
      ],
      "stack_out": [
        "asa_id_list#0",
        "tmp%3#0",
        "asa_bal#0",
        "asset_id#0",
        "idx#0",
        "is_eligible#1",
        "is_eligible#13"
      ]
    },
    "3681": {
      "op": "intc_0 // 0",
      "defined_out": [
        "asa_id_list#0",
        "idx#0"
      ],
      "stack_out": [
        "asa_id_list#0",
        "tmp%3#0",
        "asa_bal#0",
        "asset_id#0",
        "idx#0",
        "is_eligible#1",
        "is_eligible#13",
        "idx#0"
      ]
    },
    "3682": {
      "op": "frame_bury 4",
      "defined_out": [
        "asa_id_list#0",
        "idx#0"
      ],
      "stack_out": [
        "asa_id_list#0",
        "tmp%3#0",
        "asa_bal#0",
        "asset_id#0",
        "idx#0",
        "is_eligible#1",
        "is_eligible#13"
      ]
    },
    "3684": {
      "block": "_is_eligible_for_header@5",
      "stack_in": [
        "asa_id_list#0",
        "tmp%3#0",
        "asa_bal#0",
        "asset_id#0",
        "idx#0",
        "is_eligible#1",
        "is_eligible#13"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "idx#0"
      ],
      "stack_out": [
        "asa_id_list#0",
        "tmp%3#0",
        "asa_bal#0",
        "asset_id#0",
        "idx#0",
        "is_eligible#1",
        "is_eligible#13",
        "idx#0"
      ]
    },
    "3686": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "idx#0"
      ],
      "stack_out": [
        "asa_id_list#0",
        "tmp%3#0",
        "asa_bal#0",
        "asset_id#0",
        "idx#0",
        "is_eligible#1",
        "is_eligible#13",
        "idx#0",
        "2"
      ]
    },
    "3688": {
      "op": "<",
      "defined_out": [
        "continue_looping%0#0",
        "idx#0"
      ],
      "stack_out": [
        "asa_id_list#0",
        "tmp%3#0",
        "asa_bal#0",
        "asset_id#0",
        "idx#0",
        "is_eligible#1",
        "is_eligible#13",
        "continue_looping%0#0"
      ]
    },
    "3689": {
      "op": "bz _is_eligible_after_for@17",
      "stack_out": [
        "asa_id_list#0",
        "tmp%3#0",
        "asa_bal#0",
        "asset_id#0",
        "idx#0",
        "is_eligible#1",
        "is_eligible#13"
      ]
    },
    "3692": {
      "op": "frame_dig 4"
    },
    "3694": {
      "op": "pushint 16 // 16"
    },
    "3696": {
      "op": "*"
    },
    "3697": {
      "op": "frame_dig 0"
    },
    "3699": {
      "op": "swap"
    },
    "3700": {
      "op": "pushint 16 // 16"
    },
    "3702": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds"
    },
    "3703": {
      "op": "dup"
    },
    "3704": {
      "op": "frame_bury 1"
    },
    "3706": {
      "error": "Index access is out of bounds",
      "op": "extract 0 8 // on error: Index access is out of bounds"
    },
    "3709": {
      "op": "btoi"
    },
    "3710": {
      "op": "dup"
    },
    "3711": {
      "op": "frame_bury 3"
    },
    "3713": {
      "op": "frame_dig 5"
    },
    "3715": {
      "op": "frame_bury 6"
    },
    "3717": {
      "op": "bz _is_eligible_after_if_else@15"
    },
    "3720": {
      "op": "intc_0 // 0"
    },
    "3721": {
      "op": "bytec 7 // \"del_beneficiary\""
    },
    "3723": {
      "op": "app_global_get_ex"
    },
    "3724": {
      "error": "check self.del_beneficiary exists",
      "op": "assert // check self.del_beneficiary exists"
    },
    "3725": {
      "op": "frame_dig 3"
    },
    "3727": {
      "op": "asset_holding_get AssetBalance"
    },
    "3729": {
      "op": "bury 1"
    },
    "3731": {
      "op": "bz _is_eligible_else_body@9"
    },
    "3734": {
      "op": "intc_0 // 0"
    },
    "3735": {
      "op": "bytec 7 // \"del_beneficiary\""
    },
    "3737": {
      "op": "app_global_get_ex"
    },
    "3738": {
      "error": "check self.del_beneficiary exists",
      "op": "assert // check self.del_beneficiary exists"
    },
    "3739": {
      "op": "frame_dig 3"
    },
    "3741": {
      "op": "asset_holding_get AssetBalance"
    },
    "3743": {
      "op": "swap"
    },
    "3744": {
      "op": "frame_bury 2"
    },
    "3746": {
      "error": "account opted into asset",
      "op": "assert // account opted into asset"
    },
    "3747": {
      "block": "_is_eligible_after_if_else@10",
      "stack_in": [
        "asa_id_list#0",
        "tmp%3#0",
        "asa_bal#0",
        "asset_id#0",
        "idx#0",
        "is_eligible#1",
        "is_eligible#13"
      ],
      "op": "frame_dig 5",
      "defined_out": [
        "is_eligible#1"
      ],
      "stack_out": [
        "asa_id_list#0",
        "tmp%3#0",
        "asa_bal#0",
        "asset_id#0",
        "idx#0",
        "is_eligible#1",
        "is_eligible#13",
        "is_eligible#1"
      ]
    },
    "3749": {
      "op": "bz _is_eligible_bool_false@13",
      "stack_out": [
        "asa_id_list#0",
        "tmp%3#0",
        "asa_bal#0",
        "asset_id#0",
        "idx#0",
        "is_eligible#1",
        "is_eligible#13"
      ]
    },
    "3752": {
      "op": "frame_dig 1"
    },
    "3754": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds"
    },
    "3757": {
      "op": "btoi"
    },
    "3758": {
      "op": "frame_dig 2"
    },
    "3760": {
      "op": "<="
    },
    "3761": {
      "op": "bz _is_eligible_bool_false@13"
    },
    "3764": {
      "op": "intc_1 // 1"
    },
    "3765": {
      "op": "frame_bury 5"
    },
    "3767": {
      "block": "_is_eligible_bool_merge@14",
      "stack_in": [
        "asa_id_list#0",
        "tmp%3#0",
        "asa_bal#0",
        "asset_id#0",
        "idx#0",
        "is_eligible#1",
        "is_eligible#13"
      ],
      "op": "frame_dig 5",
      "defined_out": [
        "is_eligible#13"
      ],
      "stack_out": [
        "asa_id_list#0",
        "tmp%3#0",
        "asa_bal#0",
        "asset_id#0",
        "idx#0",
        "is_eligible#1",
        "is_eligible#13",
        "is_eligible#13"
      ]
    },
    "3769": {
      "op": "frame_bury 6",
      "defined_out": [
        "is_eligible#13"
      ],
      "stack_out": [
        "asa_id_list#0",
        "tmp%3#0",
        "asa_bal#0",
        "asset_id#0",
        "idx#0",
        "is_eligible#1",
        "is_eligible#13"
      ]
    },
    "3771": {
      "block": "_is_eligible_after_if_else@15",
      "stack_in": [
        "asa_id_list#0",
        "tmp%3#0",
        "asa_bal#0",
        "asset_id#0",
        "idx#0",
        "is_eligible#1",
        "is_eligible#13"
      ],
      "op": "frame_dig 6",
      "defined_out": [
        "is_eligible#1"
      ],
      "stack_out": [
        "asa_id_list#0",
        "tmp%3#0",
        "asa_bal#0",
        "asset_id#0",
        "idx#0",
        "is_eligible#1",
        "is_eligible#13",
        "is_eligible#1"
      ]
    },
    "3773": {
      "op": "frame_bury 5",
      "defined_out": [
        "is_eligible#1"
      ],
      "stack_out": [
        "asa_id_list#0",
        "tmp%3#0",
        "asa_bal#0",
        "asset_id#0",
        "idx#0",
        "is_eligible#1",
        "is_eligible#13"
      ]
    },
    "3775": {
      "op": "frame_dig 4",
      "defined_out": [
        "idx#0",
        "is_eligible#1"
      ],
      "stack_out": [
        "asa_id_list#0",
        "tmp%3#0",
        "asa_bal#0",
        "asset_id#0",
        "idx#0",
        "is_eligible#1",
        "is_eligible#13",
        "idx#0"
      ]
    },
    "3777": {
      "op": "intc_1 // 1",
      "stack_out": [
        "asa_id_list#0",
        "tmp%3#0",
        "asa_bal#0",
        "asset_id#0",
        "idx#0",
        "is_eligible#1",
        "is_eligible#13",
        "idx#0",
        "1"
      ]
    },
    "3778": {
      "op": "+",
      "stack_out": [
        "asa_id_list#0",
        "tmp%3#0",
        "asa_bal#0",
        "asset_id#0",
        "idx#0",
        "is_eligible#1",
        "is_eligible#13",
        "idx#0"
      ]
    },
    "3779": {
      "op": "frame_bury 4",
      "defined_out": [
        "idx#0",
        "is_eligible#1"
      ],
      "stack_out": [
        "asa_id_list#0",
        "tmp%3#0",
        "asa_bal#0",
        "asset_id#0",
        "idx#0",
        "is_eligible#1",
        "is_eligible#13"
      ]
    },
    "3781": {
      "op": "b _is_eligible_for_header@5"
    },
    "3784": {
      "block": "_is_eligible_bool_false@13",
      "stack_in": [
        "asa_id_list#0",
        "tmp%3#0",
        "asa_bal#0",
        "asset_id#0",
        "idx#0",
        "is_eligible#1",
        "is_eligible#13"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "is_eligible#1"
      ],
      "stack_out": [
        "asa_id_list#0",
        "tmp%3#0",
        "asa_bal#0",
        "asset_id#0",
        "idx#0",
        "is_eligible#1",
        "is_eligible#13",
        "is_eligible#1"
      ]
    },
    "3785": {
      "op": "frame_bury 5",
      "defined_out": [
        "is_eligible#1"
      ],
      "stack_out": [
        "asa_id_list#0",
        "tmp%3#0",
        "asa_bal#0",
        "asset_id#0",
        "idx#0",
        "is_eligible#1",
        "is_eligible#13"
      ]
    },
    "3787": {
      "op": "b _is_eligible_bool_merge@14"
    },
    "3790": {
      "block": "_is_eligible_else_body@9",
      "stack_in": [
        "asa_id_list#0",
        "tmp%3#0",
        "asa_bal#0",
        "asset_id#0",
        "idx#0",
        "is_eligible#1",
        "is_eligible#13"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "asa_bal#0"
      ],
      "stack_out": [
        "asa_id_list#0",
        "tmp%3#0",
        "asa_bal#0",
        "asset_id#0",
        "idx#0",
        "is_eligible#1",
        "is_eligible#13",
        "asa_bal#0"
      ]
    },
    "3791": {
      "op": "frame_bury 2",
      "defined_out": [
        "asa_bal#0"
      ],
      "stack_out": [
        "asa_id_list#0",
        "tmp%3#0",
        "asa_bal#0",
        "asset_id#0",
        "idx#0",
        "is_eligible#1",
        "is_eligible#13"
      ]
    },
    "3793": {
      "op": "b _is_eligible_after_if_else@10"
    },
    "3796": {
      "block": "_is_eligible_after_for@17",
      "stack_in": [
        "asa_id_list#0",
        "tmp%3#0",
        "asa_bal#0",
        "asset_id#0",
        "idx#0",
        "is_eligible#1",
        "is_eligible#13"
      ],
      "op": "bytec 19 // 0x00",
      "defined_out": [
        "0x00"
      ],
      "stack_out": [
        "asa_id_list#0",
        "tmp%3#0",
        "asa_bal#0",
        "asset_id#0",
        "idx#0",
        "is_eligible#1",
        "is_eligible#13",
        "0x00"
      ]
    },
    "3798": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00"
      ],
      "stack_out": [
        "asa_id_list#0",
        "tmp%3#0",
        "asa_bal#0",
        "asset_id#0",
        "idx#0",
        "is_eligible#1",
        "is_eligible#13",
        "0x00",
        "0"
      ]
    },
    "3799": {
      "op": "frame_dig 5",
      "defined_out": [
        "0",
        "0x00",
        "is_eligible#1"
      ],
      "stack_out": [
        "asa_id_list#0",
        "tmp%3#0",
        "asa_bal#0",
        "asset_id#0",
        "idx#0",
        "is_eligible#1",
        "is_eligible#13",
        "0x00",
        "0",
        "is_eligible#1"
      ]
    },
    "3801": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0",
        "is_eligible#1"
      ],
      "stack_out": [
        "asa_id_list#0",
        "tmp%3#0",
        "asa_bal#0",
        "asset_id#0",
        "idx#0",
        "is_eligible#1",
        "is_eligible#13",
        "encoded_bool%0#0"
      ]
    },
    "3802": {
      "op": "frame_bury 0"
    },
    "3804": {
      "retsub": true,
      "op": "retsub"
    },
    "3805": {
      "block": "_is_eligible_bool_false@3",
      "stack_in": [
        "asa_id_list#0",
        "tmp%3#0",
        "asa_bal#0",
        "asset_id#0",
        "idx#0",
        "is_eligible#1",
        "is_eligible#13"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "is_eligible#1"
      ],
      "stack_out": [
        "asa_id_list#0",
        "tmp%3#0",
        "asa_bal#0",
        "asset_id#0",
        "idx#0",
        "is_eligible#1",
        "is_eligible#13",
        "is_eligible#1"
      ]
    },
    "3806": {
      "op": "frame_bury 5",
      "defined_out": [
        "is_eligible#1"
      ],
      "stack_out": [
        "asa_id_list#0",
        "tmp%3#0",
        "asa_bal#0",
        "asset_id#0",
        "idx#0",
        "is_eligible#1",
        "is_eligible#13"
      ]
    },
    "3808": {
      "op": "b _is_eligible_bool_merge@4"
    },
    "3811": {
      "subroutine": "smart_contracts.delegator_contract.contract.DelegatorContract._try_return_fee",
      "params": {
        "fee_asset#0": "uint64",
        "amt_return#0": "uint64"
      },
      "block": "_try_return_fee",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "3814": {
      "op": "frame_dig -2",
      "defined_out": [
        "fee_asset#0 (copy)"
      ],
      "stack_out": [
        "fee_asset#0 (copy)"
      ]
    },
    "3816": {
      "op": "bz _try_return_fee_else_body@9",
      "stack_out": []
    },
    "3819": {
      "op": "intc_0 // 0"
    },
    "3820": {
      "op": "bytec_2 // \"del_manager\""
    },
    "3821": {
      "op": "app_global_get_ex"
    },
    "3822": {
      "error": "check self.del_manager exists",
      "op": "assert // check self.del_manager exists"
    },
    "3823": {
      "op": "frame_dig -2"
    },
    "3825": {
      "op": "asset_holding_get AssetBalance"
    },
    "3827": {
      "op": "bury 1"
    },
    "3829": {
      "op": "bz _try_return_fee_after_if_else@13"
    },
    "3832": {
      "op": "intc_0 // 0"
    },
    "3833": {
      "op": "bytec_2 // \"del_manager\""
    },
    "3834": {
      "op": "app_global_get_ex"
    },
    "3835": {
      "error": "check self.del_manager exists",
      "op": "assert // check self.del_manager exists"
    },
    "3836": {
      "op": "frame_dig -2"
    },
    "3838": {
      "op": "asset_holding_get AssetFrozen"
    },
    "3840": {
      "error": "account opted into asset",
      "op": "assert // account opted into asset"
    },
    "3841": {
      "op": "bnz _try_return_fee_after_if_else@13"
    },
    "3844": {
      "op": "intc_0 // 0"
    },
    "3845": {
      "op": "bytec_2 // \"del_manager\""
    },
    "3846": {
      "op": "app_global_get_ex"
    },
    "3847": {
      "error": "check self.del_manager exists",
      "op": "assert // check self.del_manager exists"
    },
    "3848": {
      "op": "frame_dig -2"
    },
    "3850": {
      "op": "asset_holding_get AssetBalance"
    },
    "3852": {
      "error": "account opted into asset",
      "op": "assert // account opted into asset"
    },
    "3853": {
      "op": "frame_dig -1"
    },
    "3855": {
      "op": ">="
    },
    "3856": {
      "op": "bz _try_return_fee_after_if_else@13"
    },
    "3859": {
      "op": "itxn_begin"
    },
    "3860": {
      "op": "intc_0 // 0"
    },
    "3861": {
      "op": "bytec_2 // \"del_manager\""
    },
    "3862": {
      "op": "app_global_get_ex"
    },
    "3863": {
      "error": "check self.del_manager exists",
      "op": "assert // check self.del_manager exists"
    },
    "3864": {
      "op": "frame_dig -1"
    },
    "3866": {
      "op": "itxn_field AssetAmount"
    },
    "3868": {
      "op": "itxn_field AssetReceiver"
    },
    "3870": {
      "op": "frame_dig -2"
    },
    "3872": {
      "op": "itxn_field XferAsset"
    },
    "3874": {
      "op": "intc_2 // axfer"
    },
    "3875": {
      "op": "itxn_field TypeEnum"
    },
    "3877": {
      "op": "intc_0 // 0"
    },
    "3878": {
      "op": "itxn_field Fee"
    },
    "3880": {
      "op": "itxn_submit"
    },
    "3881": {
      "block": "_try_return_fee_after_if_else@13",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "3882": {
      "block": "_try_return_fee_else_body@9",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "3883": {
      "op": "bytec_2 // \"del_manager\"",
      "defined_out": [
        "\"del_manager\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"del_manager\""
      ]
    },
    "3884": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "3885": {
      "error": "check self.del_manager exists",
      "op": "assert // check self.del_manager exists",
      "stack_out": [
        "maybe_value%4#0"
      ]
    },
    "3886": {
      "op": "balance",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "3887": {
      "op": "global MinBalance",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "3889": {
      "op": ">=",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "3890": {
      "op": "bz _try_return_fee_after_if_else@13",
      "stack_out": []
    },
    "3893": {
      "op": "itxn_begin"
    },
    "3894": {
      "op": "intc_0 // 0"
    },
    "3895": {
      "op": "bytec_2 // \"del_manager\""
    },
    "3896": {
      "op": "app_global_get_ex"
    },
    "3897": {
      "error": "check self.del_manager exists",
      "op": "assert // check self.del_manager exists"
    },
    "3898": {
      "op": "frame_dig -1"
    },
    "3900": {
      "op": "itxn_field Amount"
    },
    "3902": {
      "op": "itxn_field Receiver"
    },
    "3904": {
      "op": "intc_1 // pay"
    },
    "3905": {
      "op": "itxn_field TypeEnum"
    },
    "3907": {
      "op": "intc_0 // 0"
    },
    "3908": {
      "op": "itxn_field Fee"
    },
    "3910": {
      "op": "itxn_submit"
    },
    "3911": {
      "retsub": true,
      "op": "retsub"
    }
  }
}