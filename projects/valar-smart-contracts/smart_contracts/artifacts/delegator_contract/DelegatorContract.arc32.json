{
    "hints": {
        "contract_create(address,address,uint64)uint64": {
            "call_config": {
                "no_op": "CREATE"
            }
        },
        "contract_setup(byte[32],(uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64),(uint64,uint64,uint64,(uint64,uint64)[2]),uint64)void": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "delegation_terms_general": {
                    "name": "DelegationTermsGeneral",
                    "elements": [
                        [
                            "commission",
                            "uint64"
                        ],
                        [
                            "fee_round",
                            "uint64"
                        ],
                        [
                            "fee_setup",
                            "uint64"
                        ],
                        [
                            "fee_asset_id",
                            "uint64"
                        ],
                        [
                            "partner_address",
                            "address"
                        ],
                        [
                            "fee_round_partner",
                            "uint64"
                        ],
                        [
                            "fee_setup_partner",
                            "uint64"
                        ],
                        [
                            "rounds_setup",
                            "uint64"
                        ],
                        [
                            "rounds_confirm",
                            "uint64"
                        ]
                    ]
                },
                "delegation_terms_balance": {
                    "name": "DelegationTermsBalance",
                    "elements": [
                        [
                            "stake_max",
                            "uint64"
                        ],
                        [
                            "cnt_breach_del_max",
                            "uint64"
                        ],
                        [
                            "rounds_breach",
                            "uint64"
                        ],
                        [
                            "gating_asa_list",
                            "(uint64,uint64)[2]"
                        ]
                    ]
                }
            }
        },
        "contract_pay(txn)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "keys_confirm(address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "keys_not_confirmed()(address,byte[100])": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "Message",
                    "elements": [
                        [
                            "del_manager",
                            "address"
                        ],
                        [
                            "msg",
                            "byte[100]"
                        ]
                    ]
                }
            }
        },
        "keys_not_submitted()(address,byte[100])": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "Message",
                    "elements": [
                        [
                            "del_manager",
                            "address"
                        ],
                        [
                            "msg",
                            "byte[100]"
                        ]
                    ]
                }
            }
        },
        "keys_submit((uint64,uint64,uint64,byte[32],byte[32],byte[64],address))((uint64,uint64,uint64),address,byte[100])": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "key_reg_txn_info": {
                    "name": "KeyRegTxnInfo",
                    "elements": [
                        [
                            "vote_first",
                            "uint64"
                        ],
                        [
                            "vote_last",
                            "uint64"
                        ],
                        [
                            "vote_key_dilution",
                            "uint64"
                        ],
                        [
                            "vote_pk",
                            "byte[32]"
                        ],
                        [
                            "selection_pk",
                            "byte[32]"
                        ],
                        [
                            "state_proof_pk",
                            "byte[64]"
                        ],
                        [
                            "sender",
                            "address"
                        ]
                    ]
                },
                "output": {
                    "name": "EarningsDistributionAndMessage",
                    "elements": [
                        [
                            "earnings_distribution",
                            "(uint64,uint64,uint64)"
                        ],
                        [
                            "del_manager",
                            "address"
                        ],
                        [
                            "msg",
                            "byte[100]"
                        ]
                    ]
                }
            }
        },
        "breach_limits()(bool,(uint64,uint64,uint64),address,byte[100])": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "BreachLimitsReturn",
                    "elements": [
                        [
                            "max_breach_reached",
                            "bool"
                        ],
                        [
                            "earnings_distribution",
                            "(uint64,uint64,uint64)"
                        ],
                        [
                            "del_manager",
                            "address"
                        ],
                        [
                            "msg",
                            "byte[100]"
                        ]
                    ]
                }
            }
        },
        "breach_pay()(address,byte[100])": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "Message",
                    "elements": [
                        [
                            "del_manager",
                            "address"
                        ],
                        [
                            "msg",
                            "byte[100]"
                        ]
                    ]
                }
            }
        },
        "breach_suspended()((uint64,uint64,uint64),address,byte[100])": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "EarningsDistributionAndMessage",
                    "elements": [
                        [
                            "earnings_distribution",
                            "(uint64,uint64,uint64)"
                        ],
                        [
                            "del_manager",
                            "address"
                        ],
                        [
                            "msg",
                            "byte[100]"
                        ]
                    ]
                }
            }
        },
        "contract_claim()(uint64,uint64,uint64)": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "EarningsDistribution",
                    "elements": [
                        [
                            "user",
                            "uint64"
                        ],
                        [
                            "platform",
                            "uint64"
                        ],
                        [
                            "asset_id",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "contract_expired()((uint64,uint64,uint64),address,byte[100])": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "EarningsDistributionAndMessage",
                    "elements": [
                        [
                            "earnings_distribution",
                            "(uint64,uint64,uint64)"
                        ],
                        [
                            "del_manager",
                            "address"
                        ],
                        [
                            "msg",
                            "byte[100]"
                        ]
                    ]
                }
            }
        },
        "contract_withdraw(address)(uint64,uint64,uint64)": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "EarningsDistribution",
                    "elements": [
                        [
                            "user",
                            "uint64"
                        ],
                        [
                            "platform",
                            "uint64"
                        ],
                        [
                            "asset_id",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "contract_delete(address)(uint64,uint64)": {
            "call_config": {
                "delete_application": "CALL"
            },
            "structs": {
                "output": {
                    "name": "ContractDeleteReturn",
                    "elements": [
                        [
                            "remaining_balance",
                            "uint64"
                        ],
                        [
                            "asset_id",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "contract_report_expiry_soon(uint64,uint64)(address,byte[100])": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "Message",
                    "elements": [
                        [
                            "del_manager",
                            "address"
                        ],
                        [
                            "msg",
                            "byte[100]"
                        ]
                    ]
                }
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 9,
            "num_uints": 12
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "cnt_breach_del": {
                    "type": "uint64",
                    "key": "cnt_breach_del"
                },
                "del_beneficiary": {
                    "type": "bytes",
                    "key": "del_beneficiary"
                },
                "del_manager": {
                    "type": "bytes",
                    "key": "del_manager"
                },
                "delegation_terms_balance": {
                    "type": "bytes",
                    "key": "B",
                    "descr": "Balance related delegation terms."
                },
                "delegation_terms_general": {
                    "type": "bytes",
                    "key": "G",
                    "descr": "General delegation terms."
                },
                "fee_operational": {
                    "type": "uint64",
                    "key": "fee_operational"
                },
                "fee_operational_partner": {
                    "type": "uint64",
                    "key": "fee_operational_partner"
                },
                "noticeboard_app_id": {
                    "type": "uint64",
                    "key": "noticeboard_app_id"
                },
                "round_breach_last": {
                    "type": "uint64",
                    "key": "round_breach_last"
                },
                "round_claim_last": {
                    "type": "uint64",
                    "key": "round_claim_last"
                },
                "round_end": {
                    "type": "uint64",
                    "key": "round_end"
                },
                "round_ended": {
                    "type": "uint64",
                    "key": "round_ended"
                },
                "round_expiry_soon_last": {
                    "type": "uint64",
                    "key": "round_expiry_soon_last"
                },
                "round_start": {
                    "type": "uint64",
                    "key": "round_start"
                },
                "sel_key": {
                    "type": "bytes",
                    "key": "sel_key"
                },
                "state": {
                    "type": "bytes",
                    "key": "state"
                },
                "state_proof_key": {
                    "type": "bytes",
                    "key": "state_proof_key"
                },
                "tc_sha256": {
                    "type": "bytes",
                    "key": "tc_sha256"
                },
                "validator_ad_app_id": {
                    "type": "uint64",
                    "key": "validator_ad_app_id"
                },
                "vote_key": {
                    "type": "bytes",
                    "key": "vote_key"
                },
                "vote_key_dilution": {
                    "type": "uint64",
                    "key": "vote_key_dilution"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "DelegatorContract",
        "desc": "\n    Contract between a delegator manager and a validator (a.k.a. node runner), for the latter to participate in\n    consensus on the behalf of the delegator beneficiary for specific amount of time and for a specific fee.\n    The contract terms and conditions are defined in this contract.\n    The contract also acts as an escrow account for the delegator's payment to the validator for the service.\n\n    Global state\n    ------------\n    noticeboard_app_id : UInt64\n        App ID of noticeboard platform to which this contract belongs to.\n    validator_ad_app_id : UInt64\n        App ID of validator ad to which this contract belongs to.\n\n\n    delegation_terms_general : DelegationTermsGeneral\n        General delegation terms agreed by delegator and validator to govern this contract.\n    fee_operational : UInt64\n        Calculated operational fee based on the agreed contract terms.\n    fee_operational_partner : UInt64\n        Calculated operational fee charged for convenience by the partner.\n    delegation_terms_balance : DelegationTermsBalance\n        Requirements for delegator beneficiary balance agreed by delegator and validator to govern this contract.\n\n    del_manager : Account\n        Delegator manager account.\n    del_beneficiary : UInt64\n        Delegator beneficiary account.\n\n    round_start : UInt64\n        Agreed start round of the contract, i.e. time of its creation.\n    round_end : UInt64\n        Agreed end round of the contract.\n    round_ended : UInt64\n        Actual round at which the contract ended.\n        Can be smaller than round_end in case of early contract end.\n\n    vote_key_dilution : UInt64\n        Vote key dilution parameter of the agreed participation key.\n    vote_pk = VotePk\n        Vote public key of the agreed participation key.\n    selection_pk : SelPk\n        Selection public key of the agreed participation key.\n    state_proof_pk = StateProofPk\n        State proof public key of the agreed participation key.\n\n    state : Bytes\n        State of the contract. Can be one of the following:\n            CREATED - contract has been created.\n            LIVE - contract is live.\n            READY - waiting for keys submission.\n            SET - contract terms have been set.\n            SUBMITTED - waiting for keys confirmation.\n            ENDED_NOT_SUBMITTED - keys have not been submitted in time.\n            ENDED_NOT_CONFIRMED - keys have not been confirmed in time.\n            ENDED_LIMITS - maximum number of limit breach events has been reached.\n            ENDED_WITHDREW - delegator withdrew from the contract prematurely.\n            ENDED_EXPIRED - contract has expired.\n            ENDED_SUSPENDED - delegator has been suspended by consensus.\n            ENDED_CANNOT_PAY - delegator cannot pay the validator (as funds could have been frozen and/or clawed back).\n\n    tc_sha256 : Sha256\n        Hash (i.e. SHA 256) of the Terms and Conditions defining the delegation contract concluded between the delegator\n        and validator.\n\n    cnt_breach_del : UInt64\n        Counter of limit breach events.\n    round_breach_last : UInt64\n        Number of round of last limit breach event.\n\n    round_claim_last : UInt64\n        Number of the round the operational fee was last claimed.\n\n    round_expiry_soon_last : UInt64\n        Number of the round it was last reported that the contract will expire soon.\n\n    Methods\n    -------\n    contract_create(\n        del_manager: arc4.Address,\n        del_beneficiary: arc4.Address,\n        noticeboard_app_id: UInt64,\n    ) -> Application:\n        Creates a new delegator contract and returns its app ID.\n\n    contract_setup(\n        delegation_terms_general: DelegationTermsGeneral,\n        delegation_terms_balance: DelegationTermsBalance,\n        rounds_duration: UInt64,\n    ) -> None:\n        Sets the delegation contract terms.\n\n    contract_pay(\n        txn: gtxn.Transaction,\n    ) -> None:\n        Pays the validator setup and operational fee.\n\n    keys_confirm(\n        del_manager: arc4.Address,\n    ) -> None:\n        Delegator confirms the participation keys.\n\n    keys_not_confirmed() -> Message:\n        Reports that keys have not been confirmed in time.\n\n    keys_not_submitted() -> Message:\n        Reports that keys have not been submitted in time.\n\n    keys_submit(\n        key_reg_txn_info : KeyRegTxnInfo,\n    ) -> EarningsDistributionAndMessage:\n        ValidatorAd submits the keys generated for the delegator beneficiary according to the contract terms.\n\n    breach_limits(\n    ) -> BreachLimitsReturn:\n        Reports that a limit breach event occurred.\n\n    breach_pay(\n    ) -> Message:\n        Reports that a payment for the fee cannot be made from DelegatorContract (due to freeze or claw back).\n\n    breach_suspended(\n    ) -> EarningsDistributionAndMessage:\n        Reports that the delegator beneficiary was suspended by consensus.\n\n    contract_claim(\n    ) -> EarningsDistribution:\n        Claims and distributes the operational fee of validator up to this round to the validator and noticeboard,\n        as well as to the partner.\n\n    contract_expired(\n    ) -> EarningsDistributionAndMessage:\n        Reports that a contract has expired.\n\n    contract_withdraw(\n        del_manager: arc4.Address,\n    ) -> EarningsDistribution:\n        Delegator gracefully withdraws from the contract prematurely.\n\n    contract_delete(\n        del_manager: arc4.Address,\n        updating : arc4.Bool,\n    ) -> ContractDeleteReturn:\n        Delegator deletes an ended contract and withdraws any remaining balance.\n\n    contract_report_expiry_soon(\n        before_expiry: UInt64,\n        report_period: UInt64,\n    ) -> Message:\n        Reports that the contract will expire soon.\n\n    Private methods\n    ---------------\n    _distribute_earnings(\n        amount: UInt64,\n        amount_partner: UInt64,\n    ) -> EarningsDistribution:\n        Internal method for distributing the earnings between the validator ad and the noticeboard platform,\n        as well as for distributing the earnings of the partner.\n\n    _is_eligible(\n    ) -> arc4.Bool:\n        Check if del_beneficiary meets the agreed balance limits or not\n\n    _try_return_fee(\n        fee_asset: Asset,\n        amt_return: UInt64,\n    ) -> None:\n        Tries to return the input fee amount of given asset to del_manager.\n        The fee cannot be returned if the del_manager is closed out or frozen for the given asset.\n\n    ",
        "methods": [
            {
                "name": "contract_create",
                "args": [
                    {
                        "type": "address",
                        "name": "del_manager",
                        "desc": "Manager address for the delegation contract."
                    },
                    {
                        "type": "address",
                        "name": "del_beneficiary",
                        "desc": "Beneficiary address for the delegation contract."
                    },
                    {
                        "type": "uint64",
                        "name": "noticeboard_app_id",
                        "desc": "App ID of the Noticeboard smart contract to which to tie this contract."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64",
                    "desc": "App ID of the created delegation contract application."
                },
                "desc": "Creates a new DelegatorContract.\nDefines delegator contract manager and beneficiary accounts. Defines Noticeboard and ValidatorAd app ID to which this contract belongs to."
            },
            {
                "name": "contract_setup",
                "args": [
                    {
                        "type": "byte[32]",
                        "name": "tc_sha256",
                        "desc": "Hash (i.e. SHA 256) of the Terms and Conditions defining the delegation contract concluded between the delegator and validator."
                    },
                    {
                        "type": "(uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64)",
                        "name": "delegation_terms_general",
                        "desc": "General delegation contract terms."
                    },
                    {
                        "type": "(uint64,uint64,uint64,(uint64,uint64)[2])",
                        "name": "delegation_terms_balance",
                        "desc": "Balance delegation contract terms."
                    },
                    {
                        "type": "uint64",
                        "name": "rounds_duration",
                        "desc": "Contract duration in number of rounds."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Sets the general and balance delegation contract terms.\nDefines contract start and end rounds. Opts in the payment asset if it is not ALGO."
            },
            {
                "name": "contract_pay",
                "args": [
                    {
                        "type": "txn",
                        "name": "txn",
                        "desc": "Transaction for the payment of the setup and operational fees."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Pays the validator setup and operational fee."
            },
            {
                "name": "keys_confirm",
                "args": [
                    {
                        "type": "address",
                        "name": "del_manager",
                        "desc": "Purported delegator manager account."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Delegator manager confirms that the delegator beneficiary has confirmed the submitted keys.."
            },
            {
                "name": "keys_not_confirmed",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "(address,byte[100])",
                    "desc": "Address of delegator manager."
                },
                "desc": "Reports that keys have not been confirmed in time."
            },
            {
                "name": "keys_not_submitted",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "(address,byte[100])",
                    "desc": "Address of delegator manager."
                },
                "desc": "Reports that keys have not been submitted in time."
            },
            {
                "name": "keys_submit",
                "args": [
                    {
                        "type": "(uint64,uint64,uint64,byte[32],byte[32],byte[64],address)",
                        "name": "key_reg_txn_info",
                        "desc": "Information about the generated participation keys."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "((uint64,uint64,uint64),address,byte[100])",
                    "desc": "Amount of earnings of the validator which equal the setup fee minus platform commission, amount of platform earnings from the commission, and the asset in which the earnings are denoted."
                },
                "desc": "ValidatorAd submits the keys generated for the delegator beneficiary according to the contract terms."
            },
            {
                "name": "breach_limits",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "(bool,(uint64,uint64,uint64),address,byte[100])",
                    "desc": "Boolean denoting if maximum number of breaches has already been reached (True) or not (False)."
                },
                "desc": "Reports that a limit breach event occurred."
            },
            {
                "name": "breach_pay",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "(address,byte[100])",
                    "desc": "Address of delegator manager."
                },
                "desc": "Reports that a payment for the fee cannot be made from DelegatorContract.\nThis can happen if the DelegatorContract payment asset has been frozen or clawed back by the asset manager."
            },
            {
                "name": "breach_suspended",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "((uint64,uint64,uint64),address,byte[100])",
                    "desc": "Amount of earnings of the validator which equal any unclaimed operational fee minus platform commission, amount of platform earnings from the commission, and the asset in which the earnings are denoted."
                },
                "desc": "Reports that the delegator beneficiary was suspended by consensus."
            },
            {
                "name": "contract_claim",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "(uint64,uint64,uint64)",
                    "desc": "Amount of earnings of the validator which equal any unclaimed operational fee minus platform commission, amount of platform earnings from the commission, and the asset in which the earnings are denoted."
                },
                "desc": "Claims operational fee of validator up to this round.\nCommission from the fee gets claimed by the noticeboard. Partner convenience fee gets claimed by the partner."
            },
            {
                "name": "contract_expired",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "((uint64,uint64,uint64),address,byte[100])",
                    "desc": "Amount of earnings of the validator which equal any unclaimed operational fee minus platform commission, amount of platform earnings from the commission, and the asset in which the earnings are denoted."
                },
                "desc": "Reports that a contract has expired."
            },
            {
                "name": "contract_withdraw",
                "args": [
                    {
                        "type": "address",
                        "name": "del_manager",
                        "desc": "Manager address for the delegation contract."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(uint64,uint64,uint64)",
                    "desc": "Amount of earnings of the validator which equal any unclaimed operational fee minus platform commission, amount of platform earnings from the commission, and the asset in which the earnings are denoted."
                },
                "desc": "Delegator gracefully withdraws from the contract prematurely.\nThe delegator beneficiary should issue a key deregistration transaction 320 round before this call."
            },
            {
                "name": "contract_delete",
                "args": [
                    {
                        "type": "address",
                        "name": "del_manager",
                        "desc": "Manager address for the delegation contract."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(uint64,uint64)",
                    "desc": "Balance of the fee asset that remained in the contract."
                },
                "desc": "Delegator deletes an ended contract and withdraws any remaining balance.\nThere can be non-zero balance to withdraw if someone sent the contract some balance, or if it was not possible to claim the fee by validator and/or noticeboard if they had the asset frozen."
            },
            {
                "name": "contract_report_expiry_soon",
                "args": [
                    {
                        "type": "uint64",
                        "name": "before_expiry",
                        "desc": "How many rounds before contract end can the report be made."
                    },
                    {
                        "type": "uint64",
                        "name": "report_period",
                        "desc": "How frequently can the report be made."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(address,byte[100])",
                    "desc": "Address of delegator manager."
                },
                "desc": "Reports that the contract will expire soon.\nNotification message can be triggered only a pre-defined time in advance and with limited frequency to prevent spamming."
            }
        ],
        "networks": {}
    },
    "bare_call_config": {}
}