{
    "hints": {
        "noticeboard_deploy(uint64)uint64": {
            "call_config": {
                "no_op": "CREATE"
            }
        },
        "noticeboard_suspend()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "noticeboard_migrate(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "noticeboard_set(account,account,byte[32],(uint64,uint64,uint64,uint64,uint64),(uint64,uint64,uint64,uint64),(uint64,uint64,uint64))void": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "noticeboard_fees": {
                    "name": "NoticeboardFees",
                    "elements": [
                        [
                            "commission_min",
                            "uint64"
                        ],
                        [
                            "val_user_reg",
                            "uint64"
                        ],
                        [
                            "del_user_reg",
                            "uint64"
                        ],
                        [
                            "val_ad_creation",
                            "uint64"
                        ],
                        [
                            "del_contract_creation",
                            "uint64"
                        ]
                    ]
                },
                "noticeboard_terms_timing": {
                    "name": "NoticeboardTermsTiming",
                    "elements": [
                        [
                            "rounds_duration_min_min",
                            "uint64"
                        ],
                        [
                            "rounds_duration_max_max",
                            "uint64"
                        ],
                        [
                            "before_expiry",
                            "uint64"
                        ],
                        [
                            "report_period",
                            "uint64"
                        ]
                    ]
                },
                "noticeboard_terms_node": {
                    "name": "NoticeboardTermsNodeLimits",
                    "elements": [
                        [
                            "stake_max_max",
                            "uint64"
                        ],
                        [
                            "stake_max_min",
                            "uint64"
                        ],
                        [
                            "cnt_del_max_max",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "noticeboard_key_reg((uint64,uint64,uint64,byte[32],byte[32],byte[64],address),pay)void": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "key_reg_info": {
                    "name": "KeyRegTxnInfo",
                    "elements": [
                        [
                            "vote_first",
                            "uint64"
                        ],
                        [
                            "vote_last",
                            "uint64"
                        ],
                        [
                            "vote_key_dilution",
                            "uint64"
                        ],
                        [
                            "vote_pk",
                            "byte[32]"
                        ],
                        [
                            "selection_pk",
                            "byte[32]"
                        ],
                        [
                            "state_proof_pk",
                            "byte[64]"
                        ],
                        [
                            "sender",
                            "address"
                        ]
                    ]
                }
            }
        },
        "noticeboard_optin_asa(asset,pay)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "noticeboard_config_asset(uint64,(bool,uint64,uint64,uint64),pay)void": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "asset_info": {
                    "name": "NoticeboardAssetInfo",
                    "elements": [
                        [
                            "accepted",
                            "bool"
                        ],
                        [
                            "fee_round_min_min",
                            "uint64"
                        ],
                        [
                            "fee_round_var_min",
                            "uint64"
                        ],
                        [
                            "fee_setup_min",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "noticeboard_income(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "template_load_init(byte,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "template_load_data(byte,uint64,byte[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "partner_config(address,(uint64,uint64),bool,pay)void": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "partner_commissions": {
                    "name": "PartnerCommissions",
                    "elements": [
                        [
                            "commission_setup",
                            "uint64"
                        ],
                        [
                            "commission_operational",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "gas()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "user_create(byte[4],pay)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "user_delete()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "ad_create(uint64,pay)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "ad_config(application,uint64,address,bool,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "ad_delete(application,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "ad_ready(address,application,uint64,bool)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "ad_self_disclose(application,uint64,(byte[30],byte[60],byte[2],uint64,byte[20]))void": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "val_info": {
                    "name": "ValidatorSelfDisclosure",
                    "elements": [
                        [
                            "name",
                            "byte[30]"
                        ],
                        [
                            "https",
                            "byte[60]"
                        ],
                        [
                            "country_code",
                            "byte[2]"
                        ],
                        [
                            "hw_cat",
                            "uint64"
                        ],
                        [
                            "node_version",
                            "byte[20]"
                        ]
                    ]
                }
            }
        },
        "ad_terms(application,uint64,byte[32],(uint64,uint64,uint64,uint64,uint64),(uint64,uint64,uint64,uint64,uint64),(uint64,uint64),((uint64,uint64)[2]),(uint64,uint64),uint64,pay)void": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "terms_time": {
                    "name": "ValidatorTermsTiming",
                    "elements": [
                        [
                            "rounds_setup",
                            "uint64"
                        ],
                        [
                            "rounds_confirm",
                            "uint64"
                        ],
                        [
                            "rounds_duration_min",
                            "uint64"
                        ],
                        [
                            "rounds_duration_max",
                            "uint64"
                        ],
                        [
                            "round_max_end",
                            "uint64"
                        ]
                    ]
                },
                "terms_price": {
                    "name": "ValidatorTermsPricing",
                    "elements": [
                        [
                            "commission",
                            "uint64"
                        ],
                        [
                            "fee_round_min",
                            "uint64"
                        ],
                        [
                            "fee_round_var",
                            "uint64"
                        ],
                        [
                            "fee_setup",
                            "uint64"
                        ],
                        [
                            "fee_asset_id",
                            "uint64"
                        ]
                    ]
                },
                "terms_stake": {
                    "name": "ValidatorTermsStakeLimits",
                    "elements": [
                        [
                            "stake_max",
                            "uint64"
                        ],
                        [
                            "stake_gratis",
                            "uint64"
                        ]
                    ]
                },
                "terms_reqs": {
                    "name": "ValidatorTermsGating",
                    "elements": [
                        [
                            "gating_asa_list",
                            "(uint64,uint64)[2]"
                        ]
                    ]
                },
                "terms_warn": {
                    "name": "ValidatorTermsWarnings",
                    "elements": [
                        [
                            "cnt_warning_max",
                            "uint64"
                        ],
                        [
                            "rounds_warning",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "ad_income(application,uint64,uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "ad_asa_close(application,uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "contract_create(address,uint64,uint64,address,application,uint64,uint64,byte[32],address,pay,txn)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "keys_confirm(application,uint64,address,application,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "keys_not_confirmed(address,application,uint64,address,application,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "keys_not_submitted(address,application,uint64,address,application,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "keys_submit(address,application,uint64,address,application,uint64,(uint64,uint64,uint64,byte[32],byte[32],byte[64],address))void": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "key_reg_txn_info": {
                    "name": "KeyRegTxnInfo",
                    "elements": [
                        [
                            "vote_first",
                            "uint64"
                        ],
                        [
                            "vote_last",
                            "uint64"
                        ],
                        [
                            "vote_key_dilution",
                            "uint64"
                        ],
                        [
                            "vote_pk",
                            "byte[32]"
                        ],
                        [
                            "selection_pk",
                            "byte[32]"
                        ],
                        [
                            "state_proof_pk",
                            "byte[64]"
                        ],
                        [
                            "sender",
                            "address"
                        ]
                    ]
                }
            }
        },
        "breach_limits(address,application,uint64,address,application,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "breach_pay(address,application,uint64,address,application,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "breach_suspended(address,application,uint64,address,application,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "contract_claim(address,application,uint64,address,application,uint64)(uint64,uint64,uint64)": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "EarningsDistribution",
                    "elements": [
                        [
                            "user",
                            "uint64"
                        ],
                        [
                            "platform",
                            "uint64"
                        ],
                        [
                            "asset_id",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "contract_expired(address,application,uint64,address,application,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "contract_withdraw(application,uint64,address,application,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "contract_delete(application,uint64,address,application,uint64)(uint64,uint64)": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "ContractDeleteReturn",
                    "elements": [
                        [
                            "remaining_balance",
                            "uint64"
                        ],
                        [
                            "asset_id",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "contract_report_expiry_soon(address,application,uint64,address,application,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_noticeboard_asset(uint64)(bool,uint64,uint64,uint64)": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "NoticeboardAssetInfo",
                    "elements": [
                        [
                            "accepted",
                            "bool"
                        ],
                        [
                            "fee_round_min_min",
                            "uint64"
                        ],
                        [
                            "fee_round_var_min",
                            "uint64"
                        ],
                        [
                            "fee_setup_min",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "get_noticeboard_user(address)(byte[4],byte[8],address,address,uint64[110],uint64)": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "UserInfo",
                    "elements": [
                        [
                            "role",
                            "byte[4]"
                        ],
                        [
                            "dll_name",
                            "byte[8]"
                        ],
                        [
                            "prev_user",
                            "address"
                        ],
                        [
                            "next_user",
                            "address"
                        ],
                        [
                            "app_ids",
                            "uint64[110]"
                        ],
                        [
                            "cnt_app_ids",
                            "uint64"
                        ]
                    ]
                }
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 9,
            "num_uints": 2
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "app_id_new": {
                    "type": "uint64",
                    "key": "app_id_new"
                },
                "app_id_old": {
                    "type": "uint64",
                    "key": "app_id_old"
                },
                "asset_config_manager": {
                    "type": "bytes",
                    "key": "asset_config_manager"
                },
                "dll_del": {
                    "type": "bytes",
                    "key": "dll__del"
                },
                "dll_val": {
                    "type": "bytes",
                    "key": "dll__val"
                },
                "noticeboard_fees": {
                    "type": "bytes",
                    "key": "noticeboard_fees"
                },
                "noticeboard_terms_node": {
                    "type": "bytes",
                    "key": "noticeboard_terms_node"
                },
                "noticeboard_terms_timing": {
                    "type": "bytes",
                    "key": "noticeboard_terms_timing"
                },
                "pla_manager": {
                    "type": "bytes",
                    "key": "pla_manager"
                },
                "state": {
                    "type": "bytes",
                    "key": "state"
                },
                "tc_sha256": {
                    "type": "bytes",
                    "key": "tc_sha256"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "Noticeboard",
        "desc": "\n    Platform for peer-to-peer consensus delegation.\n    Validators, i.e. node runners/operators, can post ads to offer their services to users.\n    Delegators, i.e. users/ALGO holders, can open requests for the service and conclude a contract with a validator.\n\n    Global state\n    ------------\n\n    pla_manager : Account\n        Platform manager account.\n    asset_config_manager : Account\n        Manager account that can configure assets supported by the noticeboard.\n\n    tc_sha256 : Sha256\n        Hash (i.e. SHA 256) of the Terms and Conditions.\n\n    noticeboard_fees : NoticeboardFees\n        Fees charged by the noticeboard.\n    noticeboard_terms_timing : NoticeboardTermsTiming\n        Noticeboard limits on timing terms for validator ads.\n    noticeboard_terms_node : NoticeboardTermsNodeLimits\n        Noticeboard limits on node and related stake limit terms for validator ads.\n\n    state : Bytes\n        State of the contract. Can be one of the following:\n            DEPLOYED - noticeboard contract has been deployed.\n            SET - noticeboard has been set.\n            RETIRED - noticeboard has been retired. Operations no new ads or contracts can be opened.\n\n    app_id_old : UInt64\n        The app ID of previous version of the platform.\n    app_id_new : UInt64\n        The app ID of next version of the platform.\n\n    dll_val :  UsersDoubleLinkedList\n        Information about the double linked list of validator users.\n    dll_del :  UsersDoubleLinkedList\n        Information about the double linked list of delegator users.\n\n    Box storage\n    -----------\n    assets : asset_[asset_id] = NoticeboardAssetInfo\n        Box map for storing assets that are or were supported by the noticeboard at any point of time as a means of\n        payment between validators and delegators.\n        Each entry is a NoticeboardAssetInfo, which is struct with fields:\n            - a boolean marking whether the asset is currently accepted as payment (True) or not (False).\n            - minimum pricing parameters for this asset.\n        Keys correspond to \"asset_\" followed by byte representation of ASA ID or 0 for ALGO.\n        Once an entry is created, it cannot be deleted.\n\n    user : [arc4.Address] = UserInfo\n        Box map for storing data about validator owner or delegator manager user.\n        Each entry is a UserInfo, with fields for user role, list of app IDs and its counter, as well as\n        the previous and next user of the same role in the linked list.\n        Keys correspond to user address (32 Byte).\n\n    template_del : BOX_DELEGATOR_CONTRACT_TEMPLATE_KEY = Byte\n        Box for storing the delegator contract template.\n\n    template_val : BOX_VALIDATOR_AD_TEMPLATE_KEY = Byte\n        Box for storing the validator ad template.\n\n    partner : partner_[arc4.Address] = PartnerCommissions\n        Box map for storing commissions of a partner of the platform.\n        Each entry is a PartnerCommissions, which includes two UInt64 with the partners commission in ppm\n        charged on top of setup and operational fees.\n        Keys correspond to \"partner_\" followed by partners address.\n\n    Methods\n    -------\n    noticeboard_deploy(\n        app_id_old: UInt64,\n    ) -> arc4.UInt64:\n        Creates a new Noticeboard.\n\n    noticeboard_suspend(\n    ) -> None:\n        Suspends the platform, temporarily preventing creation of new validator ads and modification of existing ones,\n        as well as creation of new delegation contracts and registration of new users.\n\n    noticeboard_migrate(\n        app_id_new: UInt64,\n    ) -> None:\n        Retires the current platform, preventing creation of new validator ads and modification of existing ones,\n        as well as creation of new delegation contracts and updating of existing ones.\n        Since retired platform cannot create new validator ads or modify existing ones, adding or removing\n        an ASA is not needed anymore.\n\n    noticeboard_set(\n        pla_manager: Account,\n        asset_config_manager: Account,\n        tc_sha256 : Sha256,\n        noticeboard_fees : NoticeboardFees,\n        noticeboard_terms_timing : NoticeboardTermsTiming,\n        noticeboard_terms_node : NoticeboardTermsNodeLimits,\n    ) -> None:\n        Set (anew) all of the platform's operating parameters.\n\n    noticeboard_key_reg(\n        key_reg_info : KeyRegTxnInfo,\n        txn : gtxn.PaymentTransaction,\n    ) -> None:\n        Issues a key (de)registration transaction by the platform.\n\n    noticeboard_optin_asa(\n        asa : Asset,\n        txn : gtxn.PaymentTransaction,\n    ) -> None:\n        Opts the platform address in to an ASA.\n\n    noticeboard_config_asset(\n        asset_id : UInt64,\n        asset_info : NoticeboardAssetInfo,\n        txn : gtxn.PaymentTransaction,\n    ) -> None:\n        Adds or modifies an asset from the accepted payment methods.\n\n    noticeboard_income(\n        asset_id : UInt64,\n    ) -> None:\n        Sends all platform earnings of asset to platform manager account.\n\n    template_load_init(\n        name: arc4.Byte,\n        template_size: UInt64,\n    ) -> None:\n        Starts the process of uploading a contract template.\n\n    template_load_data(\n        name: arc4.Byte,\n        offset: UInt64,\n        data: Bytes,\n    ) -> None:\n        Uploads a data chunk to a contract template.\n\n    partner_config(\n        partner_address: arc4.Address,\n        partner_commissions: UInt64,\n        partner_delete: arc4.Bool,\n        txn : gtxn.PaymentTransaction,\n    ) -> None:\n        Creates or modifies a platform's partner.\n\n    gas(\n    ) -> None:\n        To fit more resources in app reference arrays.\n\n    user_create(\n        user_role : UInt64,\n        txn : gtxn.PaymentTransaction,\n    ) -> None:\n        Creates a new user data structure for the sender depending on the requested user role.\n\n    user_delete(\n    ) -> None:\n        Clears the user's existing role on noticeboard.\n\n    contract_create(\n        del_beneficiary: arc4.Address,\n        rounds_duration: UInt64,\n        stake_max: UInt64,\n        val_owner: arc4.Address,\n        val_app: Application,\n        val_app_idx: UInt64,\n        del_app_idx: UInt64,\n        tc_sha256: Sha256,\n        partner_address: arc4.Address,\n        mbr_txn: gtxn.PaymentTransaction,\n        txn: gtxn.Transaction,\n    ) -> arc4.UInt64:\n\n    keys_confirm(\n        del_app: Application,\n        del_app_idx : UInt64,\n        val_owner: arc4.Address,\n        val_app: Application,\n        val_app_idx: UInt64,\n    ) -> None:\n        Delegator manager confirms that the keys have been confirmed by the delegator beneficiary.\n\n    keys_not_confirmed(\n        del_manager: arc4.Address,\n        del_app: Application,\n        del_app_idx : UInt64,\n        val_owner: arc4.Address,\n        val_app: Application,\n        val_app_idx: UInt64,\n    ) -> None:\n        Anyone confirms that delegator manager has not confirmed the confirmation of\n        the keys by the delegator beneficiary and failed to pay the operational fee\n        in the agreed time.\n\n    keys_not_submitted(\n        del_manager: arc4.Address,\n        del_app: Application,\n        del_app_idx : UInt64,\n        val_owner: arc4.Address,\n        val_app: Application,\n        val_app_idx: UInt64,\n    ) -> None:\n        Anyone confirms that validator manager has not submitted the keys in the agreed time.\n\n    keys_submit(\n        del_manager: arc4.Address,\n        del_app: Application,\n        del_app_idx : UInt64,\n        val_owner: arc4.Address,\n        val_app: Application,\n        val_app_idx: UInt64,\n        key_reg_txn_info : KeyRegTxnInfo,\n    ) -> None:\n        Validator manager submits the keys generated for the delegator beneficiary.\n\n    breach_limits(\n        del_manager: arc4.Address,\n        del_app: Application,\n        del_app_idx : UInt64,\n        val_owner: arc4.Address,\n        val_app: Application,\n        val_app_idx: UInt64,\n    ) -> None:\n        Reports that a limit breach event occurred on a delegator contract of a validator ad.\n\n    breach_pay(\n        del_manager: arc4.Address,\n        del_app: Application,\n        del_app_idx : UInt64,\n        val_owner: arc4.Address,\n        val_app: Application,\n        val_app_idx: UInt64,\n    ) -> None:\n        Reports that a payment cannot be made because the payment asset on a delegator contract\n        have been either frozen or clawed back.\n\n    breach_suspended(\n        del_manager: arc4.Address,\n        del_app: Application,\n        del_app_idx : UInt64,\n        val_owner: arc4.Address,\n        val_app: Application,\n        val_app_idx: UInt64,\n    ) -> None:\n        Reports that the delegator beneficiary was suspended by consensus.\n\n    contract_claim(\n        del_manager: arc4.Address,\n        del_app: Application,\n        del_app_idx : UInt64,\n        val_owner: arc4.Address,\n        val_app: Application,\n        val_app_idx: UInt64,\n    ) -> EarningsDistribution:\n        Claims the operational fee up to this round from a delegator contract and\n        transfers it to the validator ad as well as the commission to the platform.\n\n    contract_expired(\n        del_manager: arc4.Address,\n        del_app: Application,\n        del_app_idx : UInt64,\n        val_owner: arc4.Address,\n        val_app: Application,\n        val_app_idx: UInt64,\n    ) -> None:\n        Reports that a delegator contract has expired.\n\n    contract_withdraw(\n        del_app: Application,\n        del_app_idx : UInt64,\n        val_owner: arc4.Address,\n        val_app: Application,\n        val_app_idx: UInt64,\n    ) -> None:\n        Delegator manager gracefully withdraws from the delegator contract prematurely.\n\n    contract_delete(\n        del_app: Application,\n        del_app_idx : UInt64,\n    ) -> ContractDeleteReturn:\n        Deletes a delegator contract.\n\n    contract_report_expiry_soon(\n        del_manager: arc4.Address,\n        del_app: Application,\n        del_app_idx : UInt64,\n    ) -> None:\n        Reports that the contract will expire soon.\n\n    ad_create(\n        val_app_idx: UInt64,\n        txn: gtxn.PaymentTransaction,\n    ) -> arc4.UInt64:\n        Creates a new validator ad for the sender (i.e. validator owner).\n\n    ad_config(\n        val_owner: arc4.Address,\n        val_app: Application,\n        val_app_idx: UInt64,\n        val_manager: arc4.Address,\n        live : arc4.Bool,\n        cnt_del_max : UInt64,\n    ) -> None:\n        Sets all operation configuration parameters for the validator ad\n\n    ad_delete(\n        val_owner: arc4.Address,\n        val_app: Application,\n        val_app_idx: UInt64,\n    ) -> None:\n        Validator owner deletes a validator ad.\n\n    ad_ready(\n        val_owner: arc4.Address,\n        val_app: Application,\n        val_app_idx: UInt64,\n        ready: arc4.Bool,\n    ) -> None:\n        Ad manager sets its readiness for operation.\n\n    ad_self_disclose(\n        val_owner: arc4.Address,\n        val_app: Application,\n        val_app_idx: UInt64,\n        val_info: ValidatorSelfDisclosure,\n    ) -> None:\n        Ad owner sets its self-disclosure information.\n\n    ad_terms(\n        val_owner: arc4.Address,\n        val_app: Application,\n        val_app_idx: UInt64,\n        tc_sha256: Sha256,\n        terms_time: ValidatorTermsTiming,\n        terms_price: ValidatorTermsPricing,\n        terms_stake: ValidatorTermsStakeLimits,\n        terms_reqs: ValidatorTermsGating,\n        terms_warn: ValidatorTermsWarnings,\n        mbr_delegator_template_box: UInt64,\n        txn: gtxn.PaymentTransaction,\n    ) -> None:\n        Sets all the terms for creating a delegation contract.\n\n    ad_income(\n        val_app: Application,\n        val_app_idx: UInt64,\n        asset_id: UInt64,\n    ) -> arc4.UInt64:\n        Validator owner withdraws all available balance from the validator ad for the given asset.\n\n    ad_asa_close(\n        val_app: Application,\n        val_app_idx: UInt64,\n        asset_id: UInt64,\n    ) -> None:\n        Removes the asset's storage on the validator ad.\n\n    get_noticeboard_asset(\n        asset_id : UInt64,\n    ) -> NoticeboardAssetInfo:\n        Returns information about the payment asset that is or was accepted on the platform.\n\n    get_noticeboard_user(\n        user : arc4.Address,\n    ) -> UserInfo:\n        Returns information about the user on the platform.\n\n    ",
        "methods": [
            {
                "name": "noticeboard_deploy",
                "args": [
                    {
                        "type": "uint64",
                        "name": "app_id_old",
                        "desc": "The app ID of previous version of the platform."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64",
                    "desc": "App ID of the created noticeboard application."
                },
                "desc": "Creates a new Noticeboard."
            },
            {
                "name": "noticeboard_suspend",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Suspends the platform, temporarily preventing creation of new validator ads and modification of existing ones,\nas well as creation of new delegation contracts and registration of new users."
            },
            {
                "name": "noticeboard_migrate",
                "args": [
                    {
                        "type": "uint64",
                        "name": "app_id_new",
                        "desc": "The app ID of next version of the platform."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Retires the current platform, permanently preventing creation of new validator ads and modification of existing\nones, as well as creation of new delegation contracts and registration of new users. Since retired platform cannot create new validator ads or modify existing ones, configuring payment assets and partners is not needed anymore."
            },
            {
                "name": "noticeboard_set",
                "args": [
                    {
                        "type": "account",
                        "name": "pla_manager",
                        "desc": "Platform manager account."
                    },
                    {
                        "type": "account",
                        "name": "asset_config_manager",
                        "desc": "Manager account that can configure assets supported by the noticeboard."
                    },
                    {
                        "type": "byte[32]",
                        "name": "tc_sha256",
                        "desc": "Hash (i.e. SHA 256) of the Terms and Conditions."
                    },
                    {
                        "type": "(uint64,uint64,uint64,uint64,uint64)",
                        "name": "noticeboard_fees",
                        "desc": "Fees charged by the noticeboard."
                    },
                    {
                        "type": "(uint64,uint64,uint64,uint64)",
                        "name": "noticeboard_terms_timing",
                        "desc": "Noticeboard limits on timing terms for validator ads."
                    },
                    {
                        "type": "(uint64,uint64,uint64)",
                        "name": "noticeboard_terms_node",
                        "desc": "Noticeboard limits on node and related stake limit terms for validator ads."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Set (anew) all of the platform's operating parameters."
            },
            {
                "name": "noticeboard_key_reg",
                "args": [
                    {
                        "type": "(uint64,uint64,uint64,byte[32],byte[32],byte[64],address)",
                        "name": "key_reg_info",
                        "desc": "Key registration information to send."
                    },
                    {
                        "type": "pay",
                        "name": "txn",
                        "desc": "Payment transaction to cover costs for the key (de)registration fee."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Issues a key (de)registration transaction by the platform."
            },
            {
                "name": "noticeboard_optin_asa",
                "args": [
                    {
                        "type": "asset",
                        "name": "asa",
                        "desc": "Asset to opt into."
                    },
                    {
                        "type": "pay",
                        "name": "txn",
                        "desc": "Payment transaction to cover MBR increase."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Opts the platform address in to an ASA."
            },
            {
                "name": "noticeboard_config_asset",
                "args": [
                    {
                        "type": "uint64",
                        "name": "asset_id",
                        "desc": "ID of asset to add or modify as an accepted payment method, i.e. ASA ID or 0 for ALGO."
                    },
                    {
                        "type": "(bool,uint64,uint64,uint64)",
                        "name": "asset_info",
                        "desc": "Information about the payment asset, i.e. if it is accepted as a payment at the platform (True) or not (False), and its minimum pricing limits."
                    },
                    {
                        "type": "pay",
                        "name": "txn",
                        "desc": "Payment transaction to cover (potential) MBR increase."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Adds or modifies an asset from the accepted payment methods."
            },
            {
                "name": "noticeboard_income",
                "args": [
                    {
                        "type": "uint64",
                        "name": "asset_id",
                        "desc": "ID of asset to withdraw all earnings."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Sends all platform earnings of asset to platform manager account."
            },
            {
                "name": "template_load_init",
                "args": [
                    {
                        "type": "byte",
                        "name": "name",
                        "desc": "Name of the box with the contract template."
                    },
                    {
                        "type": "uint64",
                        "name": "template_size",
                        "desc": "Size of the delegator contract template in bytes."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Starts the process of uploading a contract template."
            },
            {
                "name": "template_load_data",
                "args": [
                    {
                        "type": "byte",
                        "name": "name",
                        "desc": "Name of the box with the contract template."
                    },
                    {
                        "type": "uint64",
                        "name": "offset",
                        "desc": "Offset in the box at which to replace the data."
                    },
                    {
                        "type": "byte[]",
                        "name": "data",
                        "desc": "Data to replace in the box at the defined position."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Uploads a data chunk to a contract template."
            },
            {
                "name": "partner_config",
                "args": [
                    {
                        "type": "address",
                        "name": "partner_address",
                        "desc": "Address of the partner to register on the platform."
                    },
                    {
                        "type": "(uint64,uint64)",
                        "name": "partner_commissions",
                        "desc": "Information about platform's partner commissions."
                    },
                    {
                        "type": "bool",
                        "name": "partner_delete",
                        "desc": "Boolean set to true to delete the partner from the platform, otherwise create or modify it."
                    },
                    {
                        "type": "pay",
                        "name": "txn",
                        "desc": "Payment transaction to cover (potential) MBR increase."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Creates or modifies a platform's partner."
            },
            {
                "name": "gas",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "To fit more resources in app reference arrays."
            },
            {
                "name": "user_create",
                "args": [
                    {
                        "type": "byte[4]",
                        "name": "user_role",
                        "desc": "Role to requested by the user. Possible options:     ROLE_VAL - user is a validator.     ROLE_DEL - user is a delegator."
                    },
                    {
                        "type": "pay",
                        "name": "txn",
                        "desc": "Payment transaction to cover MBR increase and user creation fee."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Creates a new user data structure for the sender depending on the requested user role."
            },
            {
                "name": "user_delete",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Clears the user's existing role on noticeboard."
            },
            {
                "name": "ad_create",
                "args": [
                    {
                        "type": "uint64",
                        "name": "val_app_idx",
                        "desc": "Index in the validator owner app list at which to place the newly created validator ad. This is to save on opcode cost instead of looping through the whole list."
                    },
                    {
                        "type": "pay",
                        "name": "txn",
                        "desc": "Transaction for the payment of the validator ad creation fee and all the MBR increases at Noticeboard and the newly created ValidatorAd."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64",
                    "desc": "App ID of the created validator ad application."
                },
                "desc": "Creates a new validator ad for the sender (i.e. validator owner)."
            },
            {
                "name": "ad_config",
                "args": [
                    {
                        "type": "application",
                        "name": "val_app",
                        "desc": "App ID of the validator ad."
                    },
                    {
                        "type": "uint64",
                        "name": "val_app_idx",
                        "desc": "Index of the requested validator ad in validator owner app list. This is to save on opcode cost instead of looping through the whole list."
                    },
                    {
                        "type": "address",
                        "name": "val_manager",
                        "desc": "Manager address for the validator ad."
                    },
                    {
                        "type": "bool",
                        "name": "live",
                        "desc": "Set to True if the newly created validator ad should be accepting new delegators right away, otherwise set to False."
                    },
                    {
                        "type": "uint64",
                        "name": "cnt_del_max",
                        "desc": "Maximum number of delegators the validator is willing to manage simultaneously."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Sets all operation configuration parameters for the validator ad, i.e.\nthe validator manager account, the status whether the ad is live to accept new delegators (`live=True`) or not (`live=False`), and the maximum number of delegators the validator ad can accept."
            },
            {
                "name": "ad_delete",
                "args": [
                    {
                        "type": "application",
                        "name": "val_app",
                        "desc": "App ID of the validator ad."
                    },
                    {
                        "type": "uint64",
                        "name": "val_app_idx",
                        "desc": "Index of the requested validator ad in validator owner app list. This is to save on opcode cost instead of looping through the whole list."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Validator owner deletes a validator ad.\nPossible only if there are no active delegators and all balances have been claimed."
            },
            {
                "name": "ad_ready",
                "args": [
                    {
                        "type": "address",
                        "name": "val_owner",
                        "desc": "Owner address for the validator ad."
                    },
                    {
                        "type": "application",
                        "name": "val_app",
                        "desc": "App ID of the validator ad."
                    },
                    {
                        "type": "uint64",
                        "name": "val_app_idx",
                        "desc": "Index of the requested validator ad in validator owner app list. This is to save on opcode cost instead of looping through the whole list."
                    },
                    {
                        "type": "bool",
                        "name": "ready",
                        "desc": "Set to True if validator manager is ready for accepting new delegators, otherwise set to False."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Ad manager sets its readiness for operation."
            },
            {
                "name": "ad_self_disclose",
                "args": [
                    {
                        "type": "application",
                        "name": "val_app",
                        "desc": "App ID of the validator ad."
                    },
                    {
                        "type": "uint64",
                        "name": "val_app_idx",
                        "desc": "Index of the requested validator ad in validator owner app list. This is to save on opcode cost instead of looping through the whole list."
                    },
                    {
                        "type": "(byte[30],byte[60],byte[2],uint64,byte[20])",
                        "name": "val_info",
                        "desc": "Self-disclosed information about the validator."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Ad owner sets its self-disclosure information."
            },
            {
                "name": "ad_terms",
                "args": [
                    {
                        "type": "application",
                        "name": "val_app",
                        "desc": "App ID of the validator ad."
                    },
                    {
                        "type": "uint64",
                        "name": "val_app_idx",
                        "desc": "Index of the requested validator ad in validator owner app list. This is to save on opcode cost instead of looping through the whole list."
                    },
                    {
                        "type": "byte[32]",
                        "name": "tc_sha256",
                        "desc": "Hash (i.e. SHA 256) of the Terms and Conditions agreed by the validator."
                    },
                    {
                        "type": "(uint64,uint64,uint64,uint64,uint64)",
                        "name": "terms_time",
                        "desc": "Validator's terms about timing."
                    },
                    {
                        "type": "(uint64,uint64,uint64,uint64,uint64)",
                        "name": "terms_price",
                        "desc": "Validator's terms about pricing."
                    },
                    {
                        "type": "(uint64,uint64)",
                        "name": "terms_stake",
                        "desc": "Validator's terms about stake limits."
                    },
                    {
                        "type": "((uint64,uint64)[2])",
                        "name": "terms_reqs",
                        "desc": "Validator's terms about gating requirements."
                    },
                    {
                        "type": "(uint64,uint64)",
                        "name": "terms_warn",
                        "desc": "Validator's terms about warnings."
                    },
                    {
                        "type": "uint64",
                        "name": "mbr_delegator_template_box",
                        "desc": "Amount needed to pay to the validator ad for creating box for delegator template."
                    },
                    {
                        "type": "pay",
                        "name": "txn",
                        "desc": "Transaction for the payment of potential MBR increase of ValidatorAd in case of ASA opt-in and payment of box for delegator contract template box in case the ValidatorAd is in STATE_CREATED."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Sets all the terms for creating a delegation contract.\nWith this action, the validator agrees with the (new) terms."
            },
            {
                "name": "ad_income",
                "args": [
                    {
                        "type": "application",
                        "name": "val_app",
                        "desc": "App ID of the validator ad."
                    },
                    {
                        "type": "uint64",
                        "name": "val_app_idx",
                        "desc": "Index of the requested validator ad in validator owner app list. This is to save on opcode cost instead of looping through the whole list."
                    },
                    {
                        "type": "uint64",
                        "name": "asset_id",
                        "desc": "ID of the asset (i.e. ASA ID or 0 for ALGO) for which the owner would like to withdraw all earnings from the validator ad."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64",
                    "desc": "Withdrawn income from the validator ad for the input asset."
                },
                "desc": "Validator owner withdraws all available balance from the validator ad for the given asset."
            },
            {
                "name": "ad_asa_close",
                "args": [
                    {
                        "type": "application",
                        "name": "val_app",
                        "desc": "App ID of the validator ad."
                    },
                    {
                        "type": "uint64",
                        "name": "val_app_idx",
                        "desc": "Index of the requested validator ad in validator owner app list. This is to save on opcode cost instead of looping through the whole list."
                    },
                    {
                        "type": "uint64",
                        "name": "asset_id",
                        "desc": "ID of the asset (i.e. ASA ID or 0 for ALGO) for which the owner would like to withdraw all earnings from the validator ad."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Removes the asset's storage on the validator ad."
            },
            {
                "name": "contract_create",
                "args": [
                    {
                        "type": "address",
                        "name": "del_beneficiary",
                        "desc": "Beneficiary address for the new delegation contract."
                    },
                    {
                        "type": "uint64",
                        "name": "rounds_duration",
                        "desc": "Contract duration in number of rounds."
                    },
                    {
                        "type": "uint64",
                        "name": "stake_max",
                        "desc": "The maximum amount of ALGO that the delegator beneficiary address intends to have at any point in time during the contract duration."
                    },
                    {
                        "type": "address",
                        "name": "val_owner",
                        "desc": "Owner address for the validator ad."
                    },
                    {
                        "type": "application",
                        "name": "val_app",
                        "desc": "App ID of the validator ad."
                    },
                    {
                        "type": "uint64",
                        "name": "val_app_idx",
                        "desc": "Index of the requested validator ad in validator owner app list. This is to save on opcode cost instead of looping through the whole list."
                    },
                    {
                        "type": "uint64",
                        "name": "del_app_idx",
                        "desc": "Index of the delegator manager app list at which to store the new delegator contract. This is to save on opcode cost instead of looping through the whole list."
                    },
                    {
                        "type": "byte[32]",
                        "name": "tc_sha256",
                        "desc": "Hash (i.e. SHA 256) of the Terms and Conditions agreed by the delegator."
                    },
                    {
                        "type": "address",
                        "name": "partner_address",
                        "desc": "Address of the partner that facilitated the contract creation. If there is no partner, set to Global.zero_address."
                    },
                    {
                        "type": "pay",
                        "name": "mbr_txn",
                        "desc": "Payment transaction for the payment of the increase of validator ad MBR due to creation of a new contract and payment of delegator contract creation fee."
                    },
                    {
                        "type": "txn",
                        "name": "txn",
                        "desc": "Transaction for the payment of the setup and operational fee."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64",
                    "desc": "App ID of the created delegator contract application."
                },
                "desc": "Creates a new delegator contract for a delegator beneficiary with the given validator owner under the terms\ndefined in the given ad for the input defined contract duration."
            },
            {
                "name": "keys_confirm",
                "args": [
                    {
                        "type": "application",
                        "name": "del_app",
                        "desc": "App ID of the delegator contract."
                    },
                    {
                        "type": "uint64",
                        "name": "del_app_idx",
                        "desc": "Index of the delegator manager app list at which the delegator contract is stored. This is to save on opcode cost instead of looping through the whole list."
                    },
                    {
                        "type": "address",
                        "name": "val_owner",
                        "desc": "Owner address for the validator ad."
                    },
                    {
                        "type": "application",
                        "name": "val_app",
                        "desc": "App ID of the validator ad."
                    },
                    {
                        "type": "uint64",
                        "name": "val_app_idx",
                        "desc": "Index of the requested validator ad in validator owner app list. This is to save on opcode cost instead of looping through the whole list."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Delegator manager confirms that the keys have been confirmed by the delegator beneficiary."
            },
            {
                "name": "keys_not_confirmed",
                "args": [
                    {
                        "type": "address",
                        "name": "del_manager",
                        "desc": "Manager address for the delegation contract."
                    },
                    {
                        "type": "application",
                        "name": "del_app",
                        "desc": "App ID of the delegator contract."
                    },
                    {
                        "type": "uint64",
                        "name": "del_app_idx",
                        "desc": "Index of the delegator manager app list at which the delegator contract is stored. This is to save on opcode cost instead of looping through the whole list."
                    },
                    {
                        "type": "address",
                        "name": "val_owner",
                        "desc": "Owner address for the validator ad."
                    },
                    {
                        "type": "application",
                        "name": "val_app",
                        "desc": "App ID of the validator ad."
                    },
                    {
                        "type": "uint64",
                        "name": "val_app_idx",
                        "desc": "Index of the requested validator ad in validator owner app list. This is to save on opcode cost instead of looping through the whole list."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Anyone confirms that delegator manager has not confirmed the confirmation of\nthe keys by the delegator beneficiary and failed to pay the operational fee in the agreed time."
            },
            {
                "name": "keys_not_submitted",
                "args": [
                    {
                        "type": "address",
                        "name": "del_manager",
                        "desc": "Manager address for the delegation contract."
                    },
                    {
                        "type": "application",
                        "name": "del_app",
                        "desc": "App ID of the delegator contract."
                    },
                    {
                        "type": "uint64",
                        "name": "del_app_idx",
                        "desc": "Index of the delegator manager app list at which the delegator contract is stored. This is to save on opcode cost instead of looping through the whole list."
                    },
                    {
                        "type": "address",
                        "name": "val_owner",
                        "desc": "Owner address for the validator ad."
                    },
                    {
                        "type": "application",
                        "name": "val_app",
                        "desc": "App ID of the validator ad."
                    },
                    {
                        "type": "uint64",
                        "name": "val_app_idx",
                        "desc": "Index of the requested validator ad in validator owner app list. This is to save on opcode cost instead of looping through the whole list."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Anyone confirms that validator manager has not submitted the keys in the agreed time.\nInternally, the setup fee is returned to the delegator manager if possible."
            },
            {
                "name": "keys_submit",
                "args": [
                    {
                        "type": "address",
                        "name": "del_manager",
                        "desc": "Manager address for the delegation contract."
                    },
                    {
                        "type": "application",
                        "name": "del_app",
                        "desc": "App ID of the delegator contract."
                    },
                    {
                        "type": "uint64",
                        "name": "del_app_idx",
                        "desc": "Index of the delegator manager app list at which the delegator contract is stored. This is to save on opcode cost instead of looping through the whole list."
                    },
                    {
                        "type": "address",
                        "name": "val_owner",
                        "desc": "Owner address for the validator ad."
                    },
                    {
                        "type": "application",
                        "name": "val_app",
                        "desc": "App ID of the validator ad."
                    },
                    {
                        "type": "uint64",
                        "name": "val_app_idx",
                        "desc": "Index of the requested validator ad in validator owner app list. This is to save on opcode cost instead of looping through the whole list."
                    },
                    {
                        "type": "(uint64,uint64,uint64,byte[32],byte[32],byte[64],address)",
                        "name": "key_reg_txn_info",
                        "desc": "Information about the generated participation keys."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Validator manager submits the keys generated for the delegator beneficiary.\nInternally, the setup fee is assigned to the validator."
            },
            {
                "name": "breach_limits",
                "args": [
                    {
                        "type": "address",
                        "name": "del_manager",
                        "desc": "Manager address for the delegation contract."
                    },
                    {
                        "type": "application",
                        "name": "del_app",
                        "desc": "App ID of the delegator contract."
                    },
                    {
                        "type": "uint64",
                        "name": "del_app_idx",
                        "desc": "Index of the delegator manager app list at which the delegator contract is stored. This is to save on opcode cost instead of looping through the whole list."
                    },
                    {
                        "type": "address",
                        "name": "val_owner",
                        "desc": "Owner address for the validator ad."
                    },
                    {
                        "type": "application",
                        "name": "val_app",
                        "desc": "App ID of the validator ad."
                    },
                    {
                        "type": "uint64",
                        "name": "val_app_idx",
                        "desc": "Index of the requested validator ad in validator owner app list. This is to save on opcode cost instead of looping through the whole list."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Reports that a limit breach event occurred on a delegator contract of a validator ad."
            },
            {
                "name": "breach_pay",
                "args": [
                    {
                        "type": "address",
                        "name": "del_manager",
                        "desc": "Manager address for the delegation contract."
                    },
                    {
                        "type": "application",
                        "name": "del_app",
                        "desc": "App ID of the delegator contract."
                    },
                    {
                        "type": "uint64",
                        "name": "del_app_idx",
                        "desc": "Index of the delegator manager app list at which the delegator contract is stored. This is to save on opcode cost instead of looping through the whole list."
                    },
                    {
                        "type": "address",
                        "name": "val_owner",
                        "desc": "Owner address for the validator ad."
                    },
                    {
                        "type": "application",
                        "name": "val_app",
                        "desc": "App ID of the validator ad."
                    },
                    {
                        "type": "uint64",
                        "name": "val_app_idx",
                        "desc": "Index of the requested validator ad in validator owner app list. This is to save on opcode cost instead of looping through the whole list."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Reports that a payment cannot be made because the payment asset on a delegator contract\nhave been either frozen or clawed back."
            },
            {
                "name": "breach_suspended",
                "args": [
                    {
                        "type": "address",
                        "name": "del_manager",
                        "desc": "Manager address for the delegation contract."
                    },
                    {
                        "type": "application",
                        "name": "del_app",
                        "desc": "App ID of the delegator contract."
                    },
                    {
                        "type": "uint64",
                        "name": "del_app_idx",
                        "desc": "Index of the delegator manager app list at which the delegator contract is stored. This is to save on opcode cost instead of looping through the whole list."
                    },
                    {
                        "type": "address",
                        "name": "val_owner",
                        "desc": "Owner address for the validator ad."
                    },
                    {
                        "type": "application",
                        "name": "val_app",
                        "desc": "App ID of the validator ad."
                    },
                    {
                        "type": "uint64",
                        "name": "val_app_idx",
                        "desc": "Index of the requested validator ad in validator owner app list. This is to save on opcode cost instead of looping through the whole list."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Reports that the delegator beneficiary was suspended by consensus."
            },
            {
                "name": "contract_claim",
                "args": [
                    {
                        "type": "address",
                        "name": "del_manager",
                        "desc": "Manager address for the delegation contract."
                    },
                    {
                        "type": "application",
                        "name": "del_app",
                        "desc": "App ID of the delegator contract."
                    },
                    {
                        "type": "uint64",
                        "name": "del_app_idx",
                        "desc": "Index of the delegator manager app list at which the delegator contract is stored. This is to save on opcode cost instead of looping through the whole list."
                    },
                    {
                        "type": "address",
                        "name": "val_owner",
                        "desc": "Owner address for the validator ad."
                    },
                    {
                        "type": "application",
                        "name": "val_app",
                        "desc": "App ID of the validator ad."
                    },
                    {
                        "type": "uint64",
                        "name": "val_app_idx",
                        "desc": "Index of the requested validator ad in validator owner app list. This is to save on opcode cost instead of looping through the whole list."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(uint64,uint64,uint64)"
                },
                "desc": "Claims the operational fee up to this round from a delegator contract and\ntransfers it to the validator ad as well as the commission to the platform."
            },
            {
                "name": "contract_expired",
                "args": [
                    {
                        "type": "address",
                        "name": "del_manager",
                        "desc": "Manager address for the delegation contract."
                    },
                    {
                        "type": "application",
                        "name": "del_app",
                        "desc": "App ID of the delegator contract."
                    },
                    {
                        "type": "uint64",
                        "name": "del_app_idx",
                        "desc": "Index of the delegator manager app list at which the delegator contract is stored. This is to save on opcode cost instead of looping through the whole list."
                    },
                    {
                        "type": "address",
                        "name": "val_owner",
                        "desc": "Owner address for the validator ad."
                    },
                    {
                        "type": "application",
                        "name": "val_app",
                        "desc": "App ID of the validator ad."
                    },
                    {
                        "type": "uint64",
                        "name": "val_app_idx",
                        "desc": "Index of the requested validator ad in validator owner app list. This is to save on opcode cost instead of looping through the whole list."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Reports that a delegator contract has expired."
            },
            {
                "name": "contract_withdraw",
                "args": [
                    {
                        "type": "application",
                        "name": "del_app",
                        "desc": "App ID of the delegator contract."
                    },
                    {
                        "type": "uint64",
                        "name": "del_app_idx",
                        "desc": "Index of the delegator manager app list at which the delegator contract is stored. This is to save on opcode cost instead of looping through the whole list."
                    },
                    {
                        "type": "address",
                        "name": "val_owner",
                        "desc": "Owner address for the validator ad."
                    },
                    {
                        "type": "application",
                        "name": "val_app",
                        "desc": "App ID of the validator ad."
                    },
                    {
                        "type": "uint64",
                        "name": "val_app_idx",
                        "desc": "Index of the requested validator ad in validator owner app list. This is to save on opcode cost instead of looping through the whole list."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Delegator manager gracefully withdraws from the delegator contract prematurely."
            },
            {
                "name": "contract_delete",
                "args": [
                    {
                        "type": "application",
                        "name": "del_app",
                        "desc": "App ID of the delegator contract."
                    },
                    {
                        "type": "uint64",
                        "name": "del_app_idx",
                        "desc": "Index of the delegator manager app list at which the delegator contract is stored. This is to save on opcode cost instead of looping through the whole list."
                    },
                    {
                        "type": "address",
                        "name": "val_owner",
                        "desc": "Owner address for the validator ad."
                    },
                    {
                        "type": "application",
                        "name": "val_app",
                        "desc": "App ID of the validator ad."
                    },
                    {
                        "type": "uint64",
                        "name": "val_app_idx",
                        "desc": "Index of the requested validator ad in validator owner app list. This is to save on opcode cost instead of looping through the whole list."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(uint64,uint64)",
                    "desc": "Balance of the fee asset that remained in the delegator contract."
                },
                "desc": "Deletes a delegator contract."
            },
            {
                "name": "contract_report_expiry_soon",
                "args": [
                    {
                        "type": "address",
                        "name": "del_manager",
                        "desc": "Manager address for the delegation contract."
                    },
                    {
                        "type": "application",
                        "name": "del_app",
                        "desc": "App ID of the delegator contract."
                    },
                    {
                        "type": "uint64",
                        "name": "del_app_idx",
                        "desc": "Index of the delegator manager app list at which the delegator contract is stored. This is to save on opcode cost instead of looping through the whole list."
                    },
                    {
                        "type": "address",
                        "name": "val_owner",
                        "desc": "Owner address for the validator ad."
                    },
                    {
                        "type": "application",
                        "name": "val_app",
                        "desc": "App ID of the validator ad."
                    },
                    {
                        "type": "uint64",
                        "name": "val_app_idx",
                        "desc": "Index of the requested validator ad in validator owner app list. This is to save on opcode cost instead of looping through the whole list."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Reports that the contract will expire soon."
            },
            {
                "name": "get_noticeboard_asset",
                "args": [
                    {
                        "type": "uint64",
                        "name": "asset_id"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "(bool,uint64,uint64,uint64)",
                    "desc": "Information about the payment asset that is or was accepted on the platform."
                },
                "desc": "Returns information about the payment asset that is or was accepted on the platform."
            },
            {
                "name": "get_noticeboard_user",
                "args": [
                    {
                        "type": "address",
                        "name": "user"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "(byte[4],byte[8],address,address,uint64[110],uint64)",
                    "desc": "Information about the user on the platform."
                },
                "desc": "Returns information about the user on the platform."
            }
        ],
        "networks": {}
    },
    "bare_call_config": {}
}