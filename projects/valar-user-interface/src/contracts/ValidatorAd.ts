/* eslint-disable */
// @ts-nocheck
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  AppStorageSchema,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom, SendTransactionParams } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "ad_create(address)uint64": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "ad_config(address,address,bool,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "ad_delete(address)void": {
      "call_config": {
        "delete_application": "CALL"
      }
    },
    "ad_ready(address,bool)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "ad_self_disclose(address,(byte[30],byte[60],byte[2],uint64,byte[20]))void": {
      "call_config": {
        "no_op": "CALL"
      },
      "structs": {
        "val_info": {
          "name": "ValidatorSelfDisclosure",
          "elements": [
            [
              "name",
              "byte[30]"
            ],
            [
              "https",
              "byte[60]"
            ],
            [
              "country_code",
              "byte[2]"
            ],
            [
              "hw_cat",
              "uint64"
            ],
            [
              "node_version",
              "byte[20]"
            ]
          ]
        }
      }
    },
    "ad_terms(address,byte[32],(uint64,uint64,uint64,uint64,uint64),(uint64,uint64,uint64,uint64,uint64),(uint64,uint64),((uint64,uint64)[2]),(uint64,uint64),pay)void": {
      "call_config": {
        "no_op": "CALL"
      },
      "structs": {
        "terms_time": {
          "name": "ValidatorTermsTiming",
          "elements": [
            [
              "rounds_setup",
              "uint64"
            ],
            [
              "rounds_confirm",
              "uint64"
            ],
            [
              "rounds_duration_min",
              "uint64"
            ],
            [
              "rounds_duration_max",
              "uint64"
            ],
            [
              "round_max_end",
              "uint64"
            ]
          ]
        },
        "terms_price": {
          "name": "ValidatorTermsPricing",
          "elements": [
            [
              "commission",
              "uint64"
            ],
            [
              "fee_round_min",
              "uint64"
            ],
            [
              "fee_round_var",
              "uint64"
            ],
            [
              "fee_setup",
              "uint64"
            ],
            [
              "fee_asset_id",
              "uint64"
            ]
          ]
        },
        "terms_stake": {
          "name": "ValidatorTermsStakeLimits",
          "elements": [
            [
              "stake_max",
              "uint64"
            ],
            [
              "stake_gratis",
              "uint64"
            ]
          ]
        },
        "terms_reqs": {
          "name": "ValidatorTermsGating",
          "elements": [
            [
              "gating_asa_list",
              "(uint64,uint64)[2]"
            ]
          ]
        },
        "terms_warn": {
          "name": "ValidatorTermsWarnings",
          "elements": [
            [
              "cnt_warning_max",
              "uint64"
            ],
            [
              "rounds_warning",
              "uint64"
            ]
          ]
        }
      }
    },
    "ad_income(address,uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "ad_asa_close(address,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "template_load_init(address,uint64,pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "template_load_data(address,uint64,byte[])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "template_load_end(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "contract_create(address,address,uint64,uint64,address,(uint64,uint64),pay,txn)uint64": {
      "call_config": {
        "no_op": "CALL"
      },
      "structs": {
        "partner_commissions": {
          "name": "PartnerCommissions",
          "elements": [
            [
              "commission_setup",
              "uint64"
            ],
            [
              "commission_operational",
              "uint64"
            ]
          ]
        }
      }
    },
    "keys_confirm(address,application)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "keys_not_confirmed(application)(address,byte[100])": {
      "call_config": {
        "no_op": "CALL"
      },
      "structs": {
        "output": {
          "name": "Message",
          "elements": [
            [
              "del_manager",
              "address"
            ],
            [
              "msg",
              "byte[100]"
            ]
          ]
        }
      }
    },
    "keys_not_submitted(application)(address,byte[100])": {
      "call_config": {
        "no_op": "CALL"
      },
      "structs": {
        "output": {
          "name": "Message",
          "elements": [
            [
              "del_manager",
              "address"
            ],
            [
              "msg",
              "byte[100]"
            ]
          ]
        }
      }
    },
    "keys_submit(address,application,(uint64,uint64,uint64,byte[32],byte[32],byte[64],address))(address,byte[100])": {
      "call_config": {
        "no_op": "CALL"
      },
      "structs": {
        "key_reg_txn_info": {
          "name": "KeyRegTxnInfo",
          "elements": [
            [
              "vote_first",
              "uint64"
            ],
            [
              "vote_last",
              "uint64"
            ],
            [
              "vote_key_dilution",
              "uint64"
            ],
            [
              "vote_pk",
              "byte[32]"
            ],
            [
              "selection_pk",
              "byte[32]"
            ],
            [
              "state_proof_pk",
              "byte[64]"
            ],
            [
              "sender",
              "address"
            ]
          ]
        },
        "output": {
          "name": "Message",
          "elements": [
            [
              "del_manager",
              "address"
            ],
            [
              "msg",
              "byte[100]"
            ]
          ]
        }
      }
    },
    "breach_limits(application)(bool,(uint64,uint64,uint64),address,byte[100])": {
      "call_config": {
        "no_op": "CALL"
      },
      "structs": {
        "output": {
          "name": "BreachLimitsReturn",
          "elements": [
            [
              "max_breach_reached",
              "bool"
            ],
            [
              "earnings_distribution",
              "(uint64,uint64,uint64)"
            ],
            [
              "del_manager",
              "address"
            ],
            [
              "msg",
              "byte[100]"
            ]
          ]
        }
      }
    },
    "breach_pay(application)(address,byte[100])": {
      "call_config": {
        "no_op": "CALL"
      },
      "structs": {
        "output": {
          "name": "Message",
          "elements": [
            [
              "del_manager",
              "address"
            ],
            [
              "msg",
              "byte[100]"
            ]
          ]
        }
      }
    },
    "breach_suspended(application)((uint64,uint64,uint64),address,byte[100])": {
      "call_config": {
        "no_op": "CALL"
      },
      "structs": {
        "output": {
          "name": "EarningsDistributionAndMessage",
          "elements": [
            [
              "earnings_distribution",
              "(uint64,uint64,uint64)"
            ],
            [
              "del_manager",
              "address"
            ],
            [
              "msg",
              "byte[100]"
            ]
          ]
        }
      }
    },
    "contract_claim(application)(uint64,uint64,uint64)": {
      "call_config": {
        "no_op": "CALL"
      },
      "structs": {
        "output": {
          "name": "EarningsDistribution",
          "elements": [
            [
              "user",
              "uint64"
            ],
            [
              "platform",
              "uint64"
            ],
            [
              "asset_id",
              "uint64"
            ]
          ]
        }
      }
    },
    "contract_expired(application)(address,byte[100])": {
      "call_config": {
        "no_op": "CALL"
      },
      "structs": {
        "output": {
          "name": "Message",
          "elements": [
            [
              "del_manager",
              "address"
            ],
            [
              "msg",
              "byte[100]"
            ]
          ]
        }
      }
    },
    "contract_withdraw(address,application)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "contract_delete(address,application)(uint64,uint64)": {
      "call_config": {
        "no_op": "CALL"
      },
      "structs": {
        "output": {
          "name": "ContractDeleteReturn",
          "elements": [
            [
              "remaining_balance",
              "uint64"
            ],
            [
              "asset_id",
              "uint64"
            ]
          ]
        }
      }
    },
    "contract_report_expiry_soon(uint64,uint64,application)(address,byte[100])": {
      "call_config": {
        "no_op": "CALL"
      },
      "structs": {
        "output": {
          "name": "Message",
          "elements": [
            [
              "del_manager",
              "address"
            ],
            [
              "msg",
              "byte[100]"
            ]
          ]
        }
      }
    },
    "gas()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "get_validator_asa(uint64)(uint64,uint64)": {
      "read_only": true,
      "call_config": {
        "no_op": "CALL"
      },
      "structs": {
        "output": {
          "name": "ValidatorASA",
          "elements": [
            [
              "total_earning",
              "uint64"
            ],
            [
              "total_fees_generated",
              "uint64"
            ]
          ]
        }
      }
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
  },
  "state": {
    "global": {
      "num_byte_slices": 11,
      "num_uints": 6
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "schema": {
    "global": {
      "declared": {
        "cnt_asa": {
          "type": "uint64",
          "key": "cnt_asa"
        },
        "cnt_del": {
          "type": "uint64",
          "key": "cnt_del"
        },
        "cnt_del_max": {
          "type": "uint64",
          "key": "cnt_del_max"
        },
        "del_app_list": {
          "type": "bytes",
          "key": "del_app_list"
        },
        "noticeboard_app_id": {
          "type": "uint64",
          "key": "noticeboard_app_id"
        },
        "state": {
          "type": "bytes",
          "key": "state"
        },
        "tc_sha256": {
          "type": "bytes",
          "key": "tc_sha256"
        },
        "terms_price": {
          "type": "bytes",
          "key": "P"
        },
        "terms_reqs": {
          "type": "bytes",
          "key": "G"
        },
        "terms_stake": {
          "type": "bytes",
          "key": "S"
        },
        "terms_time": {
          "type": "bytes",
          "key": "T"
        },
        "terms_warn": {
          "type": "bytes",
          "key": "W"
        },
        "total_algo_earned": {
          "type": "uint64",
          "key": "total_algo_earned"
        },
        "total_algo_fees_generated": {
          "type": "uint64",
          "key": "total_algo_fees_generated"
        },
        "val_info": {
          "type": "bytes",
          "key": "V",
          "descr": "Self-disclosed information about validator."
        },
        "val_manager": {
          "type": "bytes",
          "key": "val_manager"
        },
        "val_owner": {
          "type": "bytes",
          "key": "val_owner"
        }
      },
      "reserved": {}
    },
    "local": {
      "declared": {},
      "reserved": {}
    }
  },
  "contract": {
    "name": "ValidatorAd",
    "desc": "\n    Ad of a validator owner to offer node running services to users.\n    Users, i.e. delegators, can open requests for the service and conclude an individual delegator contract with the\n    validator.\n    The contract terms are defined by this ad contents at time of the creation of the delegator contract.\n    The validator owner can change the ad to offer different terms for future delegator contracts.\n    The validator ad smart contract also acts as an escrow account for the payment received by the validator from\n    delegators for its service.\n\n    Global state\n    ------------\n    noticeboard_app_id : UInt64\n        App ID of noticeboard platform to which this contract belongs to.\n\n    terms_time: ValidatorTermsTiming\n        Validator's terms about timing.\n    terms_price: ValidatorTermsPricing\n        Validator's terms about pricing.\n    terms_stake: ValidatorTermsStakeLimits\n        Validator's terms about stake limits.\n    terms_reqs: ValidatorTermsGating\n        Validator's terms about gating requirements.\n    terms_warn: ValidatorTermsWarnings\n        Validator's terms about warnings.\n\n    delegation_terms_general : DelegationTermsGeneral\n        General delegation terms that validator defines and agrees to respect if a delegator concludes a delegator\n        contract based on them.\n    delegation_terms_balance : DelegationTermsBalance\n        Requirements for delegator beneficiary balance that validator defines and agrees to respect if a delegator\n        concludes a delegator contract based on them.\n\n    val_owner : Account\n        Validator owner account.\n    val_manager : Account\n        Validator manager account.\n\n    val_info : ValidatorSelfDisclosure\n        Self-disclosed information about the validator.\n\n    state : Bytes\n        State of the contract. Can be one of the following:\n            CREATED - validator ad has been created.\n            TEMPLATE_LOAD - validator ad is getting loaded the delegator contract template.\n            TEMPLATE_LOADED - validator ad ended loading of the delegator contract template.\n            SET - initial terms of validator ad have been set.\n            READY - validator ad manager is ready to accept new delegators.\n            NOT_READY - validator ad manager is not ready to accept new delegators.\n            NOT_LIVE - validator ad owner does not want to accept new delegators.\n\n    cnt_del : UInt64\n        Counter of current delegators.\n    cnt_del_max : UInt64\n        Maximum number of delegators the validator is willing to manage simultaneously.\n    del_app_list : DelAppList\n        List of app ID of the currently active delegator contracts.\n\n    tc_sha256 : Sha256\n        Hash (i.e. SHA 256) of the Terms and Conditions agreed by the validator.\n\n    total_algo_earned : UInt64\n        Total amount of ALGO the validator ad has earned.\n    total_algo_fees_generated : UInt64\n        Total amount of ALGO the validator has generated as fees for the platform.\n\n    cnt_asa : UInt64\n        Counter of number of different ASAs supported by the contract.\n\n    Box storage\n    -----------\n    asas : asa_[ASA_ID] = ValidatorASA\n        Box map for storing ASA IDs that are or were supported by the validator ad at any point of time before deletion.\n        Each entry is a ValidatorASA, with fields for total_earnings and total_fees_generated for that ASA.\n        Keys correspond to \"asa_\" followed by byte representation of ASA ID.\n\n    template : BOX_DELEGATOR_CONTRACT_TEMPLATE_KEY = Bytes\n        Box for storing the delegator contract template.\n\n    Methods\n    -------\n    ad_create(\n        val_owner: arc4.Address,\n    ) -> arc4.UInt64:\n        Creates a new validator ad and returns its app ID.\n\n    ad_config(\n        val_owner: arc4.Address,\n        val_manager: arc4.Address,\n        live : arc4.Bool,\n        cnt_del_max : UInt64,\n    ) -> None:\n        Set the operational configuration of the validator ad.\n\n    ad_delete(\n        val_owner: arc4.Address,\n    ) -> None:\n        Validator owner deletes a validator ad.\n\n    ad_ready(\n        val_manager: arc4.Address,\n        ready: arc4.Bool,\n    ) -> None:\n        Ad manager sets its readiness for operation.\n\n    ad_self_disclose(\n        val_owner: arc4.Address,\n        val_info: ValidatorSelfDisclosure,\n    ) -> None:\n        Ad owner sets its self-disclosure information.\n\n    ad_terms(\n        val_owner: arc4.Address,\n        tc_sha256: Sha256,\n        terms_time: ValidatorTermsTiming,\n        terms_price: ValidatorTermsPricing,\n        terms_stake: ValidatorTermsStakeLimits,\n        terms_reqs: ValidatorTermsGating,\n        terms_warn: ValidatorTermsWarnings,\n        txn: gtxn.PaymentTransaction,\n    ) -> None:\n        Sets all the terms of the validator.\n\n    ad_income(\n        val_owner: arc4.Address,\n        asset_id: UInt64,\n    ) -> arc4.UInt64:\n        Validator owner withdraws all available balance from the validator ad for the given asset.\n\n    ad_asa_close(\n        val_owner: arc4.Address,\n        asset_id: UInt64,\n    ) -> None:\n        Removes the asset's storage on the validator ad.\n\n    template_load_init(\n        val_owner: arc4.Address,\n        template_size: UInt64,\n        mbr_txn: gtxn.PaymentTransaction,\n    ) -> None:\n        Starts the process of uploading delegator contract template.\n\n    template_load_data(\n        val_owner: arc4.Address,\n        offset: UInt64,\n        data: Bytes,\n    ) -> None:\n        Uploads a data chunk to the delegator contract template.\n\n    template_load_end(\n        val_owner: arc4.Address,\n    ) -> None:\n        Ends uploading of the delegator contract template.\n\n    contract_create(\n        del_manager: arc4.Address,\n        del_beneficiary: arc4.Address,\n        rounds_duration: UInt64,\n        stake_max: UInt64,\n        partner_address: arc4.Address,\n        partner_commissions: PartnerCommissions,\n        mbr_txn: gtxn.PaymentTransaction,\n        txn: gtxn.Transaction,\n    ) -> arc4.UInt64:\n        Creates a new delegator contract with the current delegation terms for the input\n        delegator contract manager and delegator contract beneficiary with the specified duration.\n\n    keys_confirm(\n        del_manager: arc4.Address,\n        del_app: Application,\n    ) -> None:\n        Delegator manager confirms that the keys have been confirmed by the delegator beneficiary.\n\n    keys_not_confirmed(\n        del_app: Application,\n    ) -> Message:\n        Reports that keys of a delegator contract have not been confirmed in time.\n\n    keys_not_submitted(\n        del_app: Application,\n    ) -> Message:\n        Reports that keys of a delegator contract have not been submitted in time.\n\n    keys_submit(\n        val_manager: arc4.Address,\n        del_app: Application,\n        key_reg_txn_info : KeyRegTxnInfo,\n    ) -> Message:\n        Validator manager submits the keys generated for the delegator beneficiary according to the contract terms.\n\n    breach_limits(\n        del_app: Application,\n    ) -> BreachLimitsReturn:\n        Reports that a limit breach event occurred on the delegator beneficiary.\n\n    breach_pay(\n        del_app: Application,\n    ) -> Message:\n        Reports that a payment for the fee cannot be made from the delegator beneficiary.\n\n    breach_suspended(\n        del_app: Application,\n    ) -> EarningsDistributionAndMessage:\n        Reports that the delegator beneficiary was suspended by consensus.\n\n    contract_claim(\n        del_app: Application,\n    ) -> EarningsDistribution:\n        Claims and distributes the operational fee of validator up to this round to the validator and noticeboard.\n\n    contract_expired(\n        del_app: Application,\n    ) -> Message:\n        Reports that a delegator contract has expired.\n\n    contract_withdraw(\n        del_manager: arc4.Address,\n        del_app: Application,\n    ) -> None:\n        Reports that a delegator has gracefully withdrawn from the delegator contract prematurely.\n\n    contract_delete(\n        del_manager: arc4.Address,\n        del_app: Application,\n    ) -> ContractDeleteReturn:\n        Delegator deletes an ended contract, withdraws any remaining balance, and returns the MBR from ValidatorAd.\n\n    contract_report_expiry_soon(\n        before_expiry: UInt64,\n        report_period: UInt64,\n    ) -> Message:\n        Reports that the contract will expire soon.\n\n    gas(\n    ) -> None:\n        To fit more resources in app reference arrays.\n\n    Private methods\n    ---------------\n    _add_del_to_list(self, del_app_id: UInt64) -> bool:\n        Assign created delegator contract to first free space in the list of delegator contracts.\n\n    _remove_del_from_list(self, del_app_id: UInt64) -> bool:\n        Remove the delegator contract from list of delegator contracts.\n\n    _exists_del_in_list(self, del_app_id: UInt64) -> bool:\n        Checks if a delegator contract exists in validator ad's list of delegator contracts.\n\n    _mark_validator_earnings(self, earnings_distribution: EarningsDistribution) -> None:\n        Mark increase in validator's earnings.\n\n    ",
    "methods": [
      {
        "name": "ad_create",
        "args": [
          {
            "type": "address",
            "name": "val_owner",
            "desc": "Owner address for the validator ad."
          }
        ],
        "readonly": false,
        "returns": {
          "type": "uint64",
          "desc": "App ID of the created validator ad application."
        },
        "desc": "Creates a new ValidatorAd.\nDefines validator ad owner account. Defines Noticeboard app ID to which this contract belongs to."
      },
      {
        "name": "ad_config",
        "args": [
          {
            "type": "address",
            "name": "val_owner",
            "desc": "Owner address of the validator ad."
          },
          {
            "type": "address",
            "name": "val_manager",
            "desc": "Manager address for the validator ad."
          },
          {
            "type": "bool",
            "name": "live",
            "desc": "Set to True if validator ad should be accepting new delegators, otherwise set to False."
          },
          {
            "type": "uint64",
            "name": "cnt_del_max",
            "desc": "Maximum number of delegators the validator is willing to manage simultaneously."
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        },
        "desc": "Sets all operation configuration parameters for the validator ad, i.e.\nthe validator manager account, the status whether the ad is live to accept new delegators (`live=True`) or not (`live=False`), and the maximum number of delegators the validators can accept."
      },
      {
        "name": "ad_delete",
        "args": [
          {
            "type": "address",
            "name": "val_owner",
            "desc": "Owner address of the validator ad."
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        },
        "desc": "Validator owner deletes a validator ad.\nPossible only if there are no active delegators and all balances have been claimed."
      },
      {
        "name": "ad_ready",
        "args": [
          {
            "type": "address",
            "name": "val_manager",
            "desc": "Manager address for the validator ad."
          },
          {
            "type": "bool",
            "name": "ready",
            "desc": "Set to True if validator manager is ready for accepting new delegators, otherwise set to False."
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        },
        "desc": "Ad manager sets its readiness for operation."
      },
      {
        "name": "ad_self_disclose",
        "args": [
          {
            "type": "address",
            "name": "val_owner",
            "desc": "Owner address of the validator ad."
          },
          {
            "type": "(byte[30],byte[60],byte[2],uint64,byte[20])",
            "name": "val_info",
            "desc": "Self-disclosed information about the validator."
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        },
        "desc": "Ad owner sets its self-disclosure information."
      },
      {
        "name": "ad_terms",
        "args": [
          {
            "type": "address",
            "name": "val_owner",
            "desc": "Owner address of the validator ad."
          },
          {
            "type": "byte[32]",
            "name": "tc_sha256",
            "desc": "Hash (i.e. SHA 256) of the Terms and Conditions agreed by the validator."
          },
          {
            "type": "(uint64,uint64,uint64,uint64,uint64)",
            "name": "terms_time",
            "desc": "Validator's terms about timing."
          },
          {
            "type": "(uint64,uint64,uint64,uint64,uint64)",
            "name": "terms_price",
            "desc": "Validator's terms about pricing."
          },
          {
            "type": "(uint64,uint64)",
            "name": "terms_stake",
            "desc": "Validator's terms about stake limits."
          },
          {
            "type": "((uint64,uint64)[2])",
            "name": "terms_reqs",
            "desc": "Validator's terms about gating requirements."
          },
          {
            "type": "(uint64,uint64)",
            "name": "terms_warn",
            "desc": "Validator's terms about warnings."
          },
          {
            "type": "pay",
            "name": "txn",
            "desc": "Transaction for the payment of MBR increase."
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        },
        "desc": "Sets all the terms of the validator.\nWith this action, the validator agrees with the (new) terms."
      },
      {
        "name": "ad_income",
        "args": [
          {
            "type": "address",
            "name": "val_owner",
            "desc": "Owner address of the validator ad."
          },
          {
            "type": "uint64",
            "name": "asset_id",
            "desc": "ID of the asset (i.e. ASA ID or 0 for ALGO) for which the owner would like to withdraw all earnings from the validator ad."
          }
        ],
        "readonly": false,
        "returns": {
          "type": "uint64",
          "desc": "Withdrawn income from the validator ad for the input asset."
        },
        "desc": "Validator owner withdraws all available balance from the validator ad for the given asset."
      },
      {
        "name": "ad_asa_close",
        "args": [
          {
            "type": "address",
            "name": "val_owner",
            "desc": "Owner address of the validator ad."
          },
          {
            "type": "uint64",
            "name": "asset_id",
            "desc": "ID of the asset (i.e. ASA ID or 0 for ALGO) for which the owner would like remove its storage."
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        },
        "desc": "Removes the asset's storage on the validator ad.\nTo be used before deleting the contract."
      },
      {
        "name": "template_load_init",
        "args": [
          {
            "type": "address",
            "name": "val_owner",
            "desc": "Owner address of the validator ad."
          },
          {
            "type": "uint64",
            "name": "template_size",
            "desc": "Size of the delegator contract template in bytes."
          },
          {
            "type": "pay",
            "name": "mbr_txn",
            "desc": "Payment transaction for the payment of the increase of validator ad MBR due to creation of box for storing the delegator contract template."
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        },
        "desc": "Starts the process of uploading delegator contract template."
      },
      {
        "name": "template_load_data",
        "args": [
          {
            "type": "address",
            "name": "val_owner",
            "desc": "Owner address of the validator ad."
          },
          {
            "type": "uint64",
            "name": "offset",
            "desc": "Offset in the box at which to replace the data."
          },
          {
            "type": "byte[]",
            "name": "data",
            "desc": "Data to replace in the box at the defined position."
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        },
        "desc": "Uploads a data chunk to the delegator contract template."
      },
      {
        "name": "template_load_end",
        "args": [
          {
            "type": "address",
            "name": "val_owner",
            "desc": "Owner address of the validator ad."
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        },
        "desc": "Ends uploading of the delegator contract template."
      },
      {
        "name": "contract_create",
        "args": [
          {
            "type": "address",
            "name": "del_manager",
            "desc": "Manager address for the delegation contract."
          },
          {
            "type": "address",
            "name": "del_beneficiary",
            "desc": "Beneficiary address for the delegation contract."
          },
          {
            "type": "uint64",
            "name": "rounds_duration",
            "desc": "Contract duration in number of rounds."
          },
          {
            "type": "uint64",
            "name": "stake_max",
            "desc": "The maximum amount of ALGO that the delegator beneficiary address intends to have at any point in time during the contract duration."
          },
          {
            "type": "address",
            "name": "partner_address",
            "desc": "Address of the partner that collects the partner convenience fees. If there is no partner, set it to Global.zero_address."
          },
          {
            "type": "(uint64,uint64)",
            "name": "partner_commissions",
            "desc": "Commissions charged on top of validator setup and operational fees, for partner's convenience offer. The values are represented in ppm."
          },
          {
            "type": "pay",
            "name": "mbr_txn",
            "desc": "Payment transaction for the payment of the increase of validator ad MBR due to creation of a new contract."
          },
          {
            "type": "txn",
            "name": "txn",
            "desc": "Transaction for the payment of the setup and operational fee."
          }
        ],
        "readonly": false,
        "returns": {
          "type": "uint64",
          "desc": "App ID of the created delegator contract application."
        },
        "desc": "Creates a new delegator contract with the current delegation terms for the input\ndelegator contract manager and delegator contract beneficiary with the specified duration."
      },
      {
        "name": "keys_confirm",
        "args": [
          {
            "type": "address",
            "name": "del_manager",
            "desc": "Purported delegator manager account."
          },
          {
            "type": "application",
            "name": "del_app"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        },
        "desc": "Delegator manager confirms that the delegator beneficiary has confirmed the submitted keys\nand pays for the operational fee."
      },
      {
        "name": "keys_not_confirmed",
        "args": [
          {
            "type": "application",
            "name": "del_app",
            "desc": "App ID of the delegator contract."
          }
        ],
        "readonly": false,
        "returns": {
          "type": "(address,byte[100])",
          "desc": "Address of delegator manager."
        },
        "desc": "Reports that keys of a delegator contract have not been confirmed in time."
      },
      {
        "name": "keys_not_submitted",
        "args": [
          {
            "type": "application",
            "name": "del_app",
            "desc": "App ID of the delegator contract."
          }
        ],
        "readonly": false,
        "returns": {
          "type": "(address,byte[100])",
          "desc": "Address of delegator manager."
        },
        "desc": "Reports that keys of a delegator contract have not been submitted in time."
      },
      {
        "name": "keys_submit",
        "args": [
          {
            "type": "address",
            "name": "val_manager",
            "desc": "Purported validator manager account."
          },
          {
            "type": "application",
            "name": "del_app",
            "desc": "App ID of the delegator contract."
          },
          {
            "type": "(uint64,uint64,uint64,byte[32],byte[32],byte[64],address)",
            "name": "key_reg_txn_info",
            "desc": "Information about the generated participation keys."
          }
        ],
        "readonly": false,
        "returns": {
          "type": "(address,byte[100])",
          "desc": "Address of delegator manager."
        },
        "desc": "Validator manager submits the keys generated for the delegator beneficiary according to the contract terms."
      },
      {
        "name": "breach_limits",
        "args": [
          {
            "type": "application",
            "name": "del_app",
            "desc": "App ID of the delegator contract."
          }
        ],
        "readonly": false,
        "returns": {
          "type": "(bool,(uint64,uint64,uint64),address,byte[100])",
          "desc": "Boolean denoting if maximum number of breaches has already been reached (True) or not (False)."
        },
        "desc": "Reports that a limit breach event occurred on the delegator beneficiary."
      },
      {
        "name": "breach_pay",
        "args": [
          {
            "type": "application",
            "name": "del_app",
            "desc": "App ID of the delegator contract."
          }
        ],
        "readonly": false,
        "returns": {
          "type": "(address,byte[100])",
          "desc": "Address of delegator manager."
        },
        "desc": "Reports that a payment for the fee cannot be made from the delegator contract.\nThis can happen if the DelegatorContract payment asset has been frozen or clawed back by the asset manager."
      },
      {
        "name": "breach_suspended",
        "args": [
          {
            "type": "application",
            "name": "del_app",
            "desc": "App ID of the delegator contract."
          }
        ],
        "readonly": false,
        "returns": {
          "type": "((uint64,uint64,uint64),address,byte[100])",
          "desc": "Amount of earnings of the validator which equal any unclaimed operational fee minus platform commission, amount of platform earnings from the commission, and the asset in which the earnings are denoted."
        },
        "desc": "Reports that the delegator beneficiary was suspended by consensus."
      },
      {
        "name": "contract_claim",
        "args": [
          {
            "type": "application",
            "name": "del_app",
            "desc": "App ID of the delegator contract."
          }
        ],
        "readonly": false,
        "returns": {
          "type": "(uint64,uint64,uint64)",
          "desc": "Amount of earnings of validator which equal any not yet claimed operational fee minus platform commission, amount of platform earnings from the commission, and the asset in which the earnings are denoted."
        },
        "desc": "Claims the operational fee up to this round from a delegator contract and\ntransfers it to the validator ad as well as the commission to the platform."
      },
      {
        "name": "contract_expired",
        "args": [
          {
            "type": "application",
            "name": "del_app",
            "desc": "App ID of the delegator contract."
          }
        ],
        "readonly": false,
        "returns": {
          "type": "(address,byte[100])",
          "desc": "Address of delegator manager."
        },
        "desc": "Reports that a delegator contract has expired."
      },
      {
        "name": "contract_withdraw",
        "args": [
          {
            "type": "address",
            "name": "del_manager",
            "desc": "Purported delegator manager account."
          },
          {
            "type": "application",
            "name": "del_app",
            "desc": "App ID of the delegator contract."
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        },
        "desc": "Reports that a delegator has gracefully withdrawn from the contract prematurely.\nThe delegator beneficiary should issue a key deregistration transaction 320 round before this call."
      },
      {
        "name": "contract_delete",
        "args": [
          {
            "type": "address",
            "name": "del_manager",
            "desc": "Purported delegator manager account."
          },
          {
            "type": "application",
            "name": "del_app",
            "desc": "App ID of the delegator contract."
          }
        ],
        "readonly": false,
        "returns": {
          "type": "(uint64,uint64)"
        },
        "desc": "Delegator deletes an ended contract, withdraws any remaining balance, and returns the MBR from ValidatorAd."
      },
      {
        "name": "contract_report_expiry_soon",
        "args": [
          {
            "type": "uint64",
            "name": "before_expiry",
            "desc": "How many rounds before contract end can the report be made."
          },
          {
            "type": "uint64",
            "name": "report_period",
            "desc": "How frequently can the report be made."
          },
          {
            "type": "application",
            "name": "del_app",
            "desc": "App ID of the delegator contract."
          }
        ],
        "readonly": false,
        "returns": {
          "type": "(address,byte[100])",
          "desc": "Address of delegator manager."
        },
        "desc": "Reports that the contract will expire soon."
      },
      {
        "name": "gas",
        "args": [],
        "readonly": false,
        "returns": {
          "type": "void"
        },
        "desc": "To fit more resources in app reference arrays."
      },
      {
        "name": "get_validator_asa",
        "args": [
          {
            "type": "uint64",
            "name": "asset_id"
          }
        ],
        "readonly": true,
        "returns": {
          "type": "(uint64,uint64)",
          "desc": "Information about the payment asset that is or was accepted on the platform."
        },
        "desc": "Returns information about the ASA that is or was supported by the validator ad at any point of time before\ndeletion."
      }
    ],
    "networks": {}
  },
  "bare_call_config": {}
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<SendTransactionParams, 'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'>
}
export type AppClientComposeExecuteParams = Pick<SendTransactionParams, 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'>

export type IncludeSchema = {
  /**
   * Any overrides for the storage schema to request for the created app; by default the schema indicated by the app spec is used.
   */
  schema?: Partial<AppStorageSchema>
}

/**
 * Defines the types of available calls and state of the ValidatorAd smart contract.
 */
export type ValidatorAd = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'ad_create(address)uint64' | 'ad_create', {
      argsObj: {
        /**
         * Owner address for the validator ad.
         */
        valOwner: string
      }
      argsTuple: [valOwner: string]
      /**
       * App ID of the created validator ad application.
       */
      returns: bigint
    }>
    & Record<'ad_config(address,address,bool,uint64)void' | 'ad_config', {
      argsObj: {
        /**
         * Owner address of the validator ad.
         */
        valOwner: string
        /**
         * Manager address for the validator ad.
         */
        valManager: string
        /**
         * Set to True if validator ad should be accepting new delegators, otherwise set to False.
         */
        live: boolean
        /**
         * Maximum number of delegators the validator is willing to manage simultaneously.
         */
        cntDelMax: bigint | number
      }
      argsTuple: [valOwner: string, valManager: string, live: boolean, cntDelMax: bigint | number]
      returns: void
    }>
    & Record<'ad_delete(address)void' | 'ad_delete', {
      argsObj: {
        /**
         * Owner address of the validator ad.
         */
        valOwner: string
      }
      argsTuple: [valOwner: string]
      returns: void
    }>
    & Record<'ad_ready(address,bool)void' | 'ad_ready', {
      argsObj: {
        /**
         * Manager address for the validator ad.
         */
        valManager: string
        /**
         * Set to True if validator manager is ready for accepting new delegators, otherwise set to False.
         */
        ready: boolean
      }
      argsTuple: [valManager: string, ready: boolean]
      returns: void
    }>
    & Record<'ad_self_disclose(address,(byte[30],byte[60],byte[2],uint64,byte[20]))void' | 'ad_self_disclose', {
      argsObj: {
        /**
         * Owner address of the validator ad.
         */
        valOwner: string
        /**
         * Self-disclosed information about the validator.
         */
        valInfo: [Uint8Array, Uint8Array, Uint8Array, bigint | number, Uint8Array]
      }
      argsTuple: [valOwner: string, valInfo: [Uint8Array, Uint8Array, Uint8Array, bigint | number, Uint8Array]]
      returns: void
    }>
    & Record<'ad_terms(address,byte[32],(uint64,uint64,uint64,uint64,uint64),(uint64,uint64,uint64,uint64,uint64),(uint64,uint64),((uint64,uint64)[2]),(uint64,uint64),pay)void' | 'ad_terms', {
      argsObj: {
        /**
         * Owner address of the validator ad.
         */
        valOwner: string
        /**
         * Hash (i.e. SHA 256) of the Terms and Conditions agreed by the validator.
         */
        tcSha256: Uint8Array
        /**
         * Validator's terms about timing.
         */
        termsTime: [bigint | number, bigint | number, bigint | number, bigint | number, bigint | number]
        /**
         * Validator's terms about pricing.
         */
        termsPrice: [bigint | number, bigint | number, bigint | number, bigint | number, bigint | number]
        /**
         * Validator's terms about stake limits.
         */
        termsStake: [bigint | number, bigint | number]
        /**
         * Validator's terms about gating requirements.
         */
        termsReqs: [[[bigint | number, bigint | number], [bigint | number, bigint | number]]]
        /**
         * Validator's terms about warnings.
         */
        termsWarn: [bigint | number, bigint | number]
        /**
         * Transaction for the payment of MBR increase.
         */
        txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [valOwner: string, tcSha256: Uint8Array, termsTime: [bigint | number, bigint | number, bigint | number, bigint | number, bigint | number], termsPrice: [bigint | number, bigint | number, bigint | number, bigint | number, bigint | number], termsStake: [bigint | number, bigint | number], termsReqs: [[[bigint | number, bigint | number], [bigint | number, bigint | number]]], termsWarn: [bigint | number, bigint | number], txn: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      returns: void
    }>
    & Record<'ad_income(address,uint64)uint64' | 'ad_income', {
      argsObj: {
        /**
         * Owner address of the validator ad.
         */
        valOwner: string
        /**
         * ID of the asset (i.e. ASA ID or 0 for ALGO) for which the owner would like to withdraw all earnings from the validator ad.
         */
        assetId: bigint | number
      }
      argsTuple: [valOwner: string, assetId: bigint | number]
      /**
       * Withdrawn income from the validator ad for the input asset.
       */
      returns: bigint
    }>
    & Record<'ad_asa_close(address,uint64)void' | 'ad_asa_close', {
      argsObj: {
        /**
         * Owner address of the validator ad.
         */
        valOwner: string
        /**
         * ID of the asset (i.e. ASA ID or 0 for ALGO) for which the owner would like remove its storage.
         */
        assetId: bigint | number
      }
      argsTuple: [valOwner: string, assetId: bigint | number]
      returns: void
    }>
    & Record<'template_load_init(address,uint64,pay)void' | 'template_load_init', {
      argsObj: {
        /**
         * Owner address of the validator ad.
         */
        valOwner: string
        /**
         * Size of the delegator contract template in bytes.
         */
        templateSize: bigint | number
        /**
         * Payment transaction for the payment of the increase of validator ad MBR due to creation of box for storing the delegator contract template.
         */
        mbrTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [valOwner: string, templateSize: bigint | number, mbrTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      returns: void
    }>
    & Record<'template_load_data(address,uint64,byte[])void' | 'template_load_data', {
      argsObj: {
        /**
         * Owner address of the validator ad.
         */
        valOwner: string
        /**
         * Offset in the box at which to replace the data.
         */
        offset: bigint | number
        /**
         * Data to replace in the box at the defined position.
         */
        data: Uint8Array
      }
      argsTuple: [valOwner: string, offset: bigint | number, data: Uint8Array]
      returns: void
    }>
    & Record<'template_load_end(address)void' | 'template_load_end', {
      argsObj: {
        /**
         * Owner address of the validator ad.
         */
        valOwner: string
      }
      argsTuple: [valOwner: string]
      returns: void
    }>
    & Record<'contract_create(address,address,uint64,uint64,address,(uint64,uint64),pay,txn)uint64' | 'contract_create', {
      argsObj: {
        /**
         * Manager address for the delegation contract.
         */
        delManager: string
        /**
         * Beneficiary address for the delegation contract.
         */
        delBeneficiary: string
        /**
         * Contract duration in number of rounds.
         */
        roundsDuration: bigint | number
        /**
         * The maximum amount of ALGO that the delegator beneficiary address intends to have at any point in time during the contract duration.
         */
        stakeMax: bigint | number
        /**
         * Address of the partner that collects the partner convenience fees. If there is no partner, set it to Global.zero_address.
         */
        partnerAddress: string
        /**
         * Commissions charged on top of validator setup and operational fees, for partner's convenience offer. The values are represented in ppm.
         */
        partnerCommissions: [bigint | number, bigint | number]
        /**
         * Payment transaction for the payment of the increase of validator ad MBR due to creation of a new contract.
         */
        mbrTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        /**
         * Transaction for the payment of the setup and operational fee.
         */
        txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [delManager: string, delBeneficiary: string, roundsDuration: bigint | number, stakeMax: bigint | number, partnerAddress: string, partnerCommissions: [bigint | number, bigint | number], mbrTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>, txn: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      /**
       * App ID of the created delegator contract application.
       */
      returns: bigint
    }>
    & Record<'keys_confirm(address,application)void' | 'keys_confirm', {
      argsObj: {
        /**
         * Purported delegator manager account.
         */
        delManager: string
        delApp: number | bigint
      }
      argsTuple: [delManager: string, delApp: number | bigint]
      returns: void
    }>
    & Record<'keys_not_confirmed(application)(address,byte[100])' | 'keys_not_confirmed', {
      argsObj: {
        /**
         * App ID of the delegator contract.
         */
        delApp: number | bigint
      }
      argsTuple: [delApp: number | bigint]
      /**
       * Address of delegator manager.
       */
      returns: Message
    }>
    & Record<'keys_not_submitted(application)(address,byte[100])' | 'keys_not_submitted', {
      argsObj: {
        /**
         * App ID of the delegator contract.
         */
        delApp: number | bigint
      }
      argsTuple: [delApp: number | bigint]
      /**
       * Address of delegator manager.
       */
      returns: Message
    }>
    & Record<'keys_submit(address,application,(uint64,uint64,uint64,byte[32],byte[32],byte[64],address))(address,byte[100])' | 'keys_submit', {
      argsObj: {
        /**
         * Purported validator manager account.
         */
        valManager: string
        /**
         * App ID of the delegator contract.
         */
        delApp: number | bigint
        /**
         * Information about the generated participation keys.
         */
        keyRegTxnInfo: [bigint | number, bigint | number, bigint | number, Uint8Array, Uint8Array, Uint8Array, string]
      }
      argsTuple: [valManager: string, delApp: number | bigint, keyRegTxnInfo: [bigint | number, bigint | number, bigint | number, Uint8Array, Uint8Array, Uint8Array, string]]
      /**
       * Address of delegator manager.
       */
      returns: Message
    }>
    & Record<'breach_limits(application)(bool,(uint64,uint64,uint64),address,byte[100])' | 'breach_limits', {
      argsObj: {
        /**
         * App ID of the delegator contract.
         */
        delApp: number | bigint
      }
      argsTuple: [delApp: number | bigint]
      /**
       * Boolean denoting if maximum number of breaches has already been reached (True) or not (False).
       */
      returns: BreachLimitsReturn
    }>
    & Record<'breach_pay(application)(address,byte[100])' | 'breach_pay', {
      argsObj: {
        /**
         * App ID of the delegator contract.
         */
        delApp: number | bigint
      }
      argsTuple: [delApp: number | bigint]
      /**
       * Address of delegator manager.
       */
      returns: Message
    }>
    & Record<'breach_suspended(application)((uint64,uint64,uint64),address,byte[100])' | 'breach_suspended', {
      argsObj: {
        /**
         * App ID of the delegator contract.
         */
        delApp: number | bigint
      }
      argsTuple: [delApp: number | bigint]
      /**
       * Amount of earnings of the validator which equal any unclaimed operational fee minus platform commission, amount of platform earnings from the commission, and the asset in which the earnings are denoted.
       */
      returns: EarningsDistributionAndMessage
    }>
    & Record<'contract_claim(application)(uint64,uint64,uint64)' | 'contract_claim', {
      argsObj: {
        /**
         * App ID of the delegator contract.
         */
        delApp: number | bigint
      }
      argsTuple: [delApp: number | bigint]
      /**
       * Amount of earnings of validator which equal any not yet claimed operational fee minus platform commission, amount of platform earnings from the commission, and the asset in which the earnings are denoted.
       */
      returns: EarningsDistribution
    }>
    & Record<'contract_expired(application)(address,byte[100])' | 'contract_expired', {
      argsObj: {
        /**
         * App ID of the delegator contract.
         */
        delApp: number | bigint
      }
      argsTuple: [delApp: number | bigint]
      /**
       * Address of delegator manager.
       */
      returns: Message
    }>
    & Record<'contract_withdraw(address,application)void' | 'contract_withdraw', {
      argsObj: {
        /**
         * Purported delegator manager account.
         */
        delManager: string
        /**
         * App ID of the delegator contract.
         */
        delApp: number | bigint
      }
      argsTuple: [delManager: string, delApp: number | bigint]
      returns: void
    }>
    & Record<'contract_delete(address,application)(uint64,uint64)' | 'contract_delete', {
      argsObj: {
        /**
         * Purported delegator manager account.
         */
        delManager: string
        /**
         * App ID of the delegator contract.
         */
        delApp: number | bigint
      }
      argsTuple: [delManager: string, delApp: number | bigint]
      returns: ContractDeleteReturn
    }>
    & Record<'contract_report_expiry_soon(uint64,uint64,application)(address,byte[100])' | 'contract_report_expiry_soon', {
      argsObj: {
        /**
         * How many rounds before contract end can the report be made.
         */
        beforeExpiry: bigint | number
        /**
         * How frequently can the report be made.
         */
        reportPeriod: bigint | number
        /**
         * App ID of the delegator contract.
         */
        delApp: number | bigint
      }
      argsTuple: [beforeExpiry: bigint | number, reportPeriod: bigint | number, delApp: number | bigint]
      /**
       * Address of delegator manager.
       */
      returns: Message
    }>
    & Record<'gas()void' | 'gas', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'get_validator_asa(uint64)(uint64,uint64)' | 'get_validator_asa', {
      argsObj: {
        assetId: bigint | number
      }
      argsTuple: [assetId: bigint | number]
      /**
       * Information about the payment asset that is or was accepted on the platform.
       */
      returns: ValidatorAsa
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      cntAsa?: IntegerState
      cntDel?: IntegerState
      cntDelMax?: IntegerState
      delAppList?: BinaryState
      noticeboardAppId?: IntegerState
      state?: BinaryState
      tcSha256?: BinaryState
      p?: BinaryState
      g?: BinaryState
      s?: BinaryState
      t?: BinaryState
      w?: BinaryState
      totalAlgoEarned?: IntegerState
      totalAlgoFeesGenerated?: IntegerState
      /**
       * Self-disclosed information about validator.
       */
      v?: BinaryState
      valManager?: BinaryState
      valOwner?: BinaryState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type ValidatorAdSig = keyof ValidatorAd['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends ValidatorAdSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Represents a ValidatorSelfDisclosure result as a struct
 */
export type ValidatorSelfDisclosure = {
  name: Uint8Array
  https: Uint8Array
  countryCode: Uint8Array
  hwCat: bigint
  nodeVersion: Uint8Array
}
/**
 * Converts the tuple representation of a ValidatorSelfDisclosure to the struct representation
 */
export function ValidatorSelfDisclosure([name, https, countryCode, hwCat, nodeVersion]: [Uint8Array, Uint8Array, Uint8Array, bigint, Uint8Array] ) {
  return {
    name,
    https,
    countryCode,
    hwCat,
    nodeVersion,
  }
}
/**
 * Represents a ValidatorTermsTiming result as a struct
 */
export type ValidatorTermsTiming = {
  roundsSetup: bigint
  roundsConfirm: bigint
  roundsDurationMin: bigint
  roundsDurationMax: bigint
  roundMaxEnd: bigint
}
/**
 * Converts the tuple representation of a ValidatorTermsTiming to the struct representation
 */
export function ValidatorTermsTiming([roundsSetup, roundsConfirm, roundsDurationMin, roundsDurationMax, roundMaxEnd]: [bigint, bigint, bigint, bigint, bigint] ) {
  return {
    roundsSetup,
    roundsConfirm,
    roundsDurationMin,
    roundsDurationMax,
    roundMaxEnd,
  }
}
/**
 * Represents a ValidatorTermsPricing result as a struct
 */
export type ValidatorTermsPricing = {
  commission: bigint
  feeRoundMin: bigint
  feeRoundVar: bigint
  feeSetup: bigint
  feeAssetId: bigint
}
/**
 * Converts the tuple representation of a ValidatorTermsPricing to the struct representation
 */
export function ValidatorTermsPricing([commission, feeRoundMin, feeRoundVar, feeSetup, feeAssetId]: [bigint, bigint, bigint, bigint, bigint] ) {
  return {
    commission,
    feeRoundMin,
    feeRoundVar,
    feeSetup,
    feeAssetId,
  }
}
/**
 * Represents a ValidatorTermsStakeLimits result as a struct
 */
export type ValidatorTermsStakeLimits = {
  stakeMax: bigint
  stakeGratis: bigint
}
/**
 * Converts the tuple representation of a ValidatorTermsStakeLimits to the struct representation
 */
export function ValidatorTermsStakeLimits([stakeMax, stakeGratis]: [bigint, bigint] ) {
  return {
    stakeMax,
    stakeGratis,
  }
}
/**
 * Represents a ValidatorTermsGating result as a struct
 */
export type ValidatorTermsGating = {
  gatingAsaList: [[bigint, bigint], [bigint, bigint]]
}
/**
 * Converts the tuple representation of a ValidatorTermsGating to the struct representation
 */
export function ValidatorTermsGating([gatingAsaList]: [[[bigint, bigint], [bigint, bigint]]] ) {
  return {
    gatingAsaList,
  }
}
/**
 * Represents a ValidatorTermsWarnings result as a struct
 */
export type ValidatorTermsWarnings = {
  cntWarningMax: bigint
  roundsWarning: bigint
}
/**
 * Converts the tuple representation of a ValidatorTermsWarnings to the struct representation
 */
export function ValidatorTermsWarnings([cntWarningMax, roundsWarning]: [bigint, bigint] ) {
  return {
    cntWarningMax,
    roundsWarning,
  }
}
/**
 * Represents a PartnerCommissions result as a struct
 */
export type PartnerCommissions = {
  commissionSetup: bigint
  commissionOperational: bigint
}
/**
 * Converts the tuple representation of a PartnerCommissions to the struct representation
 */
export function PartnerCommissions([commissionSetup, commissionOperational]: [bigint, bigint] ) {
  return {
    commissionSetup,
    commissionOperational,
  }
}
/**
 * Represents a Message result as a struct
 */
export type Message = {
  delManager: string
  msg: Uint8Array
}
/**
 * Converts the tuple representation of a Message to the struct representation
 */
export function Message([delManager, msg]: [string, Uint8Array] ) {
  return {
    delManager,
    msg,
  }
}
/**
 * Represents a KeyRegTxnInfo result as a struct
 */
export type KeyRegTxnInfo = {
  voteFirst: bigint
  voteLast: bigint
  voteKeyDilution: bigint
  votePk: Uint8Array
  selectionPk: Uint8Array
  stateProofPk: Uint8Array
  sender: string
}
/**
 * Converts the tuple representation of a KeyRegTxnInfo to the struct representation
 */
export function KeyRegTxnInfo([voteFirst, voteLast, voteKeyDilution, votePk, selectionPk, stateProofPk, sender]: [bigint, bigint, bigint, Uint8Array, Uint8Array, Uint8Array, string] ) {
  return {
    voteFirst,
    voteLast,
    voteKeyDilution,
    votePk,
    selectionPk,
    stateProofPk,
    sender,
  }
}
/**
 * Represents a BreachLimitsReturn result as a struct
 */
export type BreachLimitsReturn = {
  maxBreachReached: boolean
  earningsDistribution: [bigint, bigint, bigint]
  delManager: string
  msg: Uint8Array
}
/**
 * Converts the tuple representation of a BreachLimitsReturn to the struct representation
 */
export function BreachLimitsReturn([maxBreachReached, earningsDistribution, delManager, msg]: [boolean, [bigint, bigint, bigint], string, Uint8Array] ) {
  return {
    maxBreachReached,
    earningsDistribution,
    delManager,
    msg,
  }
}
/**
 * Represents a EarningsDistributionAndMessage result as a struct
 */
export type EarningsDistributionAndMessage = {
  earningsDistribution: [bigint, bigint, bigint]
  delManager: string
  msg: Uint8Array
}
/**
 * Converts the tuple representation of a EarningsDistributionAndMessage to the struct representation
 */
export function EarningsDistributionAndMessage([earningsDistribution, delManager, msg]: [[bigint, bigint, bigint], string, Uint8Array] ) {
  return {
    earningsDistribution,
    delManager,
    msg,
  }
}
/**
 * Represents a EarningsDistribution result as a struct
 */
export type EarningsDistribution = {
  user: bigint
  platform: bigint
  assetId: bigint
}
/**
 * Converts the tuple representation of a EarningsDistribution to the struct representation
 */
export function EarningsDistribution([user, platform, assetId]: [bigint, bigint, bigint] ) {
  return {
    user,
    platform,
    assetId,
  }
}
/**
 * Represents a ContractDeleteReturn result as a struct
 */
export type ContractDeleteReturn = {
  remainingBalance: bigint
  assetId: bigint
}
/**
 * Converts the tuple representation of a ContractDeleteReturn to the struct representation
 */
export function ContractDeleteReturn([remainingBalance, assetId]: [bigint, bigint] ) {
  return {
    remainingBalance,
    assetId,
  }
}
/**
 * Represents a ValidatorASA result as a struct
 */
export type ValidatorAsa = {
  totalEarning: bigint
  totalFeesGenerated: bigint
}
/**
 * Converts the tuple representation of a ValidatorASA to the struct representation
 */
export function ValidatorAsa([totalEarning, totalFeesGenerated]: [bigint, bigint] ) {
  return {
    totalEarning,
    totalFeesGenerated,
  }
}
/**
 * Maps a method signature from the ValidatorAd smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends ValidatorAdSig> = ValidatorAd['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the ValidatorAd smart contract to the method's return type
 */
export type MethodReturn<TSignature extends ValidatorAdSig> = ValidatorAd['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type ValidatorAdCreateCalls = (typeof ValidatorAdCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type ValidatorAdCreateCallParams =
  | (TypedCallParams<'ad_create(address)uint64'> & (OnCompleteNoOp))
/**
 * A factory for available 'delete' calls
 */
export type ValidatorAdDeleteCalls = (typeof ValidatorAdCallFactory)['delete']
/**
 * Defines supported delete methods for this smart contract
 */
export type ValidatorAdDeleteCallParams =
  | TypedCallParams<'ad_delete(address)void'>
/**
 * Defines arguments required for the deploy method.
 */
export type ValidatorAdDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: ValidatorAdCreateCalls) => ValidatorAdCreateCallParams
  /**
   * A delegate which takes a delete call factory and returns the delete call params for this smart contract
   */
  deleteCall?: (callFactory: ValidatorAdDeleteCalls) => ValidatorAdDeleteCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class ValidatorAdCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the ValidatorAd smart contract using the ad_create(address)uint64 ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      adCreate(args: MethodArgs<'ad_create(address)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'ad_create(address)uint64' as const,
          methodArgs: Array.isArray(args) ? args : [args.valOwner],
          ...params,
        }
      },
    }
  }

  /**
   * Gets available delete call factories
   */
  static get delete() {
    return {
      /**
       * Constructs a delete call for the ValidatorAd smart contract using the ad_delete(address)void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      adDelete(args: MethodArgs<'ad_delete(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return {
          method: 'ad_delete(address)void' as const,
          methodArgs: Array.isArray(args) ? args : [args.valOwner],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the ad_config(address,address,bool,uint64)void ABI method
   *
   * Sets all operation configuration parameters for the validator ad, i.e.
the validator manager account, the status whether the ad is live to accept new delegators (`live=True`) or not (`live=False`), and the maximum number of delegators the validators can accept.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static adConfig(args: MethodArgs<'ad_config(address,address,bool,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'ad_config(address,address,bool,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.valOwner, args.valManager, args.live, args.cntDelMax],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the ad_ready(address,bool)void ABI method
   *
   * Ad manager sets its readiness for operation.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static adReady(args: MethodArgs<'ad_ready(address,bool)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'ad_ready(address,bool)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.valManager, args.ready],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the ad_self_disclose(address,(byte[30],byte[60],byte[2],uint64,byte[20]))void ABI method
   *
   * Ad owner sets its self-disclosure information.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static adSelfDisclose(args: MethodArgs<'ad_self_disclose(address,(byte[30],byte[60],byte[2],uint64,byte[20]))void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'ad_self_disclose(address,(byte[30],byte[60],byte[2],uint64,byte[20]))void' as const,
      methodArgs: Array.isArray(args) ? args : [args.valOwner, args.valInfo],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the ad_terms(address,byte[32],(uint64,uint64,uint64,uint64,uint64),(uint64,uint64,uint64,uint64,uint64),(uint64,uint64),((uint64,uint64)[2]),(uint64,uint64),pay)void ABI method
   *
   * Sets all the terms of the validator.
With this action, the validator agrees with the (new) terms.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static adTerms(args: MethodArgs<'ad_terms(address,byte[32],(uint64,uint64,uint64,uint64,uint64),(uint64,uint64,uint64,uint64,uint64),(uint64,uint64),((uint64,uint64)[2]),(uint64,uint64),pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'ad_terms(address,byte[32],(uint64,uint64,uint64,uint64,uint64),(uint64,uint64,uint64,uint64,uint64),(uint64,uint64),((uint64,uint64)[2]),(uint64,uint64),pay)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.valOwner, args.tcSha256, args.termsTime, args.termsPrice, args.termsStake, args.termsReqs, args.termsWarn, args.txn],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the ad_income(address,uint64)uint64 ABI method
   *
   * Validator owner withdraws all available balance from the validator ad for the given asset.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static adIncome(args: MethodArgs<'ad_income(address,uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'ad_income(address,uint64)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.valOwner, args.assetId],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the ad_asa_close(address,uint64)void ABI method
   *
   * Removes the asset's storage on the validator ad.
To be used before deleting the contract.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static adAsaClose(args: MethodArgs<'ad_asa_close(address,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'ad_asa_close(address,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.valOwner, args.assetId],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the template_load_init(address,uint64,pay)void ABI method
   *
   * Starts the process of uploading delegator contract template.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static templateLoadInit(args: MethodArgs<'template_load_init(address,uint64,pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'template_load_init(address,uint64,pay)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.valOwner, args.templateSize, args.mbrTxn],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the template_load_data(address,uint64,byte[])void ABI method
   *
   * Uploads a data chunk to the delegator contract template.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static templateLoadData(args: MethodArgs<'template_load_data(address,uint64,byte[])void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'template_load_data(address,uint64,byte[])void' as const,
      methodArgs: Array.isArray(args) ? args : [args.valOwner, args.offset, args.data],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the template_load_end(address)void ABI method
   *
   * Ends uploading of the delegator contract template.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static templateLoadEnd(args: MethodArgs<'template_load_end(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'template_load_end(address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.valOwner],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the contract_create(address,address,uint64,uint64,address,(uint64,uint64),pay,txn)uint64 ABI method
   *
   * Creates a new delegator contract with the current delegation terms for the input
delegator contract manager and delegator contract beneficiary with the specified duration.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static contractCreate(args: MethodArgs<'contract_create(address,address,uint64,uint64,address,(uint64,uint64),pay,txn)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'contract_create(address,address,uint64,uint64,address,(uint64,uint64),pay,txn)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.delManager, args.delBeneficiary, args.roundsDuration, args.stakeMax, args.partnerAddress, args.partnerCommissions, args.mbrTxn, args.txn],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the keys_confirm(address,application)void ABI method
   *
   * Delegator manager confirms that the delegator beneficiary has confirmed the submitted keys
and pays for the operational fee.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static keysConfirm(args: MethodArgs<'keys_confirm(address,application)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'keys_confirm(address,application)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.delManager, args.delApp],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the keys_not_confirmed(application)(address,byte[100]) ABI method
   *
   * Reports that keys of a delegator contract have not been confirmed in time.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static keysNotConfirmed(args: MethodArgs<'keys_not_confirmed(application)(address,byte[100])'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'keys_not_confirmed(application)(address,byte[100])' as const,
      methodArgs: Array.isArray(args) ? args : [args.delApp],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the keys_not_submitted(application)(address,byte[100]) ABI method
   *
   * Reports that keys of a delegator contract have not been submitted in time.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static keysNotSubmitted(args: MethodArgs<'keys_not_submitted(application)(address,byte[100])'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'keys_not_submitted(application)(address,byte[100])' as const,
      methodArgs: Array.isArray(args) ? args : [args.delApp],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the keys_submit(address,application,(uint64,uint64,uint64,byte[32],byte[32],byte[64],address))(address,byte[100]) ABI method
   *
   * Validator manager submits the keys generated for the delegator beneficiary according to the contract terms.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static keysSubmit(args: MethodArgs<'keys_submit(address,application,(uint64,uint64,uint64,byte[32],byte[32],byte[64],address))(address,byte[100])'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'keys_submit(address,application,(uint64,uint64,uint64,byte[32],byte[32],byte[64],address))(address,byte[100])' as const,
      methodArgs: Array.isArray(args) ? args : [args.valManager, args.delApp, args.keyRegTxnInfo],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the breach_limits(application)(bool,(uint64,uint64,uint64),address,byte[100]) ABI method
   *
   * Reports that a limit breach event occurred on the delegator beneficiary.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static breachLimits(args: MethodArgs<'breach_limits(application)(bool,(uint64,uint64,uint64),address,byte[100])'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'breach_limits(application)(bool,(uint64,uint64,uint64),address,byte[100])' as const,
      methodArgs: Array.isArray(args) ? args : [args.delApp],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the breach_pay(application)(address,byte[100]) ABI method
   *
   * Reports that a payment for the fee cannot be made from the delegator contract.
This can happen if the DelegatorContract payment asset has been frozen or clawed back by the asset manager.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static breachPay(args: MethodArgs<'breach_pay(application)(address,byte[100])'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'breach_pay(application)(address,byte[100])' as const,
      methodArgs: Array.isArray(args) ? args : [args.delApp],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the breach_suspended(application)((uint64,uint64,uint64),address,byte[100]) ABI method
   *
   * Reports that the delegator beneficiary was suspended by consensus.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static breachSuspended(args: MethodArgs<'breach_suspended(application)((uint64,uint64,uint64),address,byte[100])'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'breach_suspended(application)((uint64,uint64,uint64),address,byte[100])' as const,
      methodArgs: Array.isArray(args) ? args : [args.delApp],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the contract_claim(application)(uint64,uint64,uint64) ABI method
   *
   * Claims the operational fee up to this round from a delegator contract and
transfers it to the validator ad as well as the commission to the platform.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static contractClaim(args: MethodArgs<'contract_claim(application)(uint64,uint64,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'contract_claim(application)(uint64,uint64,uint64)' as const,
      methodArgs: Array.isArray(args) ? args : [args.delApp],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the contract_expired(application)(address,byte[100]) ABI method
   *
   * Reports that a delegator contract has expired.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static contractExpired(args: MethodArgs<'contract_expired(application)(address,byte[100])'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'contract_expired(application)(address,byte[100])' as const,
      methodArgs: Array.isArray(args) ? args : [args.delApp],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the contract_withdraw(address,application)void ABI method
   *
   * Reports that a delegator has gracefully withdrawn from the contract prematurely.
The delegator beneficiary should issue a key deregistration transaction 320 round before this call.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static contractWithdraw(args: MethodArgs<'contract_withdraw(address,application)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'contract_withdraw(address,application)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.delManager, args.delApp],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the contract_delete(address,application)(uint64,uint64) ABI method
   *
   * Delegator deletes an ended contract, withdraws any remaining balance, and returns the MBR from ValidatorAd.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static contractDelete(args: MethodArgs<'contract_delete(address,application)(uint64,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'contract_delete(address,application)(uint64,uint64)' as const,
      methodArgs: Array.isArray(args) ? args : [args.delManager, args.delApp],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the contract_report_expiry_soon(uint64,uint64,application)(address,byte[100]) ABI method
   *
   * Reports that the contract will expire soon.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static contractReportExpirySoon(args: MethodArgs<'contract_report_expiry_soon(uint64,uint64,application)(address,byte[100])'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'contract_report_expiry_soon(uint64,uint64,application)(address,byte[100])' as const,
      methodArgs: Array.isArray(args) ? args : [args.beforeExpiry, args.reportPeriod, args.delApp],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the gas()void ABI method
   *
   * To fit more resources in app reference arrays.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static gas(args: MethodArgs<'gas()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'gas()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the get_validator_asa(uint64)(uint64,uint64) ABI method
   *
   * Returns information about the ASA that is or was supported by the validator ad at any point of time before
deletion.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getValidatorAsa(args: MethodArgs<'get_validator_asa(uint64)(uint64,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'get_validator_asa(uint64)(uint64,uint64)' as const,
      methodArgs: Array.isArray(args) ? args : [args.assetId],
      ...params,
    }
  }
}

/**
 * A client to make calls to the ValidatorAd smart contract
 */
export class ValidatorAdClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `ValidatorAdClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof ValidatorAd['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the ValidatorAd smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: ValidatorAdDeployArgs & AppClientDeployCoreParams & IncludeSchema = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(ValidatorAdCallFactory.create)
    const deleteArgs = params.deleteCall?.(ValidatorAdCallFactory.delete)
    return this.appClient.deploy({
      ...params,
      deleteArgs,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the ValidatorAd smart contract using the ad_create(address)uint64 ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result: App ID of the created validator ad application.
       */
      async adCreate(args: MethodArgs<'ad_create(address)uint64'>, params: AppClientCallCoreParams & AppClientCompilationParams & IncludeSchema & CoreAppCallArgs & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<MethodReturn<'ad_create(address)uint64'>, AppCreateCallTransactionResult>(await $this.appClient.create(ValidatorAdCallFactory.create.adCreate(args, params)))
      },
    }
  }

  /**
   * Gets available delete methods
   */
  public get delete() {
    const $this = this
    return {
      /**
       * Deletes an existing instance of the ValidatorAd smart contract using the ad_delete(address)void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The delete result
       */
      async adDelete(args: MethodArgs<'ad_delete(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return $this.mapReturnValue<MethodReturn<'ad_delete(address)void'>>(await $this.appClient.delete(ValidatorAdCallFactory.delete.adDelete(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the ValidatorAd smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the ad_config(address,address,bool,uint64)void ABI method.
   *
   * Sets all operation configuration parameters for the validator ad, i.e.
the validator manager account, the status whether the ad is live to accept new delegators (`live=True`) or not (`live=False`), and the maximum number of delegators the validators can accept.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public adConfig(args: MethodArgs<'ad_config(address,address,bool,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ValidatorAdCallFactory.adConfig(args, params))
  }

  /**
   * Calls the ad_ready(address,bool)void ABI method.
   *
   * Ad manager sets its readiness for operation.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public adReady(args: MethodArgs<'ad_ready(address,bool)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ValidatorAdCallFactory.adReady(args, params))
  }

  /**
   * Calls the ad_self_disclose(address,(byte[30],byte[60],byte[2],uint64,byte[20]))void ABI method.
   *
   * Ad owner sets its self-disclosure information.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public adSelfDisclose(args: MethodArgs<'ad_self_disclose(address,(byte[30],byte[60],byte[2],uint64,byte[20]))void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ValidatorAdCallFactory.adSelfDisclose(args, params))
  }

  /**
   * Calls the ad_terms(address,byte[32],(uint64,uint64,uint64,uint64,uint64),(uint64,uint64,uint64,uint64,uint64),(uint64,uint64),((uint64,uint64)[2]),(uint64,uint64),pay)void ABI method.
   *
   * Sets all the terms of the validator.
With this action, the validator agrees with the (new) terms.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public adTerms(args: MethodArgs<'ad_terms(address,byte[32],(uint64,uint64,uint64,uint64,uint64),(uint64,uint64,uint64,uint64,uint64),(uint64,uint64),((uint64,uint64)[2]),(uint64,uint64),pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ValidatorAdCallFactory.adTerms(args, params))
  }

  /**
   * Calls the ad_income(address,uint64)uint64 ABI method.
   *
   * Validator owner withdraws all available balance from the validator ad for the given asset.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: Withdrawn income from the validator ad for the input asset.
   */
  public adIncome(args: MethodArgs<'ad_income(address,uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ValidatorAdCallFactory.adIncome(args, params))
  }

  /**
   * Calls the ad_asa_close(address,uint64)void ABI method.
   *
   * Removes the asset's storage on the validator ad.
To be used before deleting the contract.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public adAsaClose(args: MethodArgs<'ad_asa_close(address,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ValidatorAdCallFactory.adAsaClose(args, params))
  }

  /**
   * Calls the template_load_init(address,uint64,pay)void ABI method.
   *
   * Starts the process of uploading delegator contract template.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public templateLoadInit(args: MethodArgs<'template_load_init(address,uint64,pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ValidatorAdCallFactory.templateLoadInit(args, params))
  }

  /**
   * Calls the template_load_data(address,uint64,byte[])void ABI method.
   *
   * Uploads a data chunk to the delegator contract template.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public templateLoadData(args: MethodArgs<'template_load_data(address,uint64,byte[])void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ValidatorAdCallFactory.templateLoadData(args, params))
  }

  /**
   * Calls the template_load_end(address)void ABI method.
   *
   * Ends uploading of the delegator contract template.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public templateLoadEnd(args: MethodArgs<'template_load_end(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ValidatorAdCallFactory.templateLoadEnd(args, params))
  }

  /**
   * Calls the contract_create(address,address,uint64,uint64,address,(uint64,uint64),pay,txn)uint64 ABI method.
   *
   * Creates a new delegator contract with the current delegation terms for the input
delegator contract manager and delegator contract beneficiary with the specified duration.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: App ID of the created delegator contract application.
   */
  public contractCreate(args: MethodArgs<'contract_create(address,address,uint64,uint64,address,(uint64,uint64),pay,txn)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ValidatorAdCallFactory.contractCreate(args, params))
  }

  /**
   * Calls the keys_confirm(address,application)void ABI method.
   *
   * Delegator manager confirms that the delegator beneficiary has confirmed the submitted keys
and pays for the operational fee.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public keysConfirm(args: MethodArgs<'keys_confirm(address,application)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ValidatorAdCallFactory.keysConfirm(args, params))
  }

  /**
   * Calls the keys_not_confirmed(application)(address,byte[100]) ABI method.
   *
   * Reports that keys of a delegator contract have not been confirmed in time.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: Address of delegator manager.
   */
  public keysNotConfirmed(args: MethodArgs<'keys_not_confirmed(application)(address,byte[100])'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ValidatorAdCallFactory.keysNotConfirmed(args, params), Message)
  }

  /**
   * Calls the keys_not_submitted(application)(address,byte[100]) ABI method.
   *
   * Reports that keys of a delegator contract have not been submitted in time.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: Address of delegator manager.
   */
  public keysNotSubmitted(args: MethodArgs<'keys_not_submitted(application)(address,byte[100])'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ValidatorAdCallFactory.keysNotSubmitted(args, params), Message)
  }

  /**
   * Calls the keys_submit(address,application,(uint64,uint64,uint64,byte[32],byte[32],byte[64],address))(address,byte[100]) ABI method.
   *
   * Validator manager submits the keys generated for the delegator beneficiary according to the contract terms.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: Address of delegator manager.
   */
  public keysSubmit(args: MethodArgs<'keys_submit(address,application,(uint64,uint64,uint64,byte[32],byte[32],byte[64],address))(address,byte[100])'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ValidatorAdCallFactory.keysSubmit(args, params), Message)
  }

  /**
   * Calls the breach_limits(application)(bool,(uint64,uint64,uint64),address,byte[100]) ABI method.
   *
   * Reports that a limit breach event occurred on the delegator beneficiary.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: Boolean denoting if maximum number of breaches has already been reached (True) or not (False).
   */
  public breachLimits(args: MethodArgs<'breach_limits(application)(bool,(uint64,uint64,uint64),address,byte[100])'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ValidatorAdCallFactory.breachLimits(args, params), BreachLimitsReturn)
  }

  /**
   * Calls the breach_pay(application)(address,byte[100]) ABI method.
   *
   * Reports that a payment for the fee cannot be made from the delegator contract.
This can happen if the DelegatorContract payment asset has been frozen or clawed back by the asset manager.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: Address of delegator manager.
   */
  public breachPay(args: MethodArgs<'breach_pay(application)(address,byte[100])'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ValidatorAdCallFactory.breachPay(args, params), Message)
  }

  /**
   * Calls the breach_suspended(application)((uint64,uint64,uint64),address,byte[100]) ABI method.
   *
   * Reports that the delegator beneficiary was suspended by consensus.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: Amount of earnings of the validator which equal any unclaimed operational fee minus platform commission, amount of platform earnings from the commission, and the asset in which the earnings are denoted.
   */
  public breachSuspended(args: MethodArgs<'breach_suspended(application)((uint64,uint64,uint64),address,byte[100])'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ValidatorAdCallFactory.breachSuspended(args, params), EarningsDistributionAndMessage)
  }

  /**
   * Calls the contract_claim(application)(uint64,uint64,uint64) ABI method.
   *
   * Claims the operational fee up to this round from a delegator contract and
transfers it to the validator ad as well as the commission to the platform.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: Amount of earnings of validator which equal any not yet claimed operational fee minus platform commission, amount of platform earnings from the commission, and the asset in which the earnings are denoted.
   */
  public contractClaim(args: MethodArgs<'contract_claim(application)(uint64,uint64,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ValidatorAdCallFactory.contractClaim(args, params), EarningsDistribution)
  }

  /**
   * Calls the contract_expired(application)(address,byte[100]) ABI method.
   *
   * Reports that a delegator contract has expired.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: Address of delegator manager.
   */
  public contractExpired(args: MethodArgs<'contract_expired(application)(address,byte[100])'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ValidatorAdCallFactory.contractExpired(args, params), Message)
  }

  /**
   * Calls the contract_withdraw(address,application)void ABI method.
   *
   * Reports that a delegator has gracefully withdrawn from the contract prematurely.
The delegator beneficiary should issue a key deregistration transaction 320 round before this call.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public contractWithdraw(args: MethodArgs<'contract_withdraw(address,application)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ValidatorAdCallFactory.contractWithdraw(args, params))
  }

  /**
   * Calls the contract_delete(address,application)(uint64,uint64) ABI method.
   *
   * Delegator deletes an ended contract, withdraws any remaining balance, and returns the MBR from ValidatorAd.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public contractDelete(args: MethodArgs<'contract_delete(address,application)(uint64,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ValidatorAdCallFactory.contractDelete(args, params), ContractDeleteReturn)
  }

  /**
   * Calls the contract_report_expiry_soon(uint64,uint64,application)(address,byte[100]) ABI method.
   *
   * Reports that the contract will expire soon.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: Address of delegator manager.
   */
  public contractReportExpirySoon(args: MethodArgs<'contract_report_expiry_soon(uint64,uint64,application)(address,byte[100])'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ValidatorAdCallFactory.contractReportExpirySoon(args, params), Message)
  }

  /**
   * Calls the gas()void ABI method.
   *
   * To fit more resources in app reference arrays.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public gas(args: MethodArgs<'gas()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ValidatorAdCallFactory.gas(args, params))
  }

  /**
   * Calls the get_validator_asa(uint64)(uint64,uint64) ABI method.
   *
   * Returns information about the ASA that is or was supported by the validator ad at any point of time before
deletion.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: Information about the payment asset that is or was accepted on the platform.
   */
  public getValidatorAsa(args: MethodArgs<'get_validator_asa(uint64)(uint64,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ValidatorAdCallFactory.getValidatorAsa(args, params), ValidatorAsa)
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<ValidatorAd['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get cntAsa() {
        return ValidatorAdClient.getIntegerState(state, 'cnt_asa')
      },
      get cntDel() {
        return ValidatorAdClient.getIntegerState(state, 'cnt_del')
      },
      get cntDelMax() {
        return ValidatorAdClient.getIntegerState(state, 'cnt_del_max')
      },
      get delAppList() {
        return ValidatorAdClient.getBinaryState(state, 'del_app_list')
      },
      get noticeboardAppId() {
        return ValidatorAdClient.getIntegerState(state, 'noticeboard_app_id')
      },
      get state() {
        return ValidatorAdClient.getBinaryState(state, 'state')
      },
      get tcSha256() {
        return ValidatorAdClient.getBinaryState(state, 'tc_sha256')
      },
      get p() {
        return ValidatorAdClient.getBinaryState(state, 'P')
      },
      get g() {
        return ValidatorAdClient.getBinaryState(state, 'G')
      },
      get s() {
        return ValidatorAdClient.getBinaryState(state, 'S')
      },
      get t() {
        return ValidatorAdClient.getBinaryState(state, 'T')
      },
      get w() {
        return ValidatorAdClient.getBinaryState(state, 'W')
      },
      get totalAlgoEarned() {
        return ValidatorAdClient.getIntegerState(state, 'total_algo_earned')
      },
      get totalAlgoFeesGenerated() {
        return ValidatorAdClient.getIntegerState(state, 'total_algo_fees_generated')
      },
      get v() {
        return ValidatorAdClient.getBinaryState(state, 'V')
      },
      get valManager() {
        return ValidatorAdClient.getBinaryState(state, 'val_manager')
      },
      get valOwner() {
        return ValidatorAdClient.getBinaryState(state, 'val_owner')
      },
    }
  }

  public compose(): ValidatorAdComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      adConfig(args: MethodArgs<'ad_config(address,address,bool,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.adConfig(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      adReady(args: MethodArgs<'ad_ready(address,bool)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.adReady(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      adSelfDisclose(args: MethodArgs<'ad_self_disclose(address,(byte[30],byte[60],byte[2],uint64,byte[20]))void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.adSelfDisclose(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      adTerms(args: MethodArgs<'ad_terms(address,byte[32],(uint64,uint64,uint64,uint64,uint64),(uint64,uint64,uint64,uint64,uint64),(uint64,uint64),((uint64,uint64)[2]),(uint64,uint64),pay)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.adTerms(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      adIncome(args: MethodArgs<'ad_income(address,uint64)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.adIncome(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      adAsaClose(args: MethodArgs<'ad_asa_close(address,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.adAsaClose(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      templateLoadInit(args: MethodArgs<'template_load_init(address,uint64,pay)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.templateLoadInit(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      templateLoadData(args: MethodArgs<'template_load_data(address,uint64,byte[])void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.templateLoadData(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      templateLoadEnd(args: MethodArgs<'template_load_end(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.templateLoadEnd(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      contractCreate(args: MethodArgs<'contract_create(address,address,uint64,uint64,address,(uint64,uint64),pay,txn)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.contractCreate(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      keysConfirm(args: MethodArgs<'keys_confirm(address,application)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.keysConfirm(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      keysNotConfirmed(args: MethodArgs<'keys_not_confirmed(application)(address,byte[100])'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.keysNotConfirmed(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(Message)
        return this
      },
      keysNotSubmitted(args: MethodArgs<'keys_not_submitted(application)(address,byte[100])'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.keysNotSubmitted(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(Message)
        return this
      },
      keysSubmit(args: MethodArgs<'keys_submit(address,application,(uint64,uint64,uint64,byte[32],byte[32],byte[64],address))(address,byte[100])'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.keysSubmit(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(Message)
        return this
      },
      breachLimits(args: MethodArgs<'breach_limits(application)(bool,(uint64,uint64,uint64),address,byte[100])'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.breachLimits(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(BreachLimitsReturn)
        return this
      },
      breachPay(args: MethodArgs<'breach_pay(application)(address,byte[100])'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.breachPay(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(Message)
        return this
      },
      breachSuspended(args: MethodArgs<'breach_suspended(application)((uint64,uint64,uint64),address,byte[100])'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.breachSuspended(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(EarningsDistributionAndMessage)
        return this
      },
      contractClaim(args: MethodArgs<'contract_claim(application)(uint64,uint64,uint64)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.contractClaim(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(EarningsDistribution)
        return this
      },
      contractExpired(args: MethodArgs<'contract_expired(application)(address,byte[100])'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.contractExpired(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(Message)
        return this
      },
      contractWithdraw(args: MethodArgs<'contract_withdraw(address,application)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.contractWithdraw(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      contractDelete(args: MethodArgs<'contract_delete(address,application)(uint64,uint64)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.contractDelete(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(ContractDeleteReturn)
        return this
      },
      contractReportExpirySoon(args: MethodArgs<'contract_report_expiry_soon(uint64,uint64,application)(address,byte[100])'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.contractReportExpirySoon(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(Message)
        return this
      },
      gas(args: MethodArgs<'gas()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.gas(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getValidatorAsa(args: MethodArgs<'get_validator_asa(uint64)(uint64,uint64)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getValidatorAsa(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(ValidatorASA)
        return this
      },
      get delete() {
        const $this = this
        return {
          adDelete(args: MethodArgs<'ad_delete(address)void'>, params?: AppClientComposeCallCoreParams) {
            promiseChain = promiseChain.then(() => client.delete.adDelete(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as ValidatorAdComposer
  }
}
export type ValidatorAdComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the ad_config(address,address,bool,uint64)void ABI method.
   *
   * Sets all operation configuration parameters for the validator ad, i.e.
the validator manager account, the status whether the ad is live to accept new delegators (`live=True`) or not (`live=False`), and the maximum number of delegators the validators can accept.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  adConfig(args: MethodArgs<'ad_config(address,address,bool,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): ValidatorAdComposer<[...TReturns, MethodReturn<'ad_config(address,address,bool,uint64)void'>]>

  /**
   * Calls the ad_ready(address,bool)void ABI method.
   *
   * Ad manager sets its readiness for operation.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  adReady(args: MethodArgs<'ad_ready(address,bool)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): ValidatorAdComposer<[...TReturns, MethodReturn<'ad_ready(address,bool)void'>]>

  /**
   * Calls the ad_self_disclose(address,(byte[30],byte[60],byte[2],uint64,byte[20]))void ABI method.
   *
   * Ad owner sets its self-disclosure information.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  adSelfDisclose(args: MethodArgs<'ad_self_disclose(address,(byte[30],byte[60],byte[2],uint64,byte[20]))void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): ValidatorAdComposer<[...TReturns, MethodReturn<'ad_self_disclose(address,(byte[30],byte[60],byte[2],uint64,byte[20]))void'>]>

  /**
   * Calls the ad_terms(address,byte[32],(uint64,uint64,uint64,uint64,uint64),(uint64,uint64,uint64,uint64,uint64),(uint64,uint64),((uint64,uint64)[2]),(uint64,uint64),pay)void ABI method.
   *
   * Sets all the terms of the validator.
With this action, the validator agrees with the (new) terms.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  adTerms(args: MethodArgs<'ad_terms(address,byte[32],(uint64,uint64,uint64,uint64,uint64),(uint64,uint64,uint64,uint64,uint64),(uint64,uint64),((uint64,uint64)[2]),(uint64,uint64),pay)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): ValidatorAdComposer<[...TReturns, MethodReturn<'ad_terms(address,byte[32],(uint64,uint64,uint64,uint64,uint64),(uint64,uint64,uint64,uint64,uint64),(uint64,uint64),((uint64,uint64)[2]),(uint64,uint64),pay)void'>]>

  /**
   * Calls the ad_income(address,uint64)uint64 ABI method.
   *
   * Validator owner withdraws all available balance from the validator ad for the given asset.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  adIncome(args: MethodArgs<'ad_income(address,uint64)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): ValidatorAdComposer<[...TReturns, MethodReturn<'ad_income(address,uint64)uint64'>]>

  /**
   * Calls the ad_asa_close(address,uint64)void ABI method.
   *
   * Removes the asset's storage on the validator ad.
To be used before deleting the contract.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  adAsaClose(args: MethodArgs<'ad_asa_close(address,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): ValidatorAdComposer<[...TReturns, MethodReturn<'ad_asa_close(address,uint64)void'>]>

  /**
   * Calls the template_load_init(address,uint64,pay)void ABI method.
   *
   * Starts the process of uploading delegator contract template.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  templateLoadInit(args: MethodArgs<'template_load_init(address,uint64,pay)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): ValidatorAdComposer<[...TReturns, MethodReturn<'template_load_init(address,uint64,pay)void'>]>

  /**
   * Calls the template_load_data(address,uint64,byte[])void ABI method.
   *
   * Uploads a data chunk to the delegator contract template.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  templateLoadData(args: MethodArgs<'template_load_data(address,uint64,byte[])void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): ValidatorAdComposer<[...TReturns, MethodReturn<'template_load_data(address,uint64,byte[])void'>]>

  /**
   * Calls the template_load_end(address)void ABI method.
   *
   * Ends uploading of the delegator contract template.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  templateLoadEnd(args: MethodArgs<'template_load_end(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): ValidatorAdComposer<[...TReturns, MethodReturn<'template_load_end(address)void'>]>

  /**
   * Calls the contract_create(address,address,uint64,uint64,address,(uint64,uint64),pay,txn)uint64 ABI method.
   *
   * Creates a new delegator contract with the current delegation terms for the input
delegator contract manager and delegator contract beneficiary with the specified duration.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  contractCreate(args: MethodArgs<'contract_create(address,address,uint64,uint64,address,(uint64,uint64),pay,txn)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): ValidatorAdComposer<[...TReturns, MethodReturn<'contract_create(address,address,uint64,uint64,address,(uint64,uint64),pay,txn)uint64'>]>

  /**
   * Calls the keys_confirm(address,application)void ABI method.
   *
   * Delegator manager confirms that the delegator beneficiary has confirmed the submitted keys
and pays for the operational fee.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  keysConfirm(args: MethodArgs<'keys_confirm(address,application)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): ValidatorAdComposer<[...TReturns, MethodReturn<'keys_confirm(address,application)void'>]>

  /**
   * Calls the keys_not_confirmed(application)(address,byte[100]) ABI method.
   *
   * Reports that keys of a delegator contract have not been confirmed in time.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  keysNotConfirmed(args: MethodArgs<'keys_not_confirmed(application)(address,byte[100])'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): ValidatorAdComposer<[...TReturns, MethodReturn<'keys_not_confirmed(application)(address,byte[100])'>]>

  /**
   * Calls the keys_not_submitted(application)(address,byte[100]) ABI method.
   *
   * Reports that keys of a delegator contract have not been submitted in time.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  keysNotSubmitted(args: MethodArgs<'keys_not_submitted(application)(address,byte[100])'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): ValidatorAdComposer<[...TReturns, MethodReturn<'keys_not_submitted(application)(address,byte[100])'>]>

  /**
   * Calls the keys_submit(address,application,(uint64,uint64,uint64,byte[32],byte[32],byte[64],address))(address,byte[100]) ABI method.
   *
   * Validator manager submits the keys generated for the delegator beneficiary according to the contract terms.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  keysSubmit(args: MethodArgs<'keys_submit(address,application,(uint64,uint64,uint64,byte[32],byte[32],byte[64],address))(address,byte[100])'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): ValidatorAdComposer<[...TReturns, MethodReturn<'keys_submit(address,application,(uint64,uint64,uint64,byte[32],byte[32],byte[64],address))(address,byte[100])'>]>

  /**
   * Calls the breach_limits(application)(bool,(uint64,uint64,uint64),address,byte[100]) ABI method.
   *
   * Reports that a limit breach event occurred on the delegator beneficiary.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  breachLimits(args: MethodArgs<'breach_limits(application)(bool,(uint64,uint64,uint64),address,byte[100])'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): ValidatorAdComposer<[...TReturns, MethodReturn<'breach_limits(application)(bool,(uint64,uint64,uint64),address,byte[100])'>]>

  /**
   * Calls the breach_pay(application)(address,byte[100]) ABI method.
   *
   * Reports that a payment for the fee cannot be made from the delegator contract.
This can happen if the DelegatorContract payment asset has been frozen or clawed back by the asset manager.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  breachPay(args: MethodArgs<'breach_pay(application)(address,byte[100])'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): ValidatorAdComposer<[...TReturns, MethodReturn<'breach_pay(application)(address,byte[100])'>]>

  /**
   * Calls the breach_suspended(application)((uint64,uint64,uint64),address,byte[100]) ABI method.
   *
   * Reports that the delegator beneficiary was suspended by consensus.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  breachSuspended(args: MethodArgs<'breach_suspended(application)((uint64,uint64,uint64),address,byte[100])'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): ValidatorAdComposer<[...TReturns, MethodReturn<'breach_suspended(application)((uint64,uint64,uint64),address,byte[100])'>]>

  /**
   * Calls the contract_claim(application)(uint64,uint64,uint64) ABI method.
   *
   * Claims the operational fee up to this round from a delegator contract and
transfers it to the validator ad as well as the commission to the platform.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  contractClaim(args: MethodArgs<'contract_claim(application)(uint64,uint64,uint64)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): ValidatorAdComposer<[...TReturns, MethodReturn<'contract_claim(application)(uint64,uint64,uint64)'>]>

  /**
   * Calls the contract_expired(application)(address,byte[100]) ABI method.
   *
   * Reports that a delegator contract has expired.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  contractExpired(args: MethodArgs<'contract_expired(application)(address,byte[100])'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): ValidatorAdComposer<[...TReturns, MethodReturn<'contract_expired(application)(address,byte[100])'>]>

  /**
   * Calls the contract_withdraw(address,application)void ABI method.
   *
   * Reports that a delegator has gracefully withdrawn from the contract prematurely.
The delegator beneficiary should issue a key deregistration transaction 320 round before this call.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  contractWithdraw(args: MethodArgs<'contract_withdraw(address,application)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): ValidatorAdComposer<[...TReturns, MethodReturn<'contract_withdraw(address,application)void'>]>

  /**
   * Calls the contract_delete(address,application)(uint64,uint64) ABI method.
   *
   * Delegator deletes an ended contract, withdraws any remaining balance, and returns the MBR from ValidatorAd.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  contractDelete(args: MethodArgs<'contract_delete(address,application)(uint64,uint64)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): ValidatorAdComposer<[...TReturns, MethodReturn<'contract_delete(address,application)(uint64,uint64)'>]>

  /**
   * Calls the contract_report_expiry_soon(uint64,uint64,application)(address,byte[100]) ABI method.
   *
   * Reports that the contract will expire soon.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  contractReportExpirySoon(args: MethodArgs<'contract_report_expiry_soon(uint64,uint64,application)(address,byte[100])'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): ValidatorAdComposer<[...TReturns, MethodReturn<'contract_report_expiry_soon(uint64,uint64,application)(address,byte[100])'>]>

  /**
   * Calls the gas()void ABI method.
   *
   * To fit more resources in app reference arrays.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  gas(args: MethodArgs<'gas()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): ValidatorAdComposer<[...TReturns, MethodReturn<'gas()void'>]>

  /**
   * Calls the get_validator_asa(uint64)(uint64,uint64) ABI method.
   *
   * Returns information about the ASA that is or was supported by the validator ad at any point of time before
deletion.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getValidatorAsa(args: MethodArgs<'get_validator_asa(uint64)(uint64,uint64)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): ValidatorAdComposer<[...TReturns, MethodReturn<'get_validator_asa(uint64)(uint64,uint64)'>]>

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the ValidatorAd smart contract using the ad_delete(address)void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    adDelete(args: MethodArgs<'ad_delete(address)void'>, params?: AppClientComposeCallCoreParams): ValidatorAdComposer<[...TReturns, MethodReturn<'ad_delete(address)void'>]>
  }

  /**
   * Makes a clear_state call to an existing instance of the ValidatorAd smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): ValidatorAdComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): ValidatorAdComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<ValidatorAdComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<ValidatorAdComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type ValidatorAdComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type ValidatorAdComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
